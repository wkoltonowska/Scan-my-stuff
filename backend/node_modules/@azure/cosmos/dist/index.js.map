{"version":3,"file":"index.js","sources":["../src/common/partitionKeys.ts","../src/common/constants.ts","../src/encryption/Serializers/BooleanSerializer.ts","../src/encryption/Serializers/NumberSerializer.ts","../src/encryption/Serializers/FloatSerializer.ts","../src/encryption/Serializers/StringSerializer.ts","../src/encryption/enums/EncryptionType.ts","../src/encryption/enums/TypeMarker.ts","../src/request/ErrorResponse.ts","../src/common/helper.ts","../src/common/statusCodes.ts","../src/common/uriFactory.ts","../src/utils/hmac.ts","../src/utils/headers.ts","../src/auth.ts","../src/documents/ConnectionMode.ts","../src/documents/ConnectionPolicy.ts","../src/documents/ConsistencyLevel.ts","../src/documents/DatabaseAccount.ts","../src/documents/DataType.ts","../src/documents/IndexingMode.ts","../src/documents/IndexingPolicy.ts","../src/documents/IndexKind.ts","../src/documents/PartitionKeyInternal.ts","../src/documents/PartitionKey.ts","../src/documents/PartitionKeyDefinitionVersion.ts","../src/documents/PartitionKeyKind.ts","../src/documents/PermissionMode.ts","../src/documents/PriorityLevel.ts","../src/documents/TriggerOperation.ts","../src/documents/TriggerType.ts","../src/documents/UserDefinedFunctionType.ts","../src/documents/GeospatialType.ts","../src/documents/VectorEmbeddingPolicy.ts","../src/client/ClientUtils.ts","../src/extractPartitionKey.ts","../src/utils/typeChecks.ts","../src/common/logger.ts","../src/client/ChangeFeed/ChangeFeedRange.ts","../src/client/ChangeFeed/ChangeFeedIteratorResponse.ts","../src/routing/QueryRange.ts","../src/routing/inMemoryCollectionRoutingMap.ts","../src/CosmosDiagnostics.ts","../src/utils/time.ts","../src/diagnostics/CosmosDiagnosticsContext.ts","../src/request/ResourceResponse.ts","../src/queryMetrics/clientSideMetrics.ts","../src/queryMetrics/queryMetricsConstants.ts","../src/queryMetrics/timeSpan.ts","../src/queryMetrics/queryMetricsUtils.ts","../src/queryMetrics/queryPreparationTime.ts","../src/queryMetrics/runtimeExecutionTimes.ts","../src/queryMetrics/queryMetrics.ts","../src/queryExecutionContext/headerUtils.ts","../src/request/FeedResponse.ts","../src/request/TimeoutError.ts","../src/diagnostics/CosmosDbDiagnosticLevel.ts","../src/diagnostics/diagnosticLevelComparator.ts","../src/diagnostics/DiagnosticNodeInternal.ts","../src/utils/diagnostics.ts","../src/routing/CollectionRoutingMapFactory.ts","../src/routing/partitionKeyRangeCache.ts","../src/routing/smartRoutingMapProvider.ts","../src/client/ChangeFeed/FeedRangeQueue.ts","../src/client/ChangeFeed/CompositeContinuationToken.ts","../src/client/ChangeFeed/ChangeFeedStartFromBeginning.ts","../src/client/ChangeFeed/ChangeFeedStartFromTime.ts","../src/client/ChangeFeed/FeedRange.ts","../src/utils/hashing/encoding/prefix.ts","../src/utils/hashing/encoding/number.ts","../src/utils/hashing/murmurHash.ts","../src/utils/hashing/v2.ts","../src/client/ChangeFeed/ChangeFeedMode.ts","../src/client/ChangeFeed/changeFeedUtils.ts","../src/client/ChangeFeed/ChangeFeedForEpkRange.ts","../src/client/ChangeFeed/ContinuationTokenForPartitionKey.ts","../src/client/ChangeFeed/ChangeFeedForPartitionKey.ts","../src/client/ChangeFeed/ChangeFeedStartFromNow.ts","../src/client/ChangeFeed/ChangeFeedEnums.ts","../src/client/ChangeFeed/ChangeFeedStartFromContinuation.ts","../src/client/ChangeFeed/ChangeFeedStartFrom.ts","../src/client/ChangeFeed/buildChangeFeedIterator.ts","../src/client/ChangeFeed/ChangeFeedRetentionTimeSpan.ts","../src/client/ChangeFeed/ChangeFeedPolicy.ts","../src/client/ChangeFeed/ChangeFeedIteratorBuilder.ts","../src/request/request.ts","../src/utils/batch.ts","../src/utils/patch.ts","../src/queryExecutionContext/defaultQueryExecutionContext.ts","../src/queryExecutionContext/Aggregators/AverageAggregator.ts","../src/queryExecutionContext/Aggregators/CountAggregator.ts","../src/queryExecutionContext/orderByDocumentProducerComparator.ts","../src/queryExecutionContext/Aggregators/MaxAggregator.ts","../src/queryExecutionContext/Aggregators/MinAggregator.ts","../src/queryExecutionContext/Aggregators/SumAggregator.ts","../src/queryExecutionContext/Aggregators/StaticValueAggregator.ts","../src/queryExecutionContext/Aggregators/MakeListAggregator.ts","../src/queryExecutionContext/Aggregators/MakeSetAggregator.ts","../src/queryExecutionContext/Aggregators/index.ts","../src/queryExecutionContext/FetchResult.ts","../src/queryExecutionContext/documentProducer.ts","../src/queryExecutionContext/parallelQueryExecutionContextBase.ts","../src/queryExecutionContext/parallelQueryExecutionContext.ts","../src/queryExecutionContext/orderByQueryExecutionContext.ts","../src/queryExecutionContext/EndpointComponent/OffsetLimitEndpointComponent.ts","../src/queryExecutionContext/EndpointComponent/OrderByEndpointComponent.ts","../src/utils/digest.ts","../src/utils/hashObject.ts","../src/queryExecutionContext/EndpointComponent/OrderedDistinctEndpointComponent.ts","../src/queryExecutionContext/EndpointComponent/UnorderedDistinctEndpointComponent.ts","../src/queryExecutionContext/EndpointComponent/emptyGroup.ts","../src/queryExecutionContext/EndpointComponent/GroupByEndpointComponent.ts","../src/queryExecutionContext/EndpointComponent/GroupByValueEndpointComponent.ts","../src/utils/fixedSizePriorityQueue.ts","../src/utils/nonStreamingOrderByMap.ts","../src/queryExecutionContext/orderByComparator.ts","../src/queryExecutionContext/EndpointComponent/NonStreamingOrderByDistinctEndpointComponent.ts","../src/queryExecutionContext/EndpointComponent/NonStreamingOrderByEndpointComponent.ts","../src/queryExecutionContext/pipelinedQueryExecutionContext.ts","../src/request/hybridSearchQueryResult.ts","../src/queryExecutionContext/Aggregators/GlobalStatisticsAggregator.ts","../src/queryExecutionContext/hybridQueryExecutionContext.ts","../src/queryIterator.ts","../src/client/Conflict/ConflictResponse.ts","../src/client/Conflict/Conflict.ts","../src/client/Conflict/Conflicts.ts","../src/client/Conflict/ConflictResolutionMode.ts","../src/client/Item/ItemResponse.ts","../src/client/Item/Item.ts","../src/ChangeFeedResponse.ts","../src/ChangeFeedIterator.ts","../src/utils/hashing/multiHash.ts","../src/utils/hashing/encoding/string.ts","../src/utils/hashing/v1.ts","../src/utils/hashing/hash.ts","../src/encryption/EncryptionItemQueryIterator.ts","../src/client/Item/Items.ts","../src/client/StoredProcedure/StoredProcedureResponse.ts","../src/client/StoredProcedure/StoredProcedure.ts","../src/client/StoredProcedure/StoredProcedures.ts","../src/client/Trigger/TriggerResponse.ts","../src/client/Trigger/Trigger.ts","../src/client/Trigger/Triggers.ts","../src/client/UserDefinedFunction/UserDefinedFunctionResponse.ts","../src/client/UserDefinedFunction/UserDefinedFunction.ts","../src/client/UserDefinedFunction/UserDefinedFunctions.ts","../src/client/Script/Scripts.ts","../src/client/Container/ContainerResponse.ts","../src/client/Offer/OfferResponse.ts","../src/client/Offer/Offer.ts","../src/client/Offer/Offers.ts","../src/encryption/ClientEncryptionKey/ClientEncryptionKeyResponse.ts","../src/encryption/enums/EncryptionAlgorithm.ts","../src/encryption/enums/EncryptionKeyResolverName.ts","../src/encryption/enums/KeyEncryptionAlgorithm.ts","../src/encryption/EncryptionKeyResolver/AzureKeyVaultEncryptionKeyResolver.ts","../src/encryption/EncryptionKeyStoreProvider.ts","../src/encryption/EncryptionSettings.ts","../src/encryption/KeyEncryptionKey.ts","../src/encryption/AeadAes256CbcHmacSha256Algorithm/AeadAes256CbcHmacSha256Algorithm.ts","../src/encryption/EncryptionSettingForProperty.ts","../src/encryption/EncryptionKey/DataEncryptionKey.ts","../src/encryption/EncryptionKey/ProtectedDataEncryptionKey.ts","../src/encryption/EncryptionProcessor.ts","../src/encryption/CosmosEncryptedNumber.ts","../src/encryption/EncryptionQueryBuilder.ts","../src/client/Container/Container.ts","../src/utils/offers.ts","../src/client/Container/Containers.ts","../src/client/Permission/PermissionResponse.ts","../src/client/Permission/Permission.ts","../src/client/Permission/Permissions.ts","../src/client/User/UserResponse.ts","../src/client/User/User.ts","../src/client/User/Users.ts","../src/client/Database/DatabaseResponse.ts","../src/client/Database/Database.ts","../src/client/Database/Databases.ts","../src/plugins/Plugin.ts","../src/retry/defaultRetryPolicy.ts","../src/retry/endpointDiscoveryRetryPolicy.ts","../src/retry/resourceThrottleRetryPolicy.ts","../src/retry/sessionRetryPolicy.ts","../src/retry/timeoutFailoverRetryPolicy.ts","../src/retry/retryUtility.ts","../src/request/defaultAgent.ts","../src/utils/cachedClient.ts","../src/request/RequestHandler.ts","../src/utils/atob.ts","../src/session/VectorSessionToken.ts","../src/session/sessionContainer.ts","../src/utils/checkURL.ts","../src/utils/supportedQueryFeaturesBuilder.ts","../src/diagnostics/DiagnosticWriter.ts","../src/diagnostics/DiagnosticFormatter.ts","../src/common/platform.ts","../src/ClientContext.ts","../src/utils/strings.ts","../src/utils/envUtils.ts","../src/diagnostics/index.ts","../src/encryption/Cache/ProtectedDataEncryptionKeyCache.ts","../src/encryption/Cache/KeyEncryptionKeyCache.ts","../src/encryption/Cache/EncryptionSettingsCache.ts","../src/encryption/Cache/ClientEncryptionKeyPropertiesCache.ts","../src/encryption/EncryptionManager.ts","../src/globalEndpointManager.ts","../src/CosmosClient.ts","../src/client/SasToken/SasTokenProperties.ts","../src/utils/encode.ts","../src/utils/SasToken.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport const DEFAULT_PARTITION_KEY_PATH = \"/_partitionKey\" as \"/_partitionKey\"; // eslint-disable-line @typescript-eslint/prefer-as-const\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport interface PartitionKeyRangePropertiesNames {\n  // Partition Key Range Constants\n  MinInclusive: \"minInclusive\";\n  MaxExclusive: \"maxExclusive\";\n  Id: \"id\";\n}\n\n/**\n * @hidden\n */\nexport const Constants = {\n  HttpHeaders: {\n    Authorization: \"authorization\",\n    ETag: \"etag\",\n    MethodOverride: \"X-HTTP-Method\",\n    Slug: \"Slug\",\n    ContentType: \"Content-Type\",\n    LastModified: \"Last-Modified\",\n    ContentEncoding: \"Content-Encoding\",\n    CharacterSet: \"CharacterSet\",\n    UserAgent: \"User-Agent\",\n    CustomUserAgent: \"x-ms-useragent\",\n    IfModifiedSince: \"If-Modified-Since\",\n    IfMatch: \"If-Match\",\n    IfNoneMatch: \"If-None-Match\",\n    ContentLength: \"Content-Length\",\n    AcceptEncoding: \"Accept-Encoding\",\n    KeepAlive: \"Keep-Alive\",\n    CacheControl: \"Cache-Control\",\n    TransferEncoding: \"Transfer-Encoding\",\n    ContentLanguage: \"Content-Language\",\n    ContentLocation: \"Content-Location\",\n    ContentMd5: \"Content-Md5\",\n    ContentRange: \"Content-Range\",\n    Accept: \"Accept\",\n    AcceptCharset: \"Accept-Charset\",\n    AcceptLanguage: \"Accept-Language\",\n    IfRange: \"If-Range\",\n    IfUnmodifiedSince: \"If-Unmodified-Since\",\n    MaxForwards: \"Max-Forwards\",\n    ProxyAuthorization: \"Proxy-Authorization\",\n    AcceptRanges: \"Accept-Ranges\",\n    ProxyAuthenticate: \"Proxy-Authenticate\",\n    RetryAfter: \"Retry-After\",\n    SetCookie: \"Set-Cookie\",\n    WwwAuthenticate: \"Www-Authenticate\",\n    Origin: \"Origin\",\n    Host: \"Host\",\n    AccessControlAllowOrigin: \"Access-Control-Allow-Origin\",\n    AccessControlAllowHeaders: \"Access-Control-Allow-Headers\",\n    KeyValueEncodingFormat: \"application/x-www-form-urlencoded\",\n    WrapAssertionFormat: \"wrap_assertion_format\",\n    WrapAssertion: \"wrap_assertion\",\n    WrapScope: \"wrap_scope\",\n    SimpleToken: \"SWT\",\n    HttpDate: \"date\",\n    Prefer: \"Prefer\",\n    Location: \"Location\",\n    Referer: \"referer\",\n    A_IM: \"A-IM\",\n\n    // Query\n    Query: \"x-ms-documentdb-query\",\n    IsQuery: \"x-ms-documentdb-isquery\",\n    IsQueryPlan: \"x-ms-cosmos-is-query-plan-request\",\n    SupportedQueryFeatures: \"x-ms-cosmos-supported-query-features\",\n    QueryVersion: \"x-ms-cosmos-query-version\",\n\n    // Our custom Azure Cosmos DB headers\n    Continuation: \"x-ms-continuation\",\n    ContinuationToken: \"x-ms-continuation-token\",\n    PageSize: \"x-ms-max-item-count\",\n    ItemCount: \"x-ms-item-count\",\n    ChangeFeedWireFormatVersion: \"x-ms-cosmos-changefeed-wire-format-version\",\n\n    // Request sender generated. Simply echoed by backend.\n    ActivityId: \"x-ms-activity-id\",\n    CorrelatedActivityId: \"x-ms-cosmos-correlated-activityid\",\n    PreTriggerInclude: \"x-ms-documentdb-pre-trigger-include\",\n    PreTriggerExclude: \"x-ms-documentdb-pre-trigger-exclude\",\n    PostTriggerInclude: \"x-ms-documentdb-post-trigger-include\",\n    PostTriggerExclude: \"x-ms-documentdb-post-trigger-exclude\",\n    IndexingDirective: \"x-ms-indexing-directive\",\n    SessionToken: \"x-ms-session-token\",\n    ConsistencyLevel: \"x-ms-consistency-level\",\n    XDate: \"x-ms-date\",\n    CollectionPartitionInfo: \"x-ms-collection-partition-info\",\n    CollectionServiceInfo: \"x-ms-collection-service-info\",\n    // Deprecated, use RetryAfterInMs instead.\n    RetryAfterInMilliseconds: \"x-ms-retry-after-ms\",\n    RetryAfterInMs: \"x-ms-retry-after-ms\",\n    IsFeedUnfiltered: \"x-ms-is-feed-unfiltered\",\n    ResourceTokenExpiry: \"x-ms-documentdb-expiry-seconds\",\n    EnableScanInQuery: \"x-ms-documentdb-query-enable-scan\",\n    EmitVerboseTracesInQuery: \"x-ms-documentdb-query-emit-traces\",\n    EnableCrossPartitionQuery: \"x-ms-documentdb-query-enablecrosspartition\",\n    ParallelizeCrossPartitionQuery: \"x-ms-documentdb-query-parallelizecrosspartitionquery\",\n    ResponseContinuationTokenLimitInKB: \"x-ms-documentdb-responsecontinuationtokenlimitinkb\",\n    SDKSupportedCapabilities: \"x-ms-cosmos-sdk-supportedcapabilities\",\n\n    // QueryMetrics\n    // Request header to tell backend to give you query metrics.\n    PopulateQueryMetrics: \"x-ms-documentdb-populatequerymetrics\",\n    // Response header that holds the serialized version of query metrics.\n    QueryMetrics: \"x-ms-documentdb-query-metrics\",\n\n    // IndexMetrics\n    // Request header to tell backend to give you index metrics.\n    PopulateIndexMetrics: \"x-ms-cosmos-populateindexmetrics-V2\",\n    // Response header that holds the serialized version of index metrics.\n    IndexUtilization: \"x-ms-cosmos-index-utilization\",\n    // Version headers and values\n    Version: \"x-ms-version\",\n\n    // Owner name\n    OwnerFullName: \"x-ms-alt-content-path\",\n\n    // Owner ID used for name based request in session token.\n    OwnerId: \"x-ms-content-path\",\n\n    // Partition Key\n    PartitionKey: \"x-ms-documentdb-partitionkey\",\n    PartitionKeyRangeID: \"x-ms-documentdb-partitionkeyrangeid\",\n\n    // Epk Range headers\n    StartEpk: \"x-ms-start-epk\",\n    EndEpk: \"x-ms-end-epk\",\n\n    // Read Feed Type\n    ReadFeedKeyType: \"x-ms-read-key-type\",\n\n    // Quota Info\n    MaxEntityCount: \"x-ms-root-entity-max-count\",\n    CurrentEntityCount: \"x-ms-root-entity-current-count\",\n    CollectionQuotaInMb: \"x-ms-collection-quota-mb\",\n    CollectionCurrentUsageInMb: \"x-ms-collection-usage-mb\",\n    MaxMediaStorageUsageInMB: \"x-ms-max-media-storage-usage-mb\",\n    CurrentMediaStorageUsageInMB: \"x-ms-media-storage-usage-mb\",\n    RequestCharge: \"x-ms-request-charge\",\n    PopulateQuotaInfo: \"x-ms-documentdb-populatequotainfo\",\n    MaxResourceQuota: \"x-ms-resource-quota\",\n\n    // Offer header\n    OfferType: \"x-ms-offer-type\",\n    OfferThroughput: \"x-ms-offer-throughput\",\n    AutoscaleSettings: \"x-ms-cosmos-offer-autopilot-settings\",\n\n    // Custom RUs/minute headers\n    DisableRUPerMinuteUsage: \"x-ms-documentdb-disable-ru-per-minute-usage\",\n    IsRUPerMinuteUsed: \"x-ms-documentdb-is-ru-per-minute-used\",\n    OfferIsRUPerMinuteThroughputEnabled: \"x-ms-offer-is-ru-per-minute-throughput-enabled\",\n\n    // Index progress headers\n    IndexTransformationProgress: \"x-ms-documentdb-collection-index-transformation-progress\",\n    LazyIndexingProgress: \"x-ms-documentdb-collection-lazy-indexing-progress\",\n\n    // Upsert header\n    IsUpsert: \"x-ms-documentdb-is-upsert\",\n\n    // Sub status of the error\n    SubStatus: \"x-ms-substatus\",\n\n    // StoredProcedure related headers\n    EnableScriptLogging: \"x-ms-documentdb-script-enable-logging\",\n    ScriptLogResults: \"x-ms-documentdb-script-log-results\",\n\n    // Multi-Region Write\n    ALLOW_MULTIPLE_WRITES: \"x-ms-cosmos-allow-tentative-writes\",\n\n    // Bulk/Batch header\n    IsBatchRequest: \"x-ms-cosmos-is-batch-request\",\n    IsBatchAtomic: \"x-ms-cosmos-batch-atomic\",\n    BatchContinueOnError: \"x-ms-cosmos-batch-continue-on-error\",\n\n    // Dedicated Gateway Headers\n    DedicatedGatewayPerRequestCacheStaleness: \"x-ms-dedicatedgateway-max-age\",\n    DedicatedGatewayPerRequestBypassCache: \"x-ms-dedicatedgateway-bypass-cache\",\n\n    // Cache Refresh header\n    ForceRefresh: \"x-ms-force-refresh\",\n\n    // Throughput related headers\n    PriorityLevel: \"x-ms-cosmos-priority-level\",\n    ThroughputBucket: \"x-ms-cosmos-throughput-bucket\",\n\n    // Encryption Headers\n    IsClientEncryptedHeader: \"x-ms-cosmos-is-client-encrypted\",\n    IntendedCollectionHeader: \"x-ms-cosmos-intended-collection-rid\",\n    DatabaseRidHeader: \"x-ms-cosmos-database-rid\",\n    AllowCachedReadsHeader: \"x-ms-cosmos-allow-cachedreads\",\n  },\n  // ThrottledRequests Retry policy default values\n  ThrottledRequestMaxRetryAttemptCount: 9,\n  ThrottledRequestMaxWaitTimeInSeconds: 30,\n  ThrottledRequestFixedRetryIntervalInMs: 0,\n\n  // GlobalDB related constants\n  WritableLocations: \"writableLocations\",\n  ReadableLocations: \"readableLocations\",\n  LocationUnavailableExpirationTimeInMs: 5 * 60 * 1000, // 5 minutes\n\n  // ServiceDocument Resource\n  ENABLE_MULTIPLE_WRITABLE_LOCATIONS: \"enableMultipleWriteLocations\",\n\n  // Background refresh time\n  DefaultUnavailableLocationExpirationTimeMS: 5 * 60 * 1000,\n\n  // Client generated retry count response header\n  ThrottleRetryCount: \"x-ms-throttle-retry-count\",\n  ThrottleRetryWaitTimeInMs: \"x-ms-throttle-retry-wait-time-ms\",\n\n  // Platform\n  CurrentVersion: \"2020-07-15\",\n  AzureNamespace: \"Azure.Cosmos\",\n  AzurePackageName: \"@azure/cosmos\",\n  SDKName: \"azure-cosmos-js\",\n  SDKVersion: \"4.3.0\",\n\n  // Diagnostics\n  CosmosDbDiagnosticLevelEnvVarName: \"AZURE_COSMOSDB_DIAGNOSTICS_LEVEL\",\n\n  // Bulk Operations\n  DefaultMaxBulkRequestBodySizeInBytes: 220201,\n\n  // Encryption\n  Encryption: {\n    DiagnosticsDecryptOperation: \"Decrypt\",\n    DiagnosticsDuration: \"Duration in milliseconds\",\n    DiagnosticsEncryptionDiagnostics: \"EncryptionDiagnostics\",\n    DiagnosticsEncryptOperation: \"Encrypt\",\n    DiagnosticsPropertiesEncryptedCount: \"Properties Encrypted Count\",\n    DiagnosticsPropertiesDecryptedCount: \"Properties Decrypted Count\",\n    DiagnosticsStartTime: \"Start time\",\n  },\n\n  Quota: {\n    CollectionSize: \"collectionSize\",\n  },\n\n  Path: {\n    Root: \"/\",\n    DatabasesPathSegment: \"dbs\",\n    CollectionsPathSegment: \"colls\",\n    UsersPathSegment: \"users\",\n    DocumentsPathSegment: \"docs\",\n    PermissionsPathSegment: \"permissions\",\n    StoredProceduresPathSegment: \"sprocs\",\n    TriggersPathSegment: \"triggers\",\n    UserDefinedFunctionsPathSegment: \"udfs\",\n    ConflictsPathSegment: \"conflicts\",\n    AttachmentsPathSegment: \"attachments\",\n    PartitionKeyRangesPathSegment: \"pkranges\",\n    SchemasPathSegment: \"schemas\",\n    OffersPathSegment: \"offers\",\n    TopologyPathSegment: \"topology\",\n    DatabaseAccountPathSegment: \"databaseaccount\",\n  },\n\n  PartitionKeyRange: {\n    // Partition Key Range Constants\n    MinInclusive: \"minInclusive\",\n    MaxExclusive: \"maxExclusive\",\n    Id: \"id\",\n  } as PartitionKeyRangePropertiesNames,\n\n  QueryRangeConstants: {\n    // Partition Key Range Constants\n    MinInclusive: \"minInclusive\",\n    MaxExclusive: \"maxExclusive\",\n    min: \"min\",\n  },\n\n  /**\n   * @deprecated Use EffectivePartitionKeyConstants instead\n   */\n  EffectiveParitionKeyConstants: {\n    MinimumInclusiveEffectivePartitionKey: \"\",\n    MaximumExclusiveEffectivePartitionKey: \"FF\",\n  },\n\n  EffectivePartitionKeyConstants: {\n    MinimumInclusiveEffectivePartitionKey: \"\",\n    MaximumExclusiveEffectivePartitionKey: \"FF\",\n  },\n\n  // Changefeed AllVersionsAndDeletesMode formatting version\n  AllVersionsAndDeletesChangeFeedWireFormatVersion: \"2021-09-15\",\n  ChangeFeedIfNoneMatchStartFromNowHeader: \"*\",\n  // Default TTL for encryption caches is 2 hrs (7200 sec)\n  DefaultEncryptionCacheTimeToLiveInSeconds: 7200,\n  // Timeout to clear encryption related cache\n  EncryptionCacheRefreshIntervalInMs: 60000, // 1 minute\n};\n\n/**\n * @hidden\n */\nexport enum ResourceType {\n  none = \"\",\n  database = \"dbs\",\n  offer = \"offers\",\n  user = \"users\",\n  permission = \"permissions\",\n  container = \"colls\",\n  conflicts = \"conflicts\",\n  sproc = \"sprocs\",\n  udf = \"udfs\",\n  trigger = \"triggers\",\n  item = \"docs\",\n  pkranges = \"pkranges\",\n  partitionkey = \"partitionKey\",\n  /** resource representing client encryption keys to encrypt/decrypt data */\n  clientencryptionkey = \"clientencryptionkeys\",\n}\n\n/**\n * @hidden\n */\nexport enum HTTPMethod {\n  get = \"GET\",\n  patch = \"PATCH\",\n  post = \"POST\",\n  put = \"PUT\",\n  delete = \"DELETE\",\n}\n\n/**\n * @hidden\n */\nexport enum OperationType {\n  Create = \"create\",\n  Replace = \"replace\",\n  Upsert = \"upsert\",\n  Delete = \"delete\",\n  Read = \"read\",\n  Query = \"query\",\n  Execute = \"execute\",\n  Batch = \"batch\",\n  Patch = \"patch\",\n}\n\n/**\n * @hidden\n */\nexport enum CosmosKeyType {\n  PrimaryMaster = \"PRIMARY_MASTER\",\n  SecondaryMaster = \"SECONDARY_MASTER\",\n  PrimaryReadOnly = \"PRIMARY_READONLY\",\n  SecondaryReadOnly = \"SECONDARY_READONLY\",\n}\n\n/**\n * @hidden\n */\nexport enum CosmosContainerChildResourceKind {\n  Item = \"ITEM\",\n  StoredProcedure = \"STORED_PROCEDURE\",\n  UserDefinedFunction = \"USER_DEFINED_FUNCTION\",\n  Trigger = \"TRIGGER\",\n}\n/**\n * @hidden\n */\nexport enum PermissionScopeValues {\n  /**\n   * Values which set permission Scope applicable to control plane related operations.\n   */\n  ScopeAccountReadValue = 0x0001,\n  ScopeAccountListDatabasesValue = 0x0002,\n  ScopeDatabaseReadValue = 0x0004,\n  ScopeDatabaseReadOfferValue = 0x0008,\n  ScopeDatabaseListContainerValue = 0x0010,\n  ScopeContainerReadValue = 0x0020,\n  ScopeContainerReadOfferValue = 0x0040,\n\n  ScopeAccountCreateDatabasesValue = 0x0001,\n  ScopeAccountDeleteDatabasesValue = 0x0002,\n  ScopeDatabaseDeleteValue = 0x0004,\n  ScopeDatabaseReplaceOfferValue = 0x0008,\n  ScopeDatabaseCreateContainerValue = 0x0010,\n  ScopeDatabaseDeleteContainerValue = 0x0020,\n  ScopeContainerReplaceValue = 0x0040,\n  ScopeContainerDeleteValue = 0x0080,\n  ScopeContainerReplaceOfferValue = 0x0100,\n\n  ScopeAccountReadAllAccessValue = 0xffff,\n  ScopeDatabaseReadAllAccessValue = PermissionScopeValues.ScopeDatabaseReadValue |\n    PermissionScopeValues.ScopeDatabaseReadOfferValue |\n    PermissionScopeValues.ScopeDatabaseListContainerValue |\n    PermissionScopeValues.ScopeContainerReadValue |\n    PermissionScopeValues.ScopeContainerReadOfferValue,\n\n  ScopeContainersReadAllAccessValue = PermissionScopeValues.ScopeContainerReadValue |\n    PermissionScopeValues.ScopeContainerReadOfferValue,\n\n  ScopeAccountWriteAllAccessValue = 0xffff,\n  ScopeDatabaseWriteAllAccessValue = PermissionScopeValues.ScopeDatabaseDeleteValue |\n    PermissionScopeValues.ScopeDatabaseReplaceOfferValue |\n    PermissionScopeValues.ScopeDatabaseCreateContainerValue |\n    PermissionScopeValues.ScopeDatabaseDeleteContainerValue |\n    PermissionScopeValues.ScopeContainerReplaceValue |\n    PermissionScopeValues.ScopeContainerDeleteValue |\n    PermissionScopeValues.ScopeContainerReplaceOfferValue,\n\n  ScopeContainersWriteAllAccessValue = PermissionScopeValues.ScopeContainerReplaceValue |\n    PermissionScopeValues.ScopeContainerDeleteValue |\n    PermissionScopeValues.ScopeContainerReplaceOfferValue,\n\n  /**\n   * Values which set permission Scope applicable to data plane related operations.\n   */\n  ScopeContainerExecuteQueriesValue = 0x00000001,\n  ScopeContainerReadFeedsValue = 0x00000002,\n  ScopeContainerReadStoredProceduresValue = 0x00000004,\n  ScopeContainerReadUserDefinedFunctionsValue = 0x00000008,\n  ScopeContainerReadTriggersValue = 0x00000010,\n  ScopeContainerReadConflictsValue = 0x00000020,\n  ScopeItemReadValue = 0x00000040,\n  ScopeStoredProcedureReadValue = 0x00000080,\n  ScopeUserDefinedFunctionReadValue = 0x00000100,\n  ScopeTriggerReadValue = 0x00000200,\n\n  ScopeContainerCreateItemsValue = 0x00000001,\n  ScopeContainerReplaceItemsValue = 0x00000002,\n  ScopeContainerUpsertItemsValue = 0x00000004,\n  ScopeContainerDeleteItemsValue = 0x00000008,\n  ScopeContainerCreateStoredProceduresValue = 0x00000010,\n  ScopeContainerReplaceStoredProceduresValue = 0x00000020,\n  ScopeContainerDeleteStoredProceduresValue = 0x00000040,\n  ScopeContainerExecuteStoredProceduresValue = 0x00000080,\n  ScopeContainerCreateTriggersValue = 0x00000100,\n  ScopeContainerReplaceTriggersValue = 0x00000200,\n  ScopeContainerDeleteTriggersValue = 0x00000400,\n  ScopeContainerCreateUserDefinedFunctionsValue = 0x00000800,\n  ScopeContainerReplaceUserDefinedFunctionsValue = 0x00001000,\n  ScopeContainerDeleteUserDefinedFunctionSValue = 0x00002000,\n  ScopeContainerDeleteCONFLICTSValue = 0x00004000,\n  ScopeItemReplaceValue = 0x00010000,\n  ScopeItemUpsertValue = 0x00020000,\n  ScopeItemDeleteValue = 0x00040000,\n  ScopeStoredProcedureReplaceValue = 0x00100000,\n  ScopeStoredProcedureDeleteValue = 0x00200000,\n  ScopeStoredProcedureExecuteValue = 0x00400000,\n  ScopeUserDefinedFunctionReplaceValue = 0x00800000,\n  ScopeUserDefinedFunctionDeleteValue = 0x01000000,\n  ScopeTriggerReplaceValue = 0x02000000,\n  ScopeTriggerDeleteValue = 0x04000000,\n\n  ScopeContainerReadAllAccessValue = 0xffffffff,\n  ScopeItemReadAllAccessValue = PermissionScopeValues.ScopeContainerExecuteQueriesValue |\n    PermissionScopeValues.ScopeItemReadValue,\n  ScopeContainerWriteAllAccessValue = 0xffffffff,\n  ScopeItemWriteAllAccessValue = PermissionScopeValues.ScopeContainerCreateItemsValue |\n    PermissionScopeValues.ScopeContainerReplaceItemsValue |\n    PermissionScopeValues.ScopeContainerUpsertItemsValue |\n    PermissionScopeValues.ScopeContainerDeleteItemsValue |\n    PermissionScopeValues.ScopeItemReplaceValue |\n    PermissionScopeValues.ScopeItemUpsertValue |\n    PermissionScopeValues.ScopeItemDeleteValue,\n\n  NoneValue = 0,\n}\n/**\n * @hidden\n */\nexport enum SasTokenPermissionKind {\n  ContainerCreateItems = PermissionScopeValues.ScopeContainerCreateItemsValue,\n  ContainerReplaceItems = PermissionScopeValues.ScopeContainerReplaceItemsValue,\n  ContainerUpsertItems = PermissionScopeValues.ScopeContainerUpsertItemsValue,\n  ContainerDeleteItems = PermissionScopeValues.ScopeContainerDeleteValue,\n  ContainerExecuteQueries = PermissionScopeValues.ScopeContainerExecuteQueriesValue,\n  ContainerReadFeeds = PermissionScopeValues.ScopeContainerReadFeedsValue,\n  ContainerCreateStoreProcedure = PermissionScopeValues.ScopeContainerCreateStoredProceduresValue,\n  ContainerReadStoreProcedure = PermissionScopeValues.ScopeContainerReadStoredProceduresValue,\n  ContainerReplaceStoreProcedure = PermissionScopeValues.ScopeContainerReplaceStoredProceduresValue,\n  ContainerDeleteStoreProcedure = PermissionScopeValues.ScopeContainerDeleteStoredProceduresValue,\n  ContainerCreateTriggers = PermissionScopeValues.ScopeContainerCreateTriggersValue,\n  ContainerReadTriggers = PermissionScopeValues.ScopeContainerReadTriggersValue,\n  ContainerReplaceTriggers = PermissionScopeValues.ScopeContainerReplaceTriggersValue,\n  ContainerDeleteTriggers = PermissionScopeValues.ScopeContainerDeleteTriggersValue,\n  ContainerCreateUserDefinedFunctions = PermissionScopeValues.ScopeContainerCreateUserDefinedFunctionsValue,\n  ContainerReadUserDefinedFunctions = PermissionScopeValues.ScopeContainerReadUserDefinedFunctionsValue,\n  ContainerReplaceUserDefinedFunctions = PermissionScopeValues.ScopeContainerReplaceUserDefinedFunctionsValue,\n  ContainerDeleteUserDefinedFunctions = PermissionScopeValues.ScopeContainerDeleteUserDefinedFunctionSValue,\n  ContainerExecuteStoredProcedure = PermissionScopeValues.ScopeContainerExecuteStoredProceduresValue,\n  ContainerReadConflicts = PermissionScopeValues.ScopeContainerReadConflictsValue,\n  ContainerDeleteConflicts = PermissionScopeValues.ScopeContainerDeleteCONFLICTSValue,\n  ContainerReadAny = PermissionScopeValues.ScopeContainerReadOfferValue,\n  ContainerFullAccess = PermissionScopeValues.ScopeContainerReadAllAccessValue,\n  ItemReadAny = PermissionScopeValues.ScopeItemReplaceValue,\n  ItemFullAccess = PermissionScopeValues.ScopeItemReadAllAccessValue,\n  ItemRead = PermissionScopeValues.ScopeItemReadValue,\n  ItemReplace = PermissionScopeValues.ScopeItemReplaceValue,\n  ItemUpsert = PermissionScopeValues.ScopeItemUpsertValue,\n  ItemDelete = PermissionScopeValues.ScopeItemDeleteValue,\n  StoreProcedureRead = PermissionScopeValues.ScopeStoredProcedureReadValue,\n  StoreProcedureReplace = PermissionScopeValues.ScopeStoredProcedureReplaceValue,\n  StoreProcedureDelete = PermissionScopeValues.ScopeStoredProcedureDeleteValue,\n  StoreProcedureExecute = PermissionScopeValues.ScopeStoredProcedureExecuteValue,\n  UserDefinedFuntionRead = PermissionScopeValues.ScopeUserDefinedFunctionReadValue,\n  UserDefinedFuntionReplace = PermissionScopeValues.ScopeUserDefinedFunctionReplaceValue,\n  UserDefinedFuntionDelete = PermissionScopeValues.ScopeUserDefinedFunctionDeleteValue,\n  TriggerRead = PermissionScopeValues.ScopeTriggerReadValue,\n  TriggerReplace = PermissionScopeValues.ScopeTriggerReplaceValue,\n  TriggerDelete = PermissionScopeValues.ScopeTriggerDeleteValue,\n}\n\nexport enum QueryFeature {\n  NonValueAggregate = \"NonValueAggregate\",\n  Aggregate = \"Aggregate\",\n  Distinct = \"Distinct\",\n  MultipleOrderBy = \"MultipleOrderBy\",\n  OffsetAndLimit = \"OffsetAndLimit\",\n  OrderBy = \"OrderBy\",\n  Top = \"Top\",\n  CompositeAggregate = \"CompositeAggregate\",\n  GroupBy = \"GroupBy\",\n  MultipleAggregates = \"MultipleAggregates\",\n  NonStreamingOrderBy = \"NonStreamingOrderBy\",\n  ListAndSetAggregate = \"ListAndSetAggregate\",\n  CountIf = \"CountIf\",\n  HybridSearch = \"HybridSearch\",\n}\n\nexport enum SDKSupportedCapabilities {\n  PartitionMerge = 1,\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Serializer } from \"./Serializer\";\n\nexport class BooleanSerializer implements Serializer {\n  serialize(value: boolean): Buffer {\n    const numValue = value ? 1 : 0;\n    const buffer = Buffer.alloc(8);\n    buffer.writeBigInt64LE(BigInt(numValue), 0);\n    return buffer;\n  }\n\n  deserialize(bytes: Buffer): boolean {\n    if (!bytes || bytes.length < 1) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    return !!bytes[0];\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Serializer } from \"./Serializer\";\n\nexport class NumberSerializer implements Serializer {\n  deserialize(bytes: Buffer): number {\n    if (!bytes || bytes.length < 8) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    const num = Number(bytes.readBigInt64LE(0));\n    return num;\n  }\n\n  serialize(value: number): Buffer {\n    const newValue = BigInt(value);\n    const buffer = Buffer.alloc(8);\n    buffer.writeBigInt64LE(newValue, 0);\n    return buffer;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Serializer } from \"./Serializer\";\n\nexport class FloatSerializer implements Serializer {\n  deserialize(bytes: Buffer): number {\n    if (!bytes || bytes.length < 8) {\n      throw new Error(\"Invalid byte array for deserialization\");\n    }\n    const res = bytes.readDoubleLE(0);\n    return res;\n  }\n\n  serialize(value: number): Buffer {\n    if (!Number.isFinite(value)) {\n      throw new Error(\"Value is out of range\");\n    }\n    const buffer = Buffer.alloc(8);\n    buffer.writeDoubleLE(value, 0);\n    return buffer;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Serializer } from \"./Serializer\";\n\nexport class StringSerializer implements Serializer {\n  private static characterEncoding: BufferEncoding = \"utf-8\";\n\n  deserialize(bytes: Buffer): string {\n    return bytes.toString(StringSerializer.characterEncoding);\n  }\n\n  serialize(value: string): Buffer {\n    return Buffer.from(value, StringSerializer.characterEncoding);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The type of encryption to be performed.\n */\nexport enum EncryptionType {\n  /** Deterministic type will always produce same encrypted value for same plaintext. */\n  DETERMINISTIC = \"Deterministic\",\n  /** Randomized type will produce different encrypted value for same plaintext. */\n  RANDOMIZED = \"Randomized\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport enum TypeMarker {\n  Null = 1,\n  Boolean = 2,\n  Double = 3,\n  Long = 4,\n  String = 5,\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics, CosmosHeaders } from \"../index\";\n\nexport interface ErrorBody {\n  code: string;\n  message: string;\n  /**\n   * @hidden\n   */\n  additionalErrorInfo?: PartitionedQueryExecutionInfo;\n}\n\n/**\n * @hidden\n */\nexport interface PartitionedQueryExecutionInfo {\n  partitionedQueryExecutionInfoVersion: number;\n  queryInfo?: QueryInfo;\n  /**\n   * Represents hybrid query information.\n   */\n  hybridSearchQueryInfo?: HybridSearchQueryInfo;\n  queryRanges: QueryRange[];\n}\n\n/**\n * @hidden\n */\nexport interface QueryRange {\n  min: string;\n  max: string;\n  isMinInclusive: boolean;\n  isMaxInclusive: boolean;\n}\n\n/**\n * @hidden\n */\nexport interface QueryInfo {\n  top?: any;\n  orderBy?: any[];\n  orderByExpressions?: any[];\n  offset?: number;\n  limit?: number;\n  aggregates?: AggregateType[];\n  groupByExpressions?: GroupByExpressions;\n  groupByAliasToAggregateType: GroupByAliasToAggregateType;\n  rewrittenQuery?: any;\n  distinctType: string;\n  hasSelectValue: boolean;\n  /**\n   * determines whether the query is of non streaming orderby type.\n   */\n  hasNonStreamingOrderBy: boolean;\n}\n\n/**\n * @hidden\n * Represents the hybrid search query information\n */\nexport interface HybridSearchQueryInfo {\n  /**\n   * The query to be used for fetching global statistics\n   */\n  globalStatisticsQuery: string;\n  /**\n   * Query information for the subsequent queries\n   */\n  componentQueryInfos: QueryInfo[];\n  /**\n   * The number of results in the final result set\n   */\n  take: number;\n  /**\n   * The number of results to skip in the final result set\n   */\n  skip: number;\n  /**\n   * Whether the query requires global statistics\n   */\n  requiresGlobalStatistics: boolean;\n}\n\nexport type GroupByExpressions = string[];\n\nexport type AggregateType = \"Average\" | \"Count\" | \"Max\" | \"Min\" | \"Sum\" | \"MakeSet\" | \"MakeList\";\n\nexport interface GroupByAliasToAggregateType {\n  [key: string]: AggregateType;\n}\n\nexport class ErrorResponse extends Error {\n  code?: number | string;\n  substatus?: number;\n  body?: ErrorBody;\n  headers?: CosmosHeaders;\n  activityId?: string;\n  retryAfterInMs?: number;\n  retryAfterInMilliseconds?: number;\n  [key: string]: any;\n  diagnostics?: CosmosDiagnostics;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport { PartitionKeyDefinition } from \"../documents\";\nimport { ClientEncryptionPolicy } from \"../encryption/ClientEncryptionPolicy\";\nimport {\n  Serializer,\n  NumberSerializer,\n  FloatSerializer,\n  StringSerializer,\n  BooleanSerializer,\n} from \"../encryption/Serializers\";\nimport { EncryptionType } from \"../encryption/enums/EncryptionType\";\nimport { TypeMarker } from \"../encryption/enums/TypeMarker\";\nimport { ErrorResponse } from \"../request/ErrorResponse\";\nimport { OperationType, ResourceType } from \"./constants\";\n\nconst trimLeftSlashes = new RegExp(\"^[/]+\");\nconst trimRightSlashes = new RegExp(\"[/]+$\");\nconst illegalResourceIdCharacters = new RegExp(\"[/\\\\\\\\?#]\");\nconst illegalItemResourceIdCharacters = new RegExp(\"[/\\\\\\\\#]\");\n\n/** @hidden */\nexport function jsonStringifyAndEscapeNonASCII(arg: unknown): string {\n  // TODO: better way for this? Not sure.\n  // escapes non-ASCII characters as \\uXXXX\n  return JSON.stringify(arg).replace(/[\\u007F-\\uFFFF]/g, (m) => {\n    return \"\\\\u\" + (\"0000\" + m.charCodeAt(0).toString(16)).slice(-4);\n  });\n}\n\n/**\n * @hidden\n */\nexport function parseLink(resourcePath: string): {\n  type: ResourceType;\n  objectBody: {\n    id: string;\n    self: string;\n  };\n} {\n  if (resourcePath.length === 0) {\n    /* for DatabaseAccount case, both type and objectBody will be undefined. */\n    return {\n      type: undefined,\n      objectBody: undefined,\n    };\n  }\n\n  if (resourcePath[resourcePath.length - 1] !== \"/\") {\n    resourcePath = resourcePath + \"/\";\n  }\n\n  if (resourcePath[0] !== \"/\") {\n    resourcePath = \"/\" + resourcePath;\n  }\n\n  /*\n         The path will be in the form of /[resourceType]/[resourceId]/ ....\n         /[resourceType]//[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/\n         or /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId]/[resourceType]/[resourceId]/ ....\n          /[resourceType]/[resourceId]/\n         The result of split will be in the form of\n         [[[resourceType], [resourceId] ... ,[resourceType], [resourceId], \"\"]\n         In the first case, to extract the resourceId it will the element before last ( at length -2 )\n         and the type will be before it ( at length -3 )\n         In the second case, to extract the resource type it will the element before last ( at length -2 )\n        */\n  const pathParts = resourcePath.split(\"/\");\n  let id;\n  let type: ResourceType;\n  if (pathParts.length % 2 === 0) {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/[resourceId].\n    id = pathParts[pathParts.length - 2];\n    type = pathParts[pathParts.length - 3] as ResourceType;\n  } else {\n    // request in form /[resourceType]/[resourceId]/ .... /[resourceType]/.\n    id = pathParts[pathParts.length - 3];\n    type = pathParts[pathParts.length - 2] as ResourceType;\n  }\n\n  const result = {\n    type,\n    objectBody: {\n      id,\n      self: resourcePath,\n    },\n  };\n\n  return result;\n}\n\n/**\n * @hidden\n */\nexport function isReadRequest(operationType: OperationType): boolean {\n  return operationType === OperationType.Read || operationType === OperationType.Query;\n}\n\n/**\n * @hidden\n */\nexport function sleep(time: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve();\n    }, time);\n  });\n}\n\n/**\n * @hidden\n */\nexport function getContainerLink(link: string): string {\n  return link.split(\"/\").slice(0, 4).join(\"/\");\n}\n\n/**\n * @hidden\n */\nexport function prepareURL(endpoint: string, path: string): string {\n  return trimSlashes(endpoint) + path;\n}\n\n/**\n * @hidden\n */\nexport function trimSlashes(source: string): string {\n  return source.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n\n/**\n * @hidden\n */\nexport function getHexaDigit(): string {\n  return Math.floor(Math.random() * 16).toString(16);\n}\n\n/**\n * @hidden\n */\nexport function parsePath(path: string): string[] {\n  const pathParts = [];\n  let currentIndex = 0;\n\n  const throwError = (): never => {\n    throw new Error(\"Path \" + path + \" is invalid at index \" + currentIndex);\n  };\n\n  const getEscapedToken = (): string => {\n    const quote = path[currentIndex];\n    let newIndex = ++currentIndex;\n\n    for (;;) {\n      newIndex = path.indexOf(quote, newIndex);\n      if (newIndex === -1) {\n        throwError();\n      }\n\n      if (path[newIndex - 1] !== \"\\\\\") {\n        break;\n      }\n\n      ++newIndex;\n    }\n\n    const token = path.substr(currentIndex, newIndex - currentIndex);\n    currentIndex = newIndex + 1;\n    return token;\n  };\n\n  const getToken = (): string => {\n    const newIndex = path.indexOf(\"/\", currentIndex);\n    let token = null;\n    if (newIndex === -1) {\n      token = path.substr(currentIndex);\n      currentIndex = path.length;\n    } else {\n      token = path.substr(currentIndex, newIndex - currentIndex);\n      currentIndex = newIndex;\n    }\n\n    token = token.trim();\n    return token;\n  };\n\n  while (currentIndex < path.length) {\n    if (path[currentIndex] !== \"/\") {\n      throwError();\n    }\n\n    if (++currentIndex === path.length) {\n      break;\n    }\n\n    if (path[currentIndex] === '\"' || path[currentIndex] === \"'\") {\n      pathParts.push(getEscapedToken());\n    } else {\n      pathParts.push(getToken());\n    }\n  }\n\n  return pathParts;\n}\n\n/**\n * @hidden\n */\nexport function isResourceValid(resource: { id?: string }, err: { message?: string }): boolean {\n  // TODO: fix strictness issues so that caller contexts respects the types of the functions\n  if (resource.id) {\n    if (typeof resource.id !== \"string\") {\n      err.message = \"Id must be a string.\";\n      return false;\n    }\n\n    if (\n      resource.id.indexOf(\"/\") !== -1 ||\n      resource.id.indexOf(\"\\\\\") !== -1 ||\n      resource.id.indexOf(\"?\") !== -1 ||\n      resource.id.indexOf(\"#\") !== -1\n    ) {\n      err.message = \"Id contains illegal chars.\";\n      return false;\n    }\n\n    if (resource.id[resource.id.length - 1] === \" \") {\n      err.message = \"Id ends with a space.\";\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @hidden\n */\nexport function isItemResourceValid(resource: { id?: string }, err: { message?: string }): boolean {\n  // TODO: fix strictness issues so that caller contexts respects the types of the functions\n  if (resource.id) {\n    if (typeof resource.id !== \"string\") {\n      err.message = \"Id must be a string.\";\n      return false;\n    }\n\n    if (\n      resource.id.indexOf(\"/\") !== -1 ||\n      resource.id.indexOf(\"\\\\\") !== -1 ||\n      resource.id.indexOf(\"#\") !== -1\n    ) {\n      err.message = \"Id contains illegal chars.\";\n      return false;\n    }\n  }\n  return true;\n}\n\n/** @hidden */\nexport function getIdFromLink(resourceLink: string): string {\n  resourceLink = trimSlashes(resourceLink);\n  return resourceLink;\n}\n\n/** @hidden */\nexport function getPathFromLink(resourceLink: string, resourceType?: string): string {\n  resourceLink = trimSlashes(resourceLink);\n  if (resourceType) {\n    return \"/\" + encodeURI(resourceLink) + \"/\" + resourceType;\n  } else {\n    return \"/\" + encodeURI(resourceLink);\n  }\n}\n\n/**\n * @hidden\n */\nexport function isStringNullOrEmpty(inputString: string): boolean {\n  // checks whether string is null, undefined, empty or only contains space\n  return !inputString || /^\\s*$/.test(inputString);\n}\n\n/**\n * @hidden\n */\nexport function trimSlashFromLeftAndRight(inputString: string): string {\n  if (typeof inputString !== \"string\") {\n    throw new Error(\"invalid input: input is not string\");\n  }\n\n  return inputString.replace(trimLeftSlashes, \"\").replace(trimRightSlashes, \"\");\n}\n\n/**\n * @hidden\n */\nexport function validateResourceId(resourceId: string): boolean {\n  // if resourceId is not a string or is empty throw an error\n  if (typeof resourceId !== \"string\" || isStringNullOrEmpty(resourceId)) {\n    throw new Error(\"Resource ID must be a string and cannot be undefined, null or empty\");\n  }\n\n  // if resource id contains illegal characters throw an error\n  if (illegalResourceIdCharacters.test(resourceId)) {\n    throw new Error(\"Illegal characters ['/', '\\\\', '#', '?'] cannot be used in Resource ID\");\n  }\n\n  return true;\n}\n\n/**\n * @hidden\n */\nexport function validateItemResourceId(resourceId: string): boolean {\n  // if resourceId is not a string or is empty throw an error\n  if (typeof resourceId !== \"string\" || isStringNullOrEmpty(resourceId)) {\n    throw new Error(\"Resource ID must be a string and cannot be undefined, null or empty\");\n  }\n\n  // if resource id contains illegal characters throw an error\n  if (illegalItemResourceIdCharacters.test(resourceId)) {\n    throw new Error(\"Illegal characters ['/', '\\\\', '#'] cannot be used in Resource ID\");\n  }\n\n  return true;\n}\n\n/**\n * @hidden\n */\nexport function getResourceIdFromPath(resourcePath: string): string {\n  if (!resourcePath || typeof resourcePath !== \"string\") {\n    return null;\n  }\n\n  const trimmedPath = trimSlashFromLeftAndRight(resourcePath);\n  const pathSegments = trimmedPath.split(\"/\");\n\n  // number of segments of a path must always be even\n  if (pathSegments.length % 2 !== 0) {\n    return null;\n  }\n\n  return pathSegments[pathSegments.length - 1];\n}\n\n/**\n * @hidden\n */\ninterface ConnectionObject {\n  AccountEndpoint: string;\n  AccountKey: string;\n}\n\n/**\n * @hidden\n */\nexport function parseConnectionString(connectionString: string): CosmosClientOptions {\n  const keyValueStrings = connectionString.split(\";\");\n  const { AccountEndpoint, AccountKey } = keyValueStrings.reduce(\n    (connectionObject, keyValueString: string) => {\n      const [key, ...value] = keyValueString.split(\"=\");\n      (connectionObject as any)[key] = value.join(\"=\");\n      return connectionObject;\n    },\n    {} as ConnectionObject,\n  );\n  if (!AccountEndpoint || !AccountKey) {\n    throw new Error(\"Could not parse the provided connection string\");\n  }\n  return {\n    endpoint: AccountEndpoint,\n    key: AccountKey,\n  };\n}\n\n/**\n * utility function to return copy of object to avoid encryption of original object passed\n * in the CRUD methods.\n * @hidden\n */\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-shadow, no-prototype-builtins */\nexport function copyObject(obj: any): any {\n  return JSON.parse(\n    JSON.stringify(obj, (_, value) => {\n      if (typeof value === \"bigint\") {\n        throw new Error(`BigInt type is not supported`);\n      }\n      return value;\n    }),\n  );\n}\n\n/**\n * @hidden\n */\nexport function createDeserializer(typeMarker: TypeMarker): Serializer {\n  switch (typeMarker) {\n    case TypeMarker.Long: {\n      // return instance\n      return new NumberSerializer();\n    }\n    case TypeMarker.Double:\n      return new FloatSerializer();\n    case TypeMarker.String:\n      return new StringSerializer();\n    case TypeMarker.Boolean:\n      return new BooleanSerializer();\n    default:\n      throw new Error(\"Invalid or Unsupported data type passed.\");\n  }\n}\n\n/**\n * @hidden\n * extracts the top-level path\n */\nexport function extractPath(path: string): string {\n  const secondSlashIndex = path.indexOf(\"/\", path.indexOf(\"/\") + 1);\n  return secondSlashIndex === -1 ? path : path.substring(0, secondSlashIndex);\n}\n\nexport function createSerializer(\n  propertyValue: boolean | string | number | Date,\n  type?: TypeMarker,\n): [TypeMarker, Serializer] {\n  if (type) {\n    if (type === TypeMarker.Long) {\n      return [TypeMarker.Long, new NumberSerializer()];\n    } else if (type === TypeMarker.Double) {\n      return [TypeMarker.Double, new FloatSerializer()];\n    } else if (type === TypeMarker.String) {\n      return [TypeMarker.String, new StringSerializer()];\n    } else if (type === TypeMarker.Boolean) {\n      return [TypeMarker.Boolean, new BooleanSerializer()];\n    } else {\n      throw new Error(\"Invalid or Unsupported data type passed.\");\n    }\n  } else {\n    switch (typeof propertyValue) {\n      case \"boolean\":\n        return [TypeMarker.Boolean, new BooleanSerializer()];\n      case \"string\":\n        return [TypeMarker.String, new StringSerializer()];\n      case \"object\":\n        if (propertyValue.constructor === Date) {\n          return [TypeMarker.String, new StringSerializer()];\n        }\n        throw new Error(\"Invalid or Unsupported data type passed.\");\n      case \"number\":\n        if (!Number.isInteger(propertyValue)) {\n          return [TypeMarker.Double, new FloatSerializer()];\n        } else {\n          return [TypeMarker.Long, new NumberSerializer()];\n        }\n      default:\n        throw new Error(\"Invalid or Unsupported data type passed.\");\n    }\n  }\n}\n/**\n * @hidden\n * verifies policy format version, included paths and ensures that id and partition key paths specified in the client encryption policy\n * for encryption are encrypted using Deterministic encryption algorithm.\n */\nexport function validateClientEncryptionPolicy(\n  clientEncryptionPolicy: ClientEncryptionPolicy,\n  partitionKey: PartitionKeyDefinition,\n) {\n  const policyFormatVersion = clientEncryptionPolicy.policyFormatVersion;\n  if (policyFormatVersion < 1 || policyFormatVersion > 2) {\n    throw new ErrorResponse(\"Supported versions of client encryption policy are 1 and 2.\");\n  }\n  const paths = new Set<string>();\n  // checks for duplicate paths and validates the path format and clientEncryptionKeyId\n  for (const includedPath of clientEncryptionPolicy.includedPaths) {\n    if (paths.has(includedPath.path)) {\n      throw new ErrorResponse(\n        `Duplicate path found: ${includedPath.path} in client encryption policy.`,\n      );\n    }\n    if (\n      includedPath.path === undefined ||\n      includedPath.path === null ||\n      includedPath.path === \"\" ||\n      includedPath.path === \"/\"\n    ) {\n      throw new ErrorResponse(\"Path needs to be defined in ClientEncryptionIncludedPath.\");\n    }\n    if (\n      includedPath.clientEncryptionKeyId === undefined ||\n      includedPath.clientEncryptionKeyId === null ||\n      includedPath.clientEncryptionKeyId === \"\" ||\n      typeof includedPath.clientEncryptionKeyId !== \"string\"\n    ) {\n      throw new ErrorResponse(\n        \"ClientEncryptionKeyId needs to be defined as string type in ClientEncryptionIncludedPath.\",\n      );\n    }\n    if (includedPath.path[0] !== \"/\") {\n      throw new ErrorResponse(\"Path in ClientEncryptionIncludedPath must start with '/'.\");\n    }\n    const pathSegments = includedPath.path.split(\"/\").filter((segment) => segment.length > 0);\n    if (pathSegments.length > 1) {\n      throw new ErrorResponse(\"Only top-level paths are currently supported for encryption\");\n    }\n    paths.add(includedPath.path);\n  }\n\n  // checks if id and partition key paths are encrypted using Deterministic encryption algorithm.\n  const encryptedPaths = clientEncryptionPolicy.includedPaths;\n  const partitionKeyPaths = partitionKey.paths.map(extractPath);\n  let isPartitionKeyEncrypted = false;\n  let isIdEncrypted = false;\n  for (const encryptedPath of encryptedPaths) {\n    if (encryptedPath.path === \"/id\") {\n      isIdEncrypted = true;\n      if (encryptedPath.encryptionType !== EncryptionType.DETERMINISTIC) {\n        throw new ErrorResponse(\n          \"The '/id' property must be encrypted using Deterministic encryption.\",\n        );\n      }\n    }\n    if (partitionKeyPaths.includes(encryptedPath.path)) {\n      isPartitionKeyEncrypted = true;\n      if (encryptedPath.encryptionType !== EncryptionType.DETERMINISTIC) {\n        throw new ErrorResponse(\n          `Path: ${encryptedPath.path} which is part of the partition key has to be encrypted with Deterministic type Encryption.`,\n        );\n      }\n    }\n  }\n  // Ensures that the policy format version is 2 if id or partition key paths are encrypted.\n  if (\n    (isPartitionKeyEncrypted || isIdEncrypted) &&\n    clientEncryptionPolicy.policyFormatVersion === 1\n  ) {\n    throw new ErrorResponse(\n      \"Encryption of partition key or id is only supported with policy format version 2.\",\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @hidden\n */\nexport interface StatusCodesType {\n  // Success\n  Ok: 200;\n  Created: 201;\n  Accepted: 202;\n  NoContent: 204;\n  NotModified: 304;\n\n  // Client error\n  BadRequest: 400;\n  Unauthorized: 401;\n  Forbidden: 403;\n  NotFound: 404;\n  MethodNotAllowed: 405;\n  RequestTimeout: 408;\n  Conflict: 409;\n  Gone: 410;\n  PreconditionFailed: 412;\n  RequestEntityTooLarge: 413;\n  TooManyRequests: 429;\n  RetryWith: 449;\n\n  // Server Error\n  InternalServerError: 500;\n  ServiceUnavailable: 503;\n\n  // System codes\n  ENOTFOUND: \"ENOTFOUND\";\n\n  // Operation pause and cancel. These are FAKE status codes for QOS logging purpose only.\n  OperationPaused: 1200;\n  OperationCancelled: 1201;\n}\n\n/**\n * @hidden\n */\nexport const StatusCodes: StatusCodesType = {\n  // Success\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NoContent: 204,\n  NotModified: 304,\n\n  // Client error\n  BadRequest: 400,\n  Unauthorized: 401,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  PreconditionFailed: 412,\n  RequestEntityTooLarge: 413,\n  TooManyRequests: 429,\n  RetryWith: 449,\n\n  // Server Error\n  InternalServerError: 500,\n  ServiceUnavailable: 503,\n\n  // System codes\n  ENOTFOUND: \"ENOTFOUND\",\n\n  // Operation pause and cancel. These are FAKE status codes for QOS logging purpose only.\n  OperationPaused: 1200,\n  OperationCancelled: 1201,\n};\n\n/**\n * @hidden\n */\nexport interface SubStatusCodesType {\n  Unknown: 0;\n\n  // 400: Bad Request Substatus\n  CrossPartitionQueryNotServable: 1004;\n  IncorrectContainerRidSubstatus: 1024;\n  PartitionKeyMismatch: 1001;\n\n  // 410: StatusCodeType_Gone: substatus\n  PartitionKeyRangeGone: 1002;\n  CompletingSplit: 1007;\n\n  // 404: NotFound Substatus\n  ReadSessionNotAvailable: 1002;\n\n  // 403: Forbidden Substatus\n  WriteForbidden: 3;\n  DatabaseAccountNotFound: 1008;\n}\n\n/**\n * @hidden\n */\nexport const SubStatusCodes: SubStatusCodesType = {\n  Unknown: 0,\n\n  // 400: Bad Request Substatus\n  CrossPartitionQueryNotServable: 1004,\n  IncorrectContainerRidSubstatus: 1024,\n  PartitionKeyMismatch: 1001,\n\n  // 410: StatusCodeType_Gone: substatus\n  PartitionKeyRangeGone: 1002,\n  CompletingSplit: 1007,\n  // 404: NotFound Substatus\n  ReadSessionNotAvailable: 1002,\n\n  // 403: Forbidden Substatus\n  WriteForbidden: 3,\n  DatabaseAccountNotFound: 1008,\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"./constants\";\nimport { trimSlashFromLeftAndRight, validateResourceId, validateItemResourceId } from \"./helper\";\n\n/**\n * Would be used when creating or deleting a DocumentCollection\n * or a User in Azure Cosmos DB database service\n * @hidden\n * Given a database id, this creates a database link.\n * @param databaseId - The database id\n * @returns A database link in the format of `dbs/{0}`\n * with `{0}` being a Uri escaped version of the databaseId\n */\nexport function createDatabaseUri(databaseId: string): string {\n  databaseId = trimSlashFromLeftAndRight(databaseId);\n  validateResourceId(databaseId);\n\n  return Constants.Path.DatabasesPathSegment + \"/\" + databaseId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when updating or deleting a DocumentCollection, creating a\n * Document, a StoredProcedure, a Trigger, a UserDefinedFunction, or when executing a query\n * with CreateDocumentQuery in Azure Cosmos DB database service.\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @returns A collection link in the format of `dbs/{0}/colls/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createDocumentCollectionUri(databaseId: string, collectionId: string): string {\n  collectionId = trimSlashFromLeftAndRight(collectionId);\n  validateResourceId(collectionId);\n\n  return (\n    createDatabaseUri(databaseId) + \"/\" + Constants.Path.CollectionsPathSegment + \"/\" + collectionId\n  );\n}\n\n/**\n * Given a database and user id, this creates a user link.\n * Would be used when creating a Permission, or when replacing or deleting\n * a User in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param userId - The user id\n * @returns A user link in the format of `dbs/{0}/users/{1}`\n * with `{0}` being a Uri escaped version of the databaseId and `{1}` being userId\n * @hidden\n */\nexport function createUserUri(databaseId: string, userId: string): string {\n  userId = trimSlashFromLeftAndRight(userId);\n  validateResourceId(userId);\n\n  return createDatabaseUri(databaseId) + \"/\" + Constants.Path.UsersPathSegment + \"/\" + userId;\n}\n\n/**\n * Given a database and collection id, this creates a collection link.\n * Would be used when creating an Attachment, or when replacing\n * or deleting a Document in Azure Cosmos DB database service\n * @param databaseId - The database id\n * @param collectionId - The collection id\n * @param documentId - The document id\n * @returns A document link in the format of\n * `dbs/{0}/colls/{1}/docs/{2}` with `{0}` being a Uri escaped version of\n * the databaseId, `{1}` being collectionId and `{2}` being the documentId\n * @hidden\n */\nexport function createDocumentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string,\n): string {\n  documentId = trimSlashFromLeftAndRight(documentId);\n  validateItemResourceId(documentId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.DocumentsPathSegment +\n    \"/\" +\n    documentId\n  );\n}\n\n/**\n * Given a database, collection and document id, this creates a document link.\n * Would be used when replacing or deleting a Permission in Azure Cosmos DB database service.\n * @param databaseId    -The database Id\n * @param userId        -The user Id\n * @param permissionId  - The permissionId\n * @returns A permission link in the format of `dbs/{0}/users/{1}/permissions/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being userId and `{2}` being permissionId\n * @hidden\n */\nexport function createPermissionUri(\n  databaseId: string,\n  userId: string,\n  permissionId: string,\n): string {\n  permissionId = trimSlashFromLeftAndRight(permissionId);\n  validateResourceId(permissionId);\n\n  return (\n    createUserUri(databaseId, userId) +\n    \"/\" +\n    Constants.Path.PermissionsPathSegment +\n    \"/\" +\n    permissionId\n  );\n}\n\n/**\n * Given a database, collection and stored proc id, this creates a stored proc link.\n * Would be used when replacing, executing, or deleting a StoredProcedure in\n * Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param storedProcedureId -The stored procedure Id\n * @returns A stored procedure link in the format of\n * `dbs/{0}/colls/{1}/sprocs/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the storedProcedureId\n * @hidden\n */\nexport function createStoredProcedureUri(\n  databaseId: string,\n  collectionId: string,\n  storedProcedureId: string,\n): string {\n  storedProcedureId = trimSlashFromLeftAndRight(storedProcedureId);\n  validateResourceId(storedProcedureId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.StoredProceduresPathSegment +\n    \"/\" +\n    storedProcedureId\n  );\n}\n\n/**\n * Given a database, collection and trigger id, this creates a trigger link.\n * Would be used when replacing, executing, or deleting a Trigger in Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param triggerId         -The trigger Id\n * @returns A trigger link in the format of\n * `dbs/{0}/colls/{1}/triggers/{2}` with `{0}` being a Uri escaped version of the databaseId,\n * `{1}` being collectionId and `{2}` being the triggerId\n * @hidden\n */\nexport function createTriggerUri(\n  databaseId: string,\n  collectionId: string,\n  triggerId: string,\n): string {\n  triggerId = trimSlashFromLeftAndRight(triggerId);\n  validateResourceId(triggerId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.TriggersPathSegment +\n    \"/\" +\n    triggerId\n  );\n}\n\n/**\n * Given a database, collection and udf id, this creates a udf link.\n * Would be used when replacing, executing, or deleting a UserDefinedFunction in\n * Azure Cosmos DB database service\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param udfId             -The User Defined Function Id\n * @returns A udf link in the format of `dbs/{0}/colls/{1}/udfs/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the udfId\n * @hidden\n */\nexport function createUserDefinedFunctionUri(\n  databaseId: string,\n  collectionId: string,\n  udfId: string,\n): string {\n  udfId = trimSlashFromLeftAndRight(udfId);\n  validateResourceId(udfId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.UserDefinedFunctionsPathSegment +\n    \"/\" +\n    udfId\n  );\n}\n\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param conflictId        -The conflict Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createConflictUri(\n  databaseId: string,\n  collectionId: string,\n  conflictId: string,\n): string {\n  conflictId = trimSlashFromLeftAndRight(conflictId);\n  validateResourceId(conflictId);\n\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.ConflictsPathSegment +\n    \"/\" +\n    conflictId\n  );\n}\n\n/**\n * Given a database, collection and conflict id, this creates a conflict link.\n * Would be used when creating a Conflict in Azure Cosmos DB database service.\n * @param databaseId        -The database Id\n * @param collectionId      -The collection Id\n * @param documentId        -The document Id\n * @param attachmentId      -The attachment Id\n * @returns A conflict link in the format of `dbs/{0}/colls/{1}/conflicts/{2}`\n * with `{0}` being a Uri escaped version of the databaseId, `{1}` being collectionId and `{2}` being the conflictId\n * @hidden\n */\nexport function createAttachmentUri(\n  databaseId: string,\n  collectionId: string,\n  documentId: string,\n  attachmentId: string,\n): string {\n  attachmentId = trimSlashFromLeftAndRight(attachmentId);\n  validateResourceId(attachmentId);\n\n  return (\n    createDocumentUri(databaseId, collectionId, documentId) +\n    \"/\" +\n    Constants.Path.AttachmentsPathSegment +\n    \"/\" +\n    attachmentId\n  );\n}\n\n/**\n * Given a database and collection, this creates a partition key ranges link in\n *  the Azure Cosmos DB database service.\n * @param databaseId - The database Id\n * @param collectionId - The collection Id\n * @returns A partition key ranges link in the format of\n * `dbs/{0}/colls/{1}/pkranges` with `{0}` being a Uri escaped version of the databaseId and `{1}` being collectionId\n * @hidden\n */\nexport function createPartitionKeyRangesUri(databaseId: string, collectionId: string): string {\n  return (\n    createDocumentCollectionUri(databaseId, collectionId) +\n    \"/\" +\n    Constants.Path.PartitionKeyRangesPathSegment\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createHmac } from \"crypto\";\n\nexport async function hmac(key: string, message: string): Promise<string> {\n  return createHmac(\"sha256\", Buffer.from(key, \"base64\")).update(message).digest(\"base64\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { hmac } from \"./hmac\";\nimport type { HTTPMethod } from \"../common\";\nimport { ResourceType, Constants } from \"../common\";\n\nexport async function generateHeaders(\n  masterKey: string,\n  method: HTTPMethod,\n  resourceType: ResourceType = ResourceType.none,\n  resourceId: string = \"\",\n  date = new Date(),\n): Promise<{\n  [x: string]: string;\n}> {\n  if (masterKey.startsWith(\"type=sas&\")) {\n    return {\n      [Constants.HttpHeaders.Authorization]: encodeURIComponent(masterKey),\n      [Constants.HttpHeaders.XDate]: date.toUTCString(),\n    };\n  }\n  const sig = await signature(masterKey, method, resourceType, resourceId, date);\n\n  return {\n    [Constants.HttpHeaders.Authorization]: sig,\n    [Constants.HttpHeaders.XDate]: date.toUTCString(),\n  };\n}\n\nasync function signature(\n  masterKey: string,\n  method: HTTPMethod,\n  resourceType: ResourceType,\n  resourceId: string = \"\",\n  date = new Date(),\n): Promise<string> {\n  const type = \"master\";\n  const version = \"1.0\";\n  const text =\n    method.toLowerCase() +\n    \"\\n\" +\n    resourceType.toLowerCase() +\n    \"\\n\" +\n    resourceId +\n    \"\\n\" +\n    date.toUTCString().toLowerCase() +\n    \"\\n\" +\n    \"\" +\n    \"\\n\";\n\n  const signed = await hmac(masterKey, text);\n\n  return encodeURIComponent(\"type=\" + type + \"&ver=\" + version + \"&sig=\" + signed);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { generateHeaders } from \"./utils/headers\";\nimport type { HTTPMethod } from \"./common\";\nimport {\n  Constants,\n  getResourceIdFromPath,\n  ResourceType,\n  trimSlashFromLeftAndRight,\n} from \"./common\";\nimport type { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport type { CosmosHeaders } from \"./queryExecutionContext\";\n\n/** @hidden */\nexport interface RequestInfo {\n  verb: HTTPMethod;\n  path: string;\n  resourceId: string;\n  resourceType: ResourceType;\n  headers: CosmosHeaders;\n}\n\nexport type TokenProvider = (requestInfo: RequestInfo) => Promise<string>;\n\n/**\n * @hidden\n */\nexport async function setAuthorizationHeader(\n  clientOptions: CosmosClientOptions,\n  verb: HTTPMethod,\n  path: string,\n  resourceId: string,\n  resourceType: ResourceType,\n  headers: CosmosHeaders,\n): Promise<void> {\n  if (clientOptions.permissionFeed) {\n    clientOptions.resourceTokens = {};\n    for (const permission of clientOptions.permissionFeed) {\n      const id = getResourceIdFromPath(permission.resource);\n      if (!id) {\n        throw new Error(`authorization error: ${id} \\\n                          is an invalid resourceId in permissionFeed`);\n      }\n\n      clientOptions.resourceTokens[id] = (permission as any)._token; // TODO: any\n    }\n  }\n\n  if (clientOptions.key) {\n    await setAuthorizationTokenHeaderUsingMasterKey(\n      verb,\n      resourceId,\n      resourceType,\n      headers,\n      clientOptions.key,\n    );\n  } else if (clientOptions.resourceTokens) {\n    headers[Constants.HttpHeaders.Authorization] = encodeURIComponent(\n      getAuthorizationTokenUsingResourceTokens(clientOptions.resourceTokens, path, resourceId),\n    );\n  } else if (clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.Authorization] = encodeURIComponent(\n      await clientOptions.tokenProvider({ verb, path, resourceId, resourceType, headers }),\n    );\n  }\n}\n\n/**\n * The default function for setting header token using the masterKey\n * @hidden\n */\nexport async function setAuthorizationTokenHeaderUsingMasterKey(\n  verb: HTTPMethod,\n  resourceId: string,\n  resourceType: ResourceType,\n  headers: CosmosHeaders,\n  masterKey: string,\n): Promise<void> {\n  // TODO This should live in cosmos-sign\n  if (resourceType === ResourceType.offer) {\n    resourceId = resourceId && resourceId.toLowerCase();\n  }\n  headers = Object.assign(\n    headers,\n    await generateHeaders(masterKey, verb, resourceType, resourceId),\n  );\n}\n\n/**\n * @hidden\n */\n// TODO: Resource tokens\nexport function getAuthorizationTokenUsingResourceTokens(\n  resourceTokens: { [resourceId: string]: string },\n  path: string,\n  resourceId: string,\n): string {\n  if (resourceTokens && Object.keys(resourceTokens).length > 0) {\n    // For database account access(through getDatabaseAccount API), path and resourceId are \"\",\n    // so in this case we return the first token to be used for creating the auth header as the\n    // service will accept any token in this case\n    if (!path && !resourceId) {\n      return resourceTokens[Object.keys(resourceTokens)[0]];\n    }\n\n    // If we have exact resource token for the path use it\n    if (resourceId && resourceTokens[resourceId]) {\n      return resourceTokens[resourceId];\n    }\n\n    // minimum valid path /dbs\n    if (!path || path.length < 4) {\n      // TODO: This should throw an error\n      return null;\n    }\n\n    path = trimSlashFromLeftAndRight(path);\n    const pathSegments = (path && path.split(\"/\")) || [];\n\n    // Item path\n    if (pathSegments.length === 6) {\n      // Look for a container token matching the item path\n      const containerPath = pathSegments.slice(0, 4).map(decodeURIComponent).join(\"/\");\n      if (resourceTokens[containerPath]) {\n        return resourceTokens[containerPath];\n      }\n    }\n\n    // TODO remove in v4: This is legacy behavior that lets someone use a resource token pointing ONLY at an ID\n    // It was used when _rid was exposed by the SDK, but now that we are using user provided ids it is not needed\n    // However removing it now would be a breaking change\n    // if it's an incomplete path like /dbs/db1/colls/, start from the parent resource\n    let index = pathSegments.length % 2 === 0 ? pathSegments.length - 1 : pathSegments.length - 2;\n    for (; index > 0; index -= 2) {\n      const id = decodeURI(pathSegments[index]);\n      if (resourceTokens[id]) {\n        return resourceTokens[id];\n      }\n    }\n  }\n\n  // TODO: This should throw an error\n  return null;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** Determines the connection behavior of the CosmosClient. Note, we currently only support Gateway Mode. */\nexport enum ConnectionMode {\n  /** Gateway mode talks to an intermediate gateway which handles the direct communication with your individual partitions. */\n  Gateway = 0,\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/constants\";\nimport type { RetryOptions } from \"../retry/retryOptions\";\nimport { ConnectionMode } from \"./ConnectionMode\";\n/**\n * Represents the Connection policy associated with a CosmosClient in the Azure Cosmos DB database service.\n */\nexport interface ConnectionPolicy {\n  /** Determines which mode to connect to Cosmos with. (Currently only supports Gateway option) */\n  connectionMode?: ConnectionMode;\n  /** Request timeout (time to wait for response from network peer). Represented in milliseconds. */\n  requestTimeout?: number;\n  /**\n   * Flag to enable/disable automatic redirecting of requests based on read/write operations. Default true.\n   * Required to call client.dispose() when this is set to true after destroying the CosmosClient inside another process or in the browser.\n   */\n  enableEndpointDiscovery?: boolean;\n  /** List of azure regions to be used as preferred locations for read requests. */\n  preferredLocations?: string[];\n  /** RetryOptions object which defines several configurable properties used during retry. */\n  retryOptions?: RetryOptions;\n  /**\n   * The flag that enables writes on any locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service.\n   * Default is `false`.\n   */\n  useMultipleWriteLocations?: boolean;\n  /** Rate in milliseconds at which the client will refresh the endpoints list in the background */\n  endpointRefreshRateInMs?: number;\n  /** Flag to enable/disable background refreshing of endpoints. Defaults to false.\n   * Endpoint discovery using `enableEndpointsDiscovery` will still work for failed requests. */\n  enableBackgroundEndpointRefreshing?: boolean;\n}\n\n/**\n * @hidden\n */\nexport const defaultConnectionPolicy: ConnectionPolicy = Object.freeze({\n  connectionMode: ConnectionMode.Gateway,\n  requestTimeout: 60000,\n  enableEndpointDiscovery: true,\n  preferredLocations: [],\n  retryOptions: {\n    maxRetryAttemptCount: Constants.ThrottledRequestMaxRetryAttemptCount,\n    fixedRetryIntervalInMilliseconds: Constants.ThrottledRequestFixedRetryIntervalInMs,\n    maxWaitTimeInSeconds: Constants.ThrottledRequestMaxWaitTimeInSeconds,\n  },\n  useMultipleWriteLocations: true,\n  endpointRefreshRateInMs: 300000,\n  enableBackgroundEndpointRefreshing: true,\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Represents the consistency levels supported for Azure Cosmos DB client operations.<br>\n * The requested ConsistencyLevel must match or be weaker than that provisioned for the database account.\n * Consistency levels.\n *\n * Consistency levels by order of strength are Strong, BoundedStaleness, Session, Consistent Prefix, and Eventual.\n *\n * See https://aka.ms/cosmos-consistency for more detailed documentation on Consistency Levels.\n */\nexport enum ConsistencyLevel {\n  /**\n   * Strong Consistency guarantees that read operations always return the value that was last written.\n   */\n  Strong = \"Strong\",\n  /**\n   * Bounded Staleness guarantees that reads are not too out-of-date.\n   * This can be configured based on number of operations (MaxStalenessPrefix) or time (MaxStalenessIntervalInSeconds).\n   */\n  BoundedStaleness = \"BoundedStaleness\",\n  /**\n   * Session Consistency guarantees monotonic reads (you never read old data, then new, then old again),\n   * monotonic writes (writes are ordered) and read your writes (your writes are immediately visible to your reads)\n   * within any single session.\n   */\n  Session = \"Session\",\n  /**\n   * Eventual Consistency guarantees that reads will return a subset of writes.\n   * All writes will be eventually be available for reads.\n   */\n  Eventual = \"Eventual\",\n  /**\n   * ConsistentPrefix Consistency guarantees that reads will return some prefix of all writes with no gaps.\n   * All writes will be eventually be available for reads.\n   */\n  ConsistentPrefix = \"ConsistentPrefix\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport type { CosmosHeaders } from \"../queryExecutionContext\";\nimport { ConsistencyLevel } from \"./ConsistencyLevel\";\n\n/**\n * Represents a DatabaseAccount in the Azure Cosmos DB database service.\n */\nexport class DatabaseAccount {\n  /** The list of writable locations for a geo-replicated database account. */\n  public readonly writableLocations: Location[] = [];\n  /** The list of readable locations for a geo-replicated database account. */\n  public readonly readableLocations: Location[] = [];\n  /**\n   * The self-link for Databases in the databaseAccount.\n   * @deprecated Use `databasesLink`\n   */\n  public get DatabasesLink(): string {\n    return this.databasesLink;\n  }\n  /** The self-link for Databases in the databaseAccount. */\n  public readonly databasesLink: string;\n  /**\n   * The self-link for Media in the databaseAccount.\n   * @deprecated Use `mediaLink`\n   */\n  public get MediaLink(): string {\n    return this.mediaLink;\n  }\n  /** The self-link for Media in the databaseAccount. */\n  public readonly mediaLink: string;\n  /**\n   * Attachment content (media) storage quota in MBs ( Retrieved from gateway ).\n   * @deprecated use `maxMediaStorageUsageInMB`\n   */\n  public get MaxMediaStorageUsageInMB(): number {\n    return this.maxMediaStorageUsageInMB;\n  }\n  /** Attachment content (media) storage quota in MBs ( Retrieved from gateway ). */\n  public readonly maxMediaStorageUsageInMB: number;\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   *\n   * @deprecated use `currentMediaStorageUsageInMB`\n   */\n  public get CurrentMediaStorageUsageInMB(): number {\n    return this.currentMediaStorageUsageInMB;\n  }\n  /**\n   * Current attachment content (media) usage in MBs (Retrieved from gateway )\n   *\n   * Value is returned from cached information updated periodically and is not guaranteed\n   * to be real time.\n   */\n  public readonly currentMediaStorageUsageInMB: number;\n  /**\n   * Gets the UserConsistencyPolicy settings.\n   * @deprecated use `consistencyPolicy`\n   */\n  public get ConsistencyPolicy(): ConsistencyLevel {\n    return this.consistencyPolicy;\n  }\n  /** Gets the UserConsistencyPolicy settings. */\n  public readonly consistencyPolicy: ConsistencyLevel;\n  public readonly enableMultipleWritableLocations: boolean;\n\n  // TODO: body - any\n  public constructor(body: { [key: string]: any }, headers: CosmosHeaders) {\n    this.databasesLink = \"/dbs/\";\n    this.mediaLink = \"/media/\";\n    this.maxMediaStorageUsageInMB = headers[Constants.HttpHeaders.MaxMediaStorageUsageInMB];\n    this.currentMediaStorageUsageInMB = headers[Constants.HttpHeaders.CurrentMediaStorageUsageInMB];\n    this.consistencyPolicy = body.userConsistencyPolicy\n      ? (body.userConsistencyPolicy.defaultConsistencyLevel as ConsistencyLevel)\n      : ConsistencyLevel.Session;\n    if (body[Constants.WritableLocations] && body.id !== \"localhost\") {\n      this.writableLocations = body[Constants.WritableLocations] as Location[];\n    }\n    if (body[Constants.ReadableLocations] && body.id !== \"localhost\") {\n      this.readableLocations = body[Constants.ReadableLocations] as Location[];\n    }\n    if (body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS]) {\n      this.enableMultipleWritableLocations =\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === true ||\n        body[Constants.ENABLE_MULTIPLE_WRITABLE_LOCATIONS] === \"true\";\n    }\n  }\n}\n\n/**\n * Used to specify the locations that are available, read is index 1 and write is index 0.\n */\nexport interface Location {\n  name: string;\n  databaseAccountEndpoint: string;\n  unavailable?: boolean;\n  lastUnavailabilityTimestampInMs?: number;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** Defines a target data type of an index path specification in the Azure Cosmos DB service. */\nexport enum DataType {\n  /** Represents a numeric data type. */\n  Number = \"Number\",\n  /** Represents a string data type. */\n  String = \"String\",\n  /** Represents a point data type. */\n  Point = \"Point\",\n  /** Represents a line string data type. */\n  LineString = \"LineString\",\n  /** Represents a polygon data type. */\n  Polygon = \"Polygon\",\n  /** Represents a multi-polygon data type. */\n  MultiPolygon = \"MultiPolygon\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Specifies the supported indexing modes.\n */\nexport enum IndexingMode {\n  /**\n   * Index is updated synchronously with a create or update operation.\n   *\n   * With consistent indexing, query behavior is the same as the default consistency level for the container.\n   * The index is always kept up to date with the data.\n   */\n  consistent = \"consistent\",\n  /**\n   * Index is updated asynchronously with respect to a create or update operation.\n   *\n   * With lazy indexing, queries are eventually consistent. The index is updated when the container is idle.\n   */\n  lazy = \"lazy\",\n  /** No Index is provided. */\n  none = \"none\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DataType, IndexingMode, IndexKind } from \"./index\";\n\nexport interface IndexingPolicy {\n  /** The indexing mode (consistent or lazy) {@link IndexingMode}. */\n  indexingMode?: keyof typeof IndexingMode;\n  automatic?: boolean;\n  /** An array of {@link IncludedPath} represents the paths to be included for indexing. */\n  includedPaths?: IndexedPath[];\n  /** An array of {@link IncludedPath} represents the paths to be excluded for indexing. */\n  excludedPaths?: IndexedPath[];\n  spatialIndexes?: SpatialIndex[];\n  /** An array of {@link VectorIndex} represents the vector index paths to be included for indexing. */\n  vectorIndexes?: VectorIndex[];\n  /** An array of {@link CompositeIndexes} representing composite indexes to be included. */\n  compositeIndexes?: CompositePath[][];\n  /** An array of {@link FullTextIndex} representing full text indexes to be included. */\n  fullTextIndexes?: FullTextIndex[];\n}\n\n/* The target data type of a spatial path */\nexport enum SpatialType {\n  LineString = \"LineString\",\n  MultiPolygon = \"MultiPolygon\",\n  Point = \"Point\",\n  Polygon = \"Polygon\",\n}\n\nexport interface SpatialIndex {\n  /* Path in JSON document to index */\n  path: string;\n  types: SpatialType[];\n  /* Bounding box for geometry spatial path */\n  boundingBox: {\n    /* X-coordinate of the lower-left corner of the bounding box. */\n    xmin: number;\n    /* Y-coordinate of the lower-left corner of the bounding box. */\n    ymin: number;\n    /* X-coordinate of the upper-right corner of the bounding box. */\n    xmax: number;\n    /* Y-coordinate of the upper-right corner of the bounding box. */\n    ymax: number;\n  };\n}\n\nexport interface IndexedPath {\n  path: string;\n  indexes?: Index[];\n}\n\nexport interface Index {\n  kind: keyof typeof IndexKind;\n  dataType: keyof typeof DataType;\n  precision?: number;\n}\n/**\n * Represents a vector index in the Azure Cosmos DB service.\n * A vector index is used to index vector fields in the documents.\n */\n\nexport interface VectorIndex {\n  /**\n   * The path to the vector field in the document.\n   * for example, path: \"/path/to/vector\".\n   */\n  path: string;\n  /**\n   * The index type of the vector.\n   * Currently, flat, diskANN, and quantizedFlat are supported.\n   */\n  type: VectorIndexType;\n  /**\n   * The number of bytes used in product quantization of the vectors.\n   * This is an optional parameter and applies to index types DiskANN and quantizedFlat.\n   * The allowed range for this parameter is between 1 and min(Dimensions, 512).\n   */\n  quantizationByteSize?: number;\n  /**\n   * The list of string containing the shard keys used for partitioning the vector indexes.\n   * This is an optional parameter and applies to index types DiskANN and quantizedFlat.\n   */\n  vectorIndexShardKey?: string[];\n  /**\n   * The size of the candidate list of approximate neighbors stored while building\n   * the diskANN index as part of the optimization processes.\n   * This is an optional parameter and applies to index type DiskANN only.\n   * The allowed range is between 25 and 500.\n   */\n  indexingSearchListSize?: number;\n}\n\n/**\n * Represents the index type of the vector.\n */\nexport enum VectorIndexType {\n  /**\n   * Represents flat index type.\n   */\n  Flat = \"flat\",\n  /**\n   * Represents diskANN index type.\n   */\n  DiskANN = \"diskANN\",\n  /**\n   * Represents quantizedFlat index type.\n   */\n  QuantizedFlat = \"quantizedFlat\",\n}\n\n/**\n * Represents a composite path in the indexing policy.\n */\nexport interface CompositePath {\n  /** The path in the JSON document to include in the composite index. */\n  path: string;\n  /** The order of the composite index, either \"ascending\" or \"descending\". */\n  order: \"ascending\" | \"descending\";\n}\n\n/**\n * Represents a full text index in the indexing policy.\n */\nexport interface FullTextIndex {\n  /** The path in the JSON document to index. */\n  path: string;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Specifies the supported Index types.\n */\nexport enum IndexKind {\n  /**\n   * This is supplied for a path which requires sorting.\n   */\n  Range = \"Range\",\n  /**\n   * This is supplied for a path which requires geospatial indexing.\n   */\n  Spatial = \"Spatial\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PartitionKey,\n  PrimitivePartitionKeyValue,\n} from \"./PartitionKey\";\n\n/**\n * @hidden\n * Internal Representation Of Partition Key. TODO: Make sure {@link ClientContext} working with only {@link PartitionKeyInternal}\n */\nexport type PartitionKeyInternal = PrimitivePartitionKeyValue[];\n/**\n * @hidden\n * None PartitionKey Literal\n */\nexport const NonePartitionKeyLiteral: NonePartitionKeyType = {};\n/**\n * @hidden\n * Null PartitionKey Literal\n */\nexport const NullPartitionKeyLiteral: NullPartitionKeyType = null;\n/**\n * @hidden\n * Maps PartitionKey to InternalPartitionKey.\n * @param partitionKey - PartitonKey to be converted.\n * @returns PartitionKeyInternal\n */\nexport function convertToInternalPartitionKey(partitionKey: PartitionKey): PartitionKeyInternal {\n  if (Array.isArray(partitionKey)) {\n    return partitionKey.map((key) => (key === undefined ? NonePartitionKeyLiteral : key));\n  } else return [partitionKey];\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { NonePartitionKeyLiteral, NullPartitionKeyLiteral } from \"./PartitionKeyInternal\";\n\n/**\n * PartitionKey of a container.\n * @remarks\n * - PartitionKeyDefinition is no longer part of PartitionKey. So please use PartitionKeyDefinition\n * type directly where appropriate.\n */\nexport type PartitionKey = PrimitivePartitionKeyValue | PrimitivePartitionKeyValue[];\n\n/**\n * A primitive Partition Key value.\n */\nexport type PrimitivePartitionKeyValue =\n  | string\n  | number\n  | boolean\n  | NullPartitionKeyType\n  | NonePartitionKeyType;\n\n/**\n * The returned object represents a partition key value that allows creating and accessing items\n * with a null value for the partition key.\n */\nexport type NullPartitionKeyType = null;\n\n/**\n * The returned object represents a partition key value that allows creating and accessing items\n * without a value for partition key\n */\nexport type NonePartitionKeyType = {\n  [K in any]: never;\n};\n\n/**\n * Builder class for building PartitionKey.\n */\nexport class PartitionKeyBuilder {\n  readonly values: PrimitivePartitionKeyValue[] = [];\n  public addValue(value: string | boolean | number): PartitionKeyBuilder {\n    this.values.push(value);\n    return this;\n  }\n  public addNullValue(): PartitionKeyBuilder {\n    this.values.push(NullPartitionKeyLiteral);\n    return this;\n  }\n  public addNoneValue(): PartitionKeyBuilder {\n    this.values.push(NonePartitionKeyLiteral);\n    return this;\n  }\n  public build(): PartitionKey {\n    return [...this.values];\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * PartitionKey Definition Version\n */\nexport enum PartitionKeyDefinitionVersion {\n  V1 = 1,\n  V2 = 2,\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Type of PartitionKey i.e. Hash, MultiHash\n */\nexport enum PartitionKeyKind {\n  Hash = \"Hash\",\n  MultiHash = \"MultiHash\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Enum for permission mode values.\n */\nexport enum PermissionMode {\n  /** Permission not valid. */\n  None = \"none\",\n  /** Permission applicable for read operations only. */\n  Read = \"read\",\n  /** Permission applicable for all operations. */\n  All = \"all\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Represents Priority Level associated with each Azure Cosmos DB client requests.<br>\n * The Low priority requests are always throttled before any High priority requests.\n *\n * By default all requests are considered as High priority requests.\n *\n * See https://aka.ms/CosmosDB/PriorityBasedExecution for more detailed documentation on Priority based throttling.\n */\nexport enum PriorityLevel {\n  /**\n   * High Priority requests are throttled after Low priority requests.\n   */\n  High = \"High\",\n  /**\n   * Low Priority requests are throttled before High priority requests.\n   */\n  Low = \"Low\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Enum for trigger operation values.\n * specifies the operations on which a trigger should be executed.\n */\nexport enum TriggerOperation {\n  /** All operations. */\n  All = \"all\",\n  /** Create operations only. */\n  Create = \"create\",\n  /** Update operations only. */\n  Update = \"update\",\n  /** Delete operations only. */\n  Delete = \"delete\",\n  /** Replace operations only. */\n  Replace = \"replace\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Enum for trigger type values.\n * Specifies the type of the trigger.\n */\nexport enum TriggerType {\n  /** Trigger should be executed before the associated operation(s). */\n  Pre = \"pre\",\n  /** Trigger should be executed after the associated operation(s). */\n  Post = \"post\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Enum for udf type values.\n * Specifies the types of user defined functions.\n */\nexport enum UserDefinedFunctionType {\n  /** The User Defined Function is written in JavaScript. This is currently the only option. */\n  Javascript = \"Javascript\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport enum GeospatialType {\n  /** Represents data in round-earth coordinate system. */\n  Geography = \"Geography\",\n  /** Represents data in Eucledian(flat) coordinate system. */\n  Geometry = \"Geometry\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Represents the policy configuration for vector embeddings in the Azure Cosmos DB service.\n */\nexport interface VectorEmbeddingPolicy {\n  /**\n   * The vector embeddings to be configured.\n   */\n  vectorEmbeddings: VectorEmbedding[];\n}\n/**\n * Represents a vector embedding.\n * A vector embedding is used to define a vector field in the documents.\n */\nexport interface VectorEmbedding {\n  /**\n   * The path to the vector field in the document.\n   */\n  path: string;\n  /**\n   * The number of dimensions in the vector.\n   */\n  dimensions: number;\n  /**\n   * The data type of the vector.\n   */\n  dataType: VectorEmbeddingDataType;\n  /**\n   * The distance function to use for distance calculation in between vectors.\n   */\n  distanceFunction: VectorEmbeddingDistanceFunction;\n}\n\n/**\n * Represents the data type of the vector.\n */\nexport enum VectorEmbeddingDataType {\n  /**\n   * 32-bit floating point number.\n   */\n  Float32 = \"float32\",\n  /**\n   * 8-bit unsigned integer.\n   */\n  UInt8 = \"uint8\",\n  /**\n   * 8-bit signed integer.\n   */\n  Int8 = \"int8\",\n}\n/**\n * Represents the distance function to use for distance calculation in between vectors.\n */\nexport enum VectorEmbeddingDistanceFunction {\n  /**\n   * Represents euclidean distance function.\n   */\n  Euclidean = \"euclidean\",\n  /**\n   * Represents cosine distance function.\n   */\n  Cosine = \"cosine\",\n  /**\n   * Represents dot product distance function.\n   */\n  DotProduct = \"dotproduct\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { PartitionKeyDefinition } from \"../documents\";\nimport type { Container } from \"./Container\";\n\nexport async function readPartitionKeyDefinition(\n  diagnosticNode: DiagnosticNodeInternal,\n  container: Container,\n): Promise<PartitionKeyDefinition> {\n  const partitionKeyDefinition = await container.readPartitionKeyDefinition(diagnosticNode);\n  return partitionKeyDefinition.resource;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { parsePath } from \"./common\";\nimport type {\n  PartitionKey,\n  PartitionKeyDefinition,\n  PartitionKeyInternal,\n  PrimitivePartitionKeyValue,\n} from \"./documents\";\nimport {\n  convertToInternalPartitionKey,\n  NonePartitionKeyLiteral,\n  NullPartitionKeyLiteral,\n} from \"./documents\";\nimport { DEFAULT_PARTITION_KEY_PATH } from \"./common/partitionKeys\";\nimport type { Container } from \"./client\";\nimport { readPartitionKeyDefinition } from \"./client/ClientUtils\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\n\nconst logger: AzureLogger = createClientLogger(\"extractPartitionKey\");\n\n/**\n * Function to extract PartitionKey based on {@link PartitionKeyDefinition}\n * from an object.\n * Retuns\n * 1. PartitionKeyInternal[] if extraction is successful.\n * 2. undefined if either {@link partitionKeyDefinition} is not well formed\n * or an unsupported partitionkey type is encountered.\n * @hidden\n */\nexport function extractPartitionKeys(\n  document: unknown,\n  partitionKeyDefinition?: PartitionKeyDefinition,\n): PartitionKeyInternal | undefined {\n  if (\n    partitionKeyDefinition &&\n    partitionKeyDefinition.paths &&\n    partitionKeyDefinition.paths.length > 0\n  ) {\n    if (partitionKeyDefinition.systemKey === true) {\n      return [];\n    }\n\n    if (\n      partitionKeyDefinition.paths.length === 1 &&\n      partitionKeyDefinition.paths[0] === DEFAULT_PARTITION_KEY_PATH\n    ) {\n      return [extractPartitionKey(DEFAULT_PARTITION_KEY_PATH, document)];\n    }\n\n    const partitionKeys: PrimitivePartitionKeyValue[] = [];\n    partitionKeyDefinition.paths.forEach((path: string) => {\n      const obj = extractPartitionKey(path, document);\n      if (obj === undefined) {\n        logger.warning(\"Unsupported PartitionKey found.\");\n        return undefined;\n      }\n      partitionKeys.push(obj);\n    });\n    return partitionKeys;\n  }\n  logger.error(\"Unexpected Partition Key Definition Found.\");\n  return undefined;\n}\n\nfunction extractPartitionKey(path: string, obj: unknown): any {\n  const pathParts: string[] = parsePath(path);\n  for (const part of pathParts) {\n    if (typeof obj === \"object\" && obj !== null && part in obj) {\n      obj = (obj as Record<string, unknown>)[part];\n    } else {\n      obj = undefined;\n      break;\n    }\n  }\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    return obj;\n  } else if (obj === NullPartitionKeyLiteral) {\n    return NullPartitionKeyLiteral;\n  } else if (obj === undefined || JSON.stringify(obj) === JSON.stringify(NonePartitionKeyLiteral)) {\n    return NonePartitionKeyLiteral;\n  }\n  return undefined;\n}\n\n/**\n * @hidden\n */\nexport function undefinedPartitionKey(\n  partitionKeyDefinition: PartitionKeyDefinition,\n): PartitionKeyInternal {\n  if (partitionKeyDefinition?.systemKey) {\n    return [];\n  } else {\n    return partitionKeyDefinition?.paths.map(() => NonePartitionKeyLiteral);\n  }\n}\n\n/**\n * @hidden\n */\nexport async function setPartitionKeyIfUndefined(\n  diagnosticNode: DiagnosticNodeInternal,\n  container: Container,\n  partitionKey: PartitionKey,\n): Promise<PartitionKeyInternal> {\n  if (partitionKey === undefined) {\n    const partitionKeyDefinition = await readPartitionKeyDefinition(diagnosticNode, container);\n    partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n  }\n  return convertToInternalPartitionKey(partitionKey);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type {\n  NonePartitionKeyType,\n  NullPartitionKeyType,\n  PartitionKey,\n  PartitionKeyDefinition,\n  PrimitivePartitionKeyValue,\n} from \"../documents\";\nimport { NonePartitionKeyLiteral, NullPartitionKeyLiteral, PartitionKeyKind } from \"../documents\";\n\n/**\n * A type which could be any type but undefined\n */\nexport type NonUndefinable<T> = T extends undefined ? never : T;\n\n/**\n * Utility function to avoid writing boilder plate code while checking for\n * undefined values. It throws Error if the input value is undefined.\n * @param value - Value which is potentially undefined.\n * @param msg - Error Message to throw if value is undefined.\n * @returns\n */\nexport function assertNotUndefined<T>(value: T, msg?: string): NonUndefinable<T> {\n  if (value !== undefined) {\n    return value as NonUndefinable<T>;\n  }\n  throw new Error(msg || \"Unexpected 'undefined' value encountered\");\n}\n\n/**\n * Check for value being PrimitivePartitionKeyValue.\n * @internal\n */\nexport function isPrimitivePartitionKeyValue(value: unknown): value is PrimitivePartitionKeyValue {\n  return (\n    isWellDefinedPartitionKeyValue(value) ||\n    isNonePartitionKeyValue(value) ||\n    isNullPartitionKeyValue(value)\n  );\n}\n\n/**\n * Check for value being string, number or boolean.\n * @internal\n */\nexport function isWellDefinedPartitionKeyValue(value: unknown): value is string | number | boolean {\n  return typeof value === \"string\" || typeof value === \"boolean\" || typeof value === \"number\";\n}\n\n/**\n * Check for value being NonePartitionKeyType.\n * @internal\n */\nexport function isNonePartitionKeyValue(value: unknown): value is NonePartitionKeyType {\n  return value !== undefined && JSON.stringify(value) === JSON.stringify(NonePartitionKeyLiteral);\n}\n\n/**\n * Check for value being NullPartitionKeyType.\n * @internal\n */\nexport function isNullPartitionKeyValue(value: unknown): value is NullPartitionKeyType {\n  return value === NullPartitionKeyLiteral;\n}\n/**\n * Verify validity of partition key.\n * @internal\n */\nexport function isPartitionKey(partitionKey: unknown): boolean {\n  return isPrimitivePartitionKeyValue(partitionKey) || Array.isArray(partitionKey);\n}\n/**\n * Check for value being PrefixPartitionKey.\n * @internal\n */\nexport function isPrefixPartitionKey(\n  partitionKey: PartitionKey,\n  partitionKeyDefinition: PartitionKeyDefinition,\n): boolean {\n  return (\n    partitionKeyDefinition &&\n    partitionKeyDefinition.paths &&\n    partitionKeyDefinition.kind === PartitionKeyKind.MultiHash &&\n    Array.isArray(partitionKey) &&\n    partitionKey.length < partitionKeyDefinition.paths.length\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The \\@azure/logger configuration for this package.\n */\nexport const defaultLogger: AzureLogger = createClientLogger(\"cosmosdb\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n * FeedRange for which change feed is being requested.\n */\nexport class ChangeFeedRange {\n  /**\n   * Min value for the range.\n   */\n  public minInclusive: string;\n  /**\n   * Max value for the range.\n   */\n  public maxExclusive: string;\n  /**\n   * Continuation token from where to start reading changes.\n   */\n  public continuationToken?: string;\n  /**\n   * Min epk value to begin reading changes from in case changefeed of entire partition is not requested.\n   */\n  public epkMinHeader?: string;\n  /**\n   * Max epk value to begin reading changes from in case changefeed of entire partition is not requested.\n   */\n  public epkMaxHeader?: string;\n\n  constructor(\n    minInclusive: string,\n    maxExclusive: string,\n    continuationToken?: string,\n    epkMinHeader?: string,\n    epkMaxHeader?: string,\n  ) {\n    this.minInclusive = minInclusive;\n    this.maxExclusive = maxExclusive;\n    this.continuationToken = continuationToken;\n    this.epkMinHeader = epkMinHeader;\n    this.epkMaxHeader = epkMaxHeader;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { Constants } from \"../../common\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedIteratorResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    /**\n     * Headers related to cosmos DB and change feed.\n     */\n    headers: CosmosHeaders,\n    /**\n     * Cosmos Diagnostic Object.\n     */\n    public readonly diagnostics: CosmosDiagnostics,\n    /**\n     * Gets the subStatusCodes of the response from Azure Cosmos DB. Useful in partition split or partition gone.\n     */\n    public readonly subStatusCode?: number,\n  ) {\n    this.headers = headers;\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   */\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.ContinuationToken];\n  }\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKeyRange } from \"../client/Container/PartitionKeyRange\";\nimport { Constants } from \"../common\";\nimport type { QueryRange as ResponseQueryRange } from \"../request/ErrorResponse\";\n\n/** @hidden */\nexport class QueryRange {\n  public min: string;\n  public max: string;\n  public isMinInclusive: boolean;\n  public isMaxInclusive: boolean;\n\n  /**\n   * Represents a QueryRange.\n   *\n   * @param rangeMin                - min\n   * @param rangeMin                - max\n   * @param isMinInclusive         - isMinInclusive\n   * @param isMaxInclusive         - isMaxInclusive\n   * @hidden\n   */\n  constructor(\n    rangeMin: string,\n    rangeMax: string,\n    isMinInclusive: boolean,\n    isMaxInclusive: boolean,\n  ) {\n    this.min = rangeMin;\n    this.max = rangeMax;\n    this.isMinInclusive = isMinInclusive;\n    this.isMaxInclusive = isMaxInclusive;\n  }\n  public overlaps(other: QueryRange): boolean {\n    const range1 = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    const range2 = other;\n    if (range1 === undefined || range2 === undefined) {\n      return false;\n    }\n    if (range1.isEmpty() || range2.isEmpty()) {\n      return false;\n    }\n\n    if (range1.min <= range2.max || range2.min <= range1.max) {\n      if (\n        (range1.min === range2.max && !(range1.isMinInclusive && range2.isMaxInclusive)) ||\n        (range2.min === range1.max && !(range2.isMinInclusive && range1.isMaxInclusive))\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  public isFullRange(): boolean {\n    return (\n      this.min === Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey &&\n      this.max === Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey &&\n      this.isMinInclusive === true &&\n      this.isMaxInclusive === false\n    );\n  }\n\n  public isEmpty(): boolean {\n    return !(this.isMinInclusive && this.isMaxInclusive) && this.min === this.max;\n  }\n  /**\n   * Parse a QueryRange from a partitionKeyRange\n   * @returns QueryRange\n   * @hidden\n   */\n  public static parsePartitionKeyRange(partitionKeyRange: PartitionKeyRange): QueryRange {\n    return new QueryRange(\n      partitionKeyRange[Constants.PartitionKeyRange.MinInclusive],\n      partitionKeyRange[Constants.PartitionKeyRange.MaxExclusive],\n      true,\n      false,\n    );\n  }\n  /**\n   * Parse a QueryRange from a dictionary\n   * @returns QueryRange\n   * @hidden\n   */\n  public static parseFromDict(queryRangeDict: ResponseQueryRange): QueryRange {\n    return new QueryRange(\n      queryRangeDict.min,\n      queryRangeDict.max,\n      queryRangeDict.isMinInclusive,\n      queryRangeDict.isMaxInclusive,\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKeyRange } from \"../client\";\nimport { Constants } from \"../common\";\nimport { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport class InMemoryCollectionRoutingMap {\n  private orderedPartitionKeyRanges: PartitionKeyRange[];\n  private orderedRanges: QueryRange[];\n  // TODO: chrande made this public, even though it is implementation detail for a test\n  public orderedPartitionInfo: unknown;\n\n  /**\n   * Represents a InMemoryCollectionRoutingMap Object,\n   * Stores partition key ranges in an efficient way with some additional information and provides\n   * convenience methods for working with set of ranges.\n   */\n  constructor(orderedPartitionKeyRanges: PartitionKeyRange[], orderedPartitionInfo: unknown) {\n    this.orderedPartitionKeyRanges = orderedPartitionKeyRanges;\n    this.orderedRanges = orderedPartitionKeyRanges.map((pkr) => {\n      return new QueryRange(\n        pkr[Constants.PartitionKeyRange.MinInclusive],\n        pkr[Constants.PartitionKeyRange.MaxExclusive],\n        true,\n        false,\n      );\n    });\n    this.orderedPartitionInfo = orderedPartitionInfo;\n  }\n  public getOrderedParitionKeyRanges(): PartitionKeyRange[] {\n    return this.orderedPartitionKeyRanges;\n  }\n\n  public getOverlappingRanges(providedQueryRanges: QueryRange | QueryRange[]): PartitionKeyRange[] {\n    // TODO This code has all kinds of smells. Multiple iterations and sorts just to grab overlapping ranges\n    // stfaul attempted to bring it down to one for-loop and failed\n    const pqr: QueryRange[] = Array.isArray(providedQueryRanges)\n      ? providedQueryRanges\n      : [providedQueryRanges];\n    const minToPartitionRange: any = {}; // TODO: any\n\n    // this for loop doesn't invoke any async callback\n    for (const queryRange of pqr) {\n      if (queryRange.isEmpty()) {\n        continue;\n      }\n\n      if (queryRange.isFullRange()) {\n        return this.orderedPartitionKeyRanges;\n      }\n\n      const minIndex = this.orderedRanges.findIndex((range) => {\n        if (queryRange.min > range.min && queryRange.min < range.max) {\n          return true;\n        }\n        if (queryRange.min === range.min) {\n          return true;\n        }\n        if (queryRange.min === range.max) {\n          return true;\n        }\n      });\n\n      if (minIndex < 0) {\n        throw new Error(\n          \"error in collection routing map, queried value is less than the start range.\",\n        );\n      }\n\n      // Start at the end and work backwards\n      let maxIndex: number;\n      for (let i = this.orderedRanges.length - 1; i >= 0; i--) {\n        const range = this.orderedRanges[i];\n        if (queryRange.max > range.min && queryRange.max < range.max) {\n          maxIndex = i;\n          break;\n        }\n        if (queryRange.max === range.min) {\n          maxIndex = i;\n          break;\n        }\n        if (queryRange.max === range.max) {\n          maxIndex = i;\n          break;\n        }\n      }\n\n      if (maxIndex > this.orderedRanges.length) {\n        throw new Error(\n          \"error in collection routing map, queried value is greater than the end range.\",\n        );\n      }\n\n      for (let j = minIndex; j < maxIndex + 1; j++) {\n        if (queryRange.overlaps(this.orderedRanges[j])) {\n          minToPartitionRange[\n            this.orderedPartitionKeyRanges[j][Constants.PartitionKeyRange.MinInclusive]\n          ] = this.orderedPartitionKeyRanges[j];\n        }\n      }\n    }\n\n    const overlappingPartitionKeyRanges = Object.keys(minToPartitionRange).map(\n      (k) => minToPartitionRange[k],\n    );\n\n    return overlappingPartitionKeyRanges.sort((a, b) => {\n      return a[Constants.PartitionKeyRange.MinInclusive].localeCompare(\n        b[Constants.PartitionKeyRange.MinInclusive],\n      );\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationType, ResourceType } from \"./common\";\nimport type { CosmosDbDiagnosticLevel } from \"./diagnostics/CosmosDbDiagnosticLevel\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport type { ConsistencyLevel } from \"./documents\";\n\n/**\n *  * This is a Cosmos Diagnostic type that holds collected diagnostic information during a client operations. ie. Item.read(), Container.create().\n * It has three members -\n * 1. `clientSideRequestStatistics` member contains aggregate diagnostic information, including -\n *   - metadata lookups. Here all the server requests, apart from the final intended resource are considered as metadata calls.\n *    i.e. for item.read(id), if the client makes server call to discover endpoints it would be considered as metadata call.\n *   - retries\n *   - endpoints contacted.\n *   - request, response payload stats.\n *   - gatewayStatistics - Information corresponding to main operation. For example during Item.read(), the client might perform many operations\n *    i.e. metadata lookup etc, but gatewayStatistics represents the diagnostics information for actual read operation.\n *\n * 2. diagnosticNode - Is a tree like structure which captures detailed diagnostic information. By default it is disabled, and is intended to be\n * used only for debugging on non production environments. The kind of details captured in diagnosticNode is controlled by `CosmosDbDiagnosticLevel`.\n * - CosmosDbDiagnosticLevel.info - Is default value. In this level only clientSideRequestStatistics are captured. Is is meant for production environments.\n * - CosmosDbDiagnosticLevel.debug - Captures diagnosticNode and clientConfig. No request and response payloads are captured. Is not meant to be used\n * in production environment.\n * - CosmosDbDiagnosticLevel.debug-unsafe - In addition to data captured in CosmosDbDiagnosticLevel.debug, also captures request and response payloads.\n * Is not meant to be used in production environment.\n * 3. clientConfig - Captures information related to how client was configured during initialization.\n */\nexport class CosmosDiagnostics {\n  public readonly clientSideRequestStatistics: ClientSideRequestStatistics;\n  public readonly diagnosticNode: DiagnosticNode;\n  public readonly clientConfig?: ClientConfigDiagnostic;\n  /**\n   * @internal\n   */\n  constructor(\n    clientSideRequestStatistics: ClientSideRequestStatistics,\n    diagnosticNode?: DiagnosticNode,\n    clientConfig?: ClientConfigDiagnostic,\n  ) {\n    this.clientSideRequestStatistics = clientSideRequestStatistics;\n    this.diagnosticNode = diagnosticNode;\n    this.clientConfig = clientConfig;\n  }\n}\n\n/**\n * This type holds information related to initialization of `CosmosClient`\n */\nexport type ClientConfigDiagnostic = {\n  /**\n   * End point configured during client initialization.\n   */\n  endpoint: string;\n  /**\n   * True if `resourceTokens` was supplied during client initialization.\n   */\n  resourceTokensConfigured: boolean;\n  /**\n   * True if `tokenProvider` was supplied during client initialization.\n   */\n  tokenProviderConfigured: boolean;\n  /**\n   * True if `aadCredentials` was supplied during client initialization.\n   */\n  aadCredentialsConfigured: boolean;\n  /**\n   * True if `connectionPolicy` was supplied during client initialization.\n   */\n  connectionPolicyConfigured: boolean;\n  /**\n   * `consistencyLevel` supplied during client initialization.\n   */\n  consistencyLevel?: keyof typeof ConsistencyLevel;\n  /**\n   * `defaultHeaders` supplied during client initialization.\n   */\n  defaultHeaders?: { [key: string]: any };\n  /**\n   * True if `connectionPolicy` were supplied during client initialization.\n   */\n  agentConfigured: boolean;\n  /**\n   * `userAgentSuffix` supplied during client initialization.\n   */\n  userAgentSuffix: string;\n  /**\n   * `diagnosticLevel` supplied during client initialization.\n   */\n  diagnosticLevel?: CosmosDbDiagnosticLevel;\n  /**\n   * True if `plugins` were supplied during client initialization.\n   */\n  pluginsConfigured: boolean;\n  /**\n   * SDK version\n   */\n  sDKVersion: string;\n};\n\n/**\n * This type contains diagnostic information regarding all metadata request to server during an CosmosDB client operation.\n */\nexport type MetadataLookUpDiagnostics = {\n  metadataLookups: MetadataLookUpDiagnostic[];\n};\n\n/**\n * This type captures diagnostic information regarding retries attempt during an CosmosDB client operation.\n */\nexport type RetryDiagnostics = {\n  failedAttempts: FailedRequestAttemptDiagnostic[];\n};\n\nexport type GatewayStatistics = {\n  /**\n   * This is the activityId for request, made to server for fetching the requested resource. (As opposed to other potential meta data requests)\n   */\n  activityId?: string;\n  /*\n   * The correlated activity ID is added in the header of every request made to the backend for a query. This aids in troubleshooting by linking all\n   * requests associated with a particular query.\n   */\n  correlatedActivityId?: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  statusCode?: number;\n  subStatusCode?: number;\n  requestCharge?: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n};\n\n/**\n * This type contains diagnostic information regarding a single metadata request to server.\n */\nexport interface MetadataLookUpDiagnostic {\n  activityId: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  metaDataType: MetadataLookUpType;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n}\n\n/**\n * This type captures diagnostic information regarding a failed request to server api.\n */\nexport interface FailedRequestAttemptDiagnostic {\n  attemptNumber: number;\n  activityId: string;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  operationType?: OperationType;\n  resourceType?: ResourceType;\n  statusCode: number;\n  substatusCode?: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n}\n\n/**\n * @hidden\n * Represents the diagnostics information for encryption operations.\n */\nexport interface EncryptionDiagnostics {\n  /** shows start time, duration and properties count for encryption*/\n  encryptContent: Record<string, any>;\n  /** shows start time, duration and properties count for decryption*/\n  decryptContent: Record<string, any>;\n  /** represents total processing duration for encryption/decryption*/\n  processingDurationInMs: number;\n}\n\n/**\n * This is enum for Type of Metadata lookups possible.\n */\nexport enum MetadataLookUpType {\n  PartitionKeyRangeLookUp = \"PARTITION_KEY_RANGE_LOOK_UP\",\n  DatabaseAccountLookUp = \"DATABASE_ACCOUNT_LOOK_UP\",\n  QueryPlanLookUp = \"QUERY_PLAN_LOOK_UP\",\n  DatabaseLookUp = \"DATABASE_LOOK_UP\",\n  ContainerLookUp = \"CONTAINER_LOOK_UP\",\n}\n\n/**\n * This is a collection type for all client side diagnostic information.\n */\nexport type ClientSideRequestStatistics = {\n  /**\n   * This is the UTC timestamp for start of client operation.\n   */\n  requestStartTimeUTCInMs: number;\n  /**\n   * This is the duration in milli seconds taken by client operation.\n   */\n  requestDurationInMs: number;\n  /**\n   * This is the list of Location Endpoints contacted during the client operation.\n   */\n  locationEndpointsContacted: string[];\n  /**\n   * This field captures diagnostic information for retries happened during client operation.\n   */\n  retryDiagnostics: RetryDiagnostics;\n  /**\n   * This field captures diagnostic information for meta data lookups happened during client operation.\n   */\n  metadataDiagnostics: MetadataLookUpDiagnostics;\n  /**\n   * These are the statistics for main point look operation.\n   */\n  gatewayStatistics: GatewayStatistics[];\n  /**\n   * This is the cumulated Request Payload Length n bytes, this includes metadata calls along with the main operation.\n   */\n  totalRequestPayloadLengthInBytes: number;\n  /**\n   * This is the cumulated Response Payload Length n bytes, this includes metadata calls along with the main operation.\n   */\n  totalResponsePayloadLengthInBytes: number;\n  /**\n   * This field captures diagnostic information for encryption/decryption happened during CRUD operation if encryption is enabled.\n   */\n  encryptionDiagnostics?: EncryptionDiagnostics;\n};\n\nexport function getRootNode(node: DiagnosticNodeInternal): DiagnosticNodeInternal {\n  if (node.parent) return getRootNode(node.parent);\n  else return node;\n}\n\n/**\n * Represents a tree like structure, for capturing diagnostic information.\n */\nexport interface DiagnosticNode {\n  id: string;\n  nodeType: string;\n  children: DiagnosticNode[];\n  data: { [key: string]: any };\n  startTimeUTCInMs: number;\n  durationInMs: number;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @hidden\n * Utility function to get currentTime in UTC milliseconds.\n * @returns\n */\n\nexport function getCurrentTimestampInMs(): number {\n  return Date.now();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common\";\nimport type {\n  ClientSideRequestStatistics,\n  EncryptionDiagnostics,\n  FailedRequestAttemptDiagnostic,\n  GatewayStatistics,\n  MetadataLookUpDiagnostic,\n  MetadataLookUpType,\n} from \"../CosmosDiagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n/**\n * @hidden\n * Internal class to hold CosmosDiagnostic aggregate information all through the lifecycle of a request.\n * This object gathers diagnostic information throughout Client operation which may span across multiple\n * Server call, retries etc.\n * Functions - recordFailedAttempt, recordMetaDataQuery, recordEndpointContactEvent are used to ingest\n * data into the context. At the end of operation, getDiagnostics() is used to\n * get final CosmosDiagnostic object.\n */\nexport class CosmosDiagnosticContext {\n  private requestStartTimeUTCinMs: number;\n  private failedAttempts: FailedRequestAttemptDiagnostic[] = [];\n  private metadataLookups: MetadataLookUpDiagnostic[] = [];\n  private gaterwayStatistics: GatewayStatistics[] = [];\n  public locationEndpointsContacted: Set<string> = new Set();\n  encryptionDiagnostics: EncryptionDiagnostics;\n\n  public constructor() {\n    this.requestStartTimeUTCinMs = getCurrentTimestampInMs();\n  }\n\n  public recordFailedAttempt(\n    gaterwayStatistics: GatewayStatistics,\n    retryAttemptNumber: number,\n  ): void {\n    const attempt: FailedRequestAttemptDiagnostic = {\n      attemptNumber: retryAttemptNumber,\n      startTimeUTCInMs: gaterwayStatistics.startTimeUTCInMs,\n      durationInMs: gaterwayStatistics.durationInMs,\n      statusCode: gaterwayStatistics.statusCode,\n      substatusCode: gaterwayStatistics.subStatusCode,\n      requestPayloadLengthInBytes: gaterwayStatistics.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gaterwayStatistics.responsePayloadLengthInBytes,\n      activityId: gaterwayStatistics.activityId,\n      operationType: gaterwayStatistics.operationType,\n      resourceType: gaterwayStatistics.resourceType,\n    };\n    this.failedAttempts.push(attempt);\n  }\n\n  public recordNetworkCall(gaterwayStatistics: GatewayStatistics): void {\n    this.gaterwayStatistics.push(gaterwayStatistics);\n  }\n\n  public recordEncryptionDiagnostics(encryptionDiagnostics: EncryptionDiagnostics): void {\n    const { encryptContent, decryptContent } = encryptionDiagnostics;\n    const encryptionDuration = encryptContent[Constants.Encryption.DiagnosticsDuration] ?? 0;\n    const decryptionDuration = decryptContent[Constants.Encryption.DiagnosticsDuration] ?? 0;\n\n    encryptionDiagnostics.processingDurationInMs = encryptionDuration + decryptionDuration;\n    this.encryptionDiagnostics = encryptionDiagnostics;\n  }\n\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests.\n   */\n  public mergeDiagnostics(\n    childDiagnostics: CosmosDiagnosticContext,\n    metadataType: MetadataLookUpType,\n  ): void {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach((endpoint) =>\n      this.locationEndpointsContacted.add(endpoint),\n    );\n\n    // Copy child nodes's GatewayStatistics to parent's metadata lookups.\n    childDiagnostics.gaterwayStatistics.forEach((gateway) =>\n      this.metadataLookups.push({\n        activityId: gateway.activityId,\n        requestPayloadLengthInBytes: gateway.requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: gateway.responsePayloadLengthInBytes,\n        startTimeUTCInMs: gateway.startTimeUTCInMs,\n        operationType: gateway.operationType,\n        resourceType: gateway.resourceType,\n        durationInMs: gateway.durationInMs,\n        metaDataType: metadataType,\n      }),\n    );\n\n    // Copy child nodes's metadata lookups to parent's metadata lookups.\n    childDiagnostics.metadataLookups.forEach((lookup) => this.metadataLookups.push(lookup));\n\n    // Copy child nodes's failed attempts to parent's failed attempts.\n    childDiagnostics.failedAttempts.forEach((lookup) => this.failedAttempts.push(lookup));\n  }\n\n  public getClientSideStats(\n    endTimeUTCInMs: number = getCurrentTimestampInMs(),\n  ): ClientSideRequestStatistics {\n    return {\n      requestStartTimeUTCInMs: this.requestStartTimeUTCinMs,\n      requestDurationInMs: endTimeUTCInMs - this.requestStartTimeUTCinMs,\n      totalRequestPayloadLengthInBytes: this.getTotalRequestPayloadLength(),\n      totalResponsePayloadLengthInBytes: this.getTotalResponsePayloadLength(),\n      locationEndpointsContacted: [...this.locationEndpointsContacted.values()],\n      metadataDiagnostics: {\n        metadataLookups: [...this.metadataLookups],\n      },\n      retryDiagnostics: {\n        failedAttempts: [...this.failedAttempts],\n      },\n      gatewayStatistics: this.gaterwayStatistics,\n      encryptionDiagnostics: this.encryptionDiagnostics,\n    };\n  }\n\n  public getTotalRequestPayloadLength(): number {\n    let totalRequestPayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    return totalRequestPayloadLength;\n  }\n\n  public getTotalResponsePayloadLength(): number {\n    let totalResponsePayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    return totalResponsePayloadLength;\n  }\n\n  public recordEndpointResolution(location: string): void {\n    this.locationEndpointsContacted.add(location);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../CosmosDiagnostics\";\nimport { Constants } from \"../common\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport type { StatusCode, SubStatusCode } from \"./StatusCodes\";\n\nexport class ResourceResponse<TResource> {\n  constructor(\n    public readonly resource: TResource | undefined,\n    public readonly headers: CosmosHeaders,\n    public readonly statusCode: StatusCode,\n    public readonly diagnostics: CosmosDiagnostics,\n    public readonly substatus?: SubStatusCode,\n  ) {}\n  public get requestCharge(): number {\n    return Number(this.headers[Constants.HttpHeaders.RequestCharge]) || 0;\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId] as string;\n  }\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag] as string;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport class ClientSideMetrics {\n  constructor(public readonly requestCharge: number) {}\n\n  /**\n   * Adds one or more ClientSideMetrics to a copy of this instance and returns the result.\n   */\n  public add(...clientSideMetricsArray: ClientSideMetrics[]): ClientSideMetrics {\n    let requestCharge = this.requestCharge;\n    for (const clientSideMetrics of clientSideMetricsArray) {\n      if (clientSideMetrics == null) {\n        throw new Error(\"clientSideMetrics has null or undefined item(s)\");\n      }\n\n      requestCharge += clientSideMetrics.requestCharge;\n    }\n\n    return new ClientSideMetrics(requestCharge);\n  }\n\n  public static readonly zero = new ClientSideMetrics(0);\n\n  public static createFromArray(...clientSideMetricsArray: ClientSideMetrics[]): ClientSideMetrics {\n    if (clientSideMetricsArray == null) {\n      throw new Error(\"clientSideMetricsArray is null or undefined item(s)\");\n    }\n\n    return this.zero.add(...clientSideMetricsArray);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport default {\n  // QueryMetrics\n  RetrievedDocumentCount: \"retrievedDocumentCount\",\n  RetrievedDocumentSize: \"retrievedDocumentSize\",\n  OutputDocumentCount: \"outputDocumentCount\",\n  OutputDocumentSize: \"outputDocumentSize\",\n  IndexHitRatio: \"indexUtilizationRatio\",\n  IndexHitDocumentCount: \"indexHitDocumentCount\",\n  TotalQueryExecutionTimeInMs: \"totalExecutionTimeInMs\",\n\n  // QueryPreparationTimes\n  QueryCompileTimeInMs: \"queryCompileTimeInMs\",\n  LogicalPlanBuildTimeInMs: \"queryLogicalPlanBuildTimeInMs\",\n  PhysicalPlanBuildTimeInMs: \"queryPhysicalPlanBuildTimeInMs\",\n  QueryOptimizationTimeInMs: \"queryOptimizationTimeInMs\",\n\n  // QueryTimes\n  IndexLookupTimeInMs: \"indexLookupTimeInMs\",\n  DocumentLoadTimeInMs: \"documentLoadTimeInMs\",\n  VMExecutionTimeInMs: \"VMExecutionTimeInMs\",\n  DocumentWriteTimeInMs: \"writeOutputTimeInMs\",\n\n  // RuntimeExecutionTimes\n  QueryEngineTimes: \"queryEngineTimes\",\n  SystemFunctionExecuteTimeInMs: \"systemFunctionExecuteTimeInMs\",\n  UserDefinedFunctionExecutionTimeInMs: \"userFunctionExecuteTimeInMs\",\n\n  // QueryMetrics Text\n  RetrievedDocumentCountText: \"Retrieved Document Count\",\n  RetrievedDocumentSizeText: \"Retrieved Document Size\",\n  OutputDocumentCountText: \"Output Document Count\",\n  OutputDocumentSizeText: \"Output Document Size\",\n  IndexUtilizationText: \"Index Utilization\",\n  TotalQueryExecutionTimeText: \"Total Query Execution Time\",\n\n  // QueryPreparationTimes Text\n  QueryPreparationTimesText: \"Query Preparation Times\",\n  QueryCompileTimeText: \"Query Compilation Time\",\n  LogicalPlanBuildTimeText: \"Logical Plan Build Time\",\n  PhysicalPlanBuildTimeText: \"Physical Plan Build Time\",\n  QueryOptimizationTimeText: \"Query Optimization Time\",\n\n  // QueryTimes Text\n  QueryEngineTimesText: \"Query Engine Times\",\n  IndexLookupTimeText: \"Index Lookup Time\",\n  DocumentLoadTimeText: \"Document Load Time\",\n  WriteOutputTimeText: \"Document Write Time\",\n\n  // RuntimeExecutionTimes Text\n  RuntimeExecutionTimesText: \"Runtime Execution Times\",\n  TotalExecutionTimeText: \"Query Engine Execution Time\",\n  SystemFunctionExecuteTimeText: \"System Function Execution Time\",\n  UserDefinedFunctionExecutionTimeText: \"User-defined Function Execution Time\",\n\n  // ClientSideQueryMetrics Text\n  ClientSideQueryMetricsText: \"Client Side Metrics\",\n  RetriesText: \"Retry Count\",\n  RequestChargeText: \"Request Charge\",\n  FetchExecutionRangesText: \"Partition Execution Timeline\",\n  SchedulingMetricsText: \"Scheduling Metrics\",\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Ported this implementation to javascript:\n// https://referencesource.microsoft.com/#mscorlib/system/timespan.cs,83e476c1ae112117\n/** @hidden */\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ticksPerMillisecond = 10000;\n/** @hidden */\nconst millisecondsPerTick = 1.0 / ticksPerMillisecond;\n\n/** @hidden */\nconst ticksPerSecond = ticksPerMillisecond * 1000; // 10,000,000\n/** @hidden */\nconst secondsPerTick = 1.0 / ticksPerSecond; // 0.0001\n\n/** @hidden */\nconst ticksPerMinute = ticksPerSecond * 60; // 600,000,000\n/** @hidden */\nconst minutesPerTick = 1.0 / ticksPerMinute; // 1.6666666666667e-9\n\n/** @hidden */\nconst ticksPerHour = ticksPerMinute * 60; // 36,000,000,000\n/** @hidden */\nconst hoursPerTick = 1.0 / ticksPerHour; // 2.77777777777777778e-11\n\n/** @hidden */\nconst ticksPerDay = ticksPerHour * 24; // 864,000,000,000\n/** @hidden */\nconst daysPerTick = 1.0 / ticksPerDay; // 1.1574074074074074074e-12\n\n/** @hidden */\nconst millisPerSecond = 1000;\n/** @hidden */\nconst millisPerMinute = millisPerSecond * 60; //     60,000\n/** @hidden */\nconst millisPerHour = millisPerMinute * 60; //  3,600,000\n/** @hidden */\nconst millisPerDay = millisPerHour * 24; // 86,400,000\n\n/** @hidden */\nconst maxMilliSeconds = Number.MAX_SAFE_INTEGER / ticksPerMillisecond;\n/** @hidden */\nconst minMilliSeconds = Number.MIN_SAFE_INTEGER / ticksPerMillisecond;\n\n/**\n * Represents a time interval.\n *\n * @param days                 - Number of days.\n * @param hours                - Number of hours.\n * @param minutes              - Number of minutes.\n * @param seconds              - Number of seconds.\n * @param milliseconds         - Number of milliseconds.\n * @hidden\n */\nexport class TimeSpan {\n  protected _ticks: number;\n  constructor(days: number, hours: number, minutes: number, seconds: number, milliseconds: number) {\n    // Constructor\n    if (!Number.isInteger(days)) {\n      throw new Error(\"days is not an integer\");\n    }\n\n    if (!Number.isInteger(hours)) {\n      throw new Error(\"hours is not an integer\");\n    }\n\n    if (!Number.isInteger(minutes)) {\n      throw new Error(\"minutes is not an integer\");\n    }\n\n    if (!Number.isInteger(seconds)) {\n      throw new Error(\"seconds is not an integer\");\n    }\n\n    if (!Number.isInteger(milliseconds)) {\n      throw new Error(\"milliseconds is not an integer\");\n    }\n\n    const totalMilliSeconds =\n      (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;\n    if (totalMilliSeconds > maxMilliSeconds || totalMilliSeconds < minMilliSeconds) {\n      throw new Error(\"Total number of milliseconds was either too large or too small\");\n    }\n\n    this._ticks = totalMilliSeconds * ticksPerMillisecond;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the sum of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to add.\n   */\n  public add(ts: TimeSpan): TimeSpan {\n    if (TimeSpan.additionDoesOverflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Adding the two timestamps causes an overflow.\");\n    }\n\n    const results = this._ticks + ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the difference of the specified TimeSpan object and this instance.\n   * @param ts - The time interval to subtract.\n   */\n  public subtract(ts: TimeSpan): TimeSpan {\n    if (TimeSpan.subtractionDoesUnderflow(this._ticks, ts._ticks)) {\n      throw new Error(\"Subtracting the two timestamps causes an underflow.\");\n    }\n\n    const results = this._ticks - ts._ticks;\n    return TimeSpan.fromTicks(results);\n  }\n\n  /**\n   * Compares this instance to a specified object and returns an integer that indicates whether this\n   * instance is shorter than, equal to, or longer than the specified object.\n   * @param value - The time interval to add.\n   */\n  public compareTo(value: TimeSpan): 1 | -1 | 0 {\n    if (value == null) {\n      return 1;\n    }\n\n    if (!TimeSpan.isTimeSpan(value)) {\n      throw new Error(\"Argument must be a TimeSpan object\");\n    }\n\n    return TimeSpan.compare(this, value);\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the absolute value of the current TimeSpan object.\n   */\n  public duration(): TimeSpan {\n    return TimeSpan.fromTicks(this._ticks >= 0 ? this._ticks : -this._ticks);\n  }\n\n  /**\n   * Returns a value indicating whether this instance is equal to a specified object.\n   * @param value - The time interval to check for equality.\n   */\n  public equals(value: TimeSpan): boolean {\n    if (TimeSpan.isTimeSpan(value)) {\n      return this._ticks === value._ticks;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns a new TimeSpan object whose value is the negated value of this instance.\n   * @param value - The time interval to check for equality.\n   */\n  public negate(): TimeSpan {\n    return TimeSpan.fromTicks(-this._ticks);\n  }\n\n  public days(): number {\n    return Math.floor(this._ticks / ticksPerDay);\n  }\n\n  public hours(): number {\n    return Math.floor(this._ticks / ticksPerHour);\n  }\n\n  public milliseconds(): number {\n    return Math.floor(this._ticks / ticksPerMillisecond);\n  }\n\n  public seconds(): number {\n    return Math.floor(this._ticks / ticksPerSecond);\n  }\n\n  public ticks(): number {\n    return this._ticks;\n  }\n\n  public totalDays(): number {\n    return this._ticks * daysPerTick;\n  }\n  public totalHours(): number {\n    return this._ticks * hoursPerTick;\n  }\n\n  public totalMilliseconds(): number {\n    return this._ticks * millisecondsPerTick;\n  }\n\n  public totalMinutes(): number {\n    return this._ticks * minutesPerTick;\n  }\n\n  public totalSeconds(): number {\n    return this._ticks * secondsPerTick;\n  }\n\n  public static fromTicks(value: number): TimeSpan {\n    const timeSpan = new TimeSpan(0, 0, 0, 0, 0);\n    timeSpan._ticks = value;\n    return timeSpan;\n  }\n\n  public static readonly zero = new TimeSpan(0, 0, 0, 0, 0);\n  public static readonly maxValue = TimeSpan.fromTicks(Number.MAX_SAFE_INTEGER);\n  public static readonly minValue = TimeSpan.fromTicks(Number.MIN_SAFE_INTEGER);\n\n  public static isTimeSpan(timespan: TimeSpan): number {\n    return timespan._ticks;\n  }\n\n  public static additionDoesOverflow(a: number, b: number): boolean {\n    const c = a + b;\n    return a !== c - b || b !== c - a;\n  }\n\n  public static subtractionDoesUnderflow(a: number, b: number): boolean {\n    const c = a - b;\n    return a !== c + b || b !== a - c;\n  }\n\n  public static compare(t1: TimeSpan, t2: TimeSpan): 1 | 0 | -1 {\n    if (t1._ticks > t2._ticks) {\n      return 1;\n    }\n    if (t1._ticks < t2._ticks) {\n      return -1;\n    }\n    return 0;\n  }\n\n  public static interval(value: number, scale: number): TimeSpan {\n    if (isNaN(value)) {\n      throw new Error(\"value must be a number\");\n    }\n\n    const milliseconds = value * scale;\n    if (milliseconds > maxMilliSeconds || milliseconds < minMilliSeconds) {\n      throw new Error(\"timespan too long\");\n    }\n\n    return TimeSpan.fromTicks(Math.floor(milliseconds * ticksPerMillisecond));\n  }\n\n  public static fromMilliseconds(value: number): TimeSpan {\n    return TimeSpan.interval(value, 1);\n  }\n\n  public static fromSeconds(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerSecond);\n  }\n\n  public static fromMinutes(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerMinute);\n  }\n\n  public static fromHours(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerHour);\n  }\n\n  public static fromDays(value: number): TimeSpan {\n    return TimeSpan.interval(value, millisPerDay);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { TimeSpan } from \"./timeSpan\";\n\n/**\n * @hidden\n */\nexport function parseDelimitedString(delimitedString: string): {\n  [key: string]: any;\n} {\n  if (delimitedString == null) {\n    throw new Error(\"delimitedString is null or undefined\");\n  }\n\n  const metrics: { [key: string]: any } = {};\n\n  const headerAttributes = delimitedString.split(\";\");\n  for (const attribute of headerAttributes) {\n    const attributeKeyValue = attribute.split(\"=\");\n\n    if (attributeKeyValue.length !== 2) {\n      throw new Error(\"recieved a malformed delimited string\");\n    }\n\n    const attributeKey = attributeKeyValue[0];\n    const attributeValue = parseFloat(attributeKeyValue[1]);\n\n    metrics[attributeKey] = attributeValue;\n  }\n\n  return metrics;\n}\n\n/**\n * @hidden\n */\nexport function timeSpanFromMetrics(\n  metrics: { [key: string]: any } /* TODO: any */,\n  key: string,\n): TimeSpan {\n  if (key in metrics) {\n    return TimeSpan.fromMilliseconds(metrics[key]);\n  }\n\n  return TimeSpan.zero;\n}\n\n/**\n * @hidden\n */\nexport function isNumeric(input: unknown): boolean {\n  return !isNaN(parseFloat(input as string)) && isFinite(input as number);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryPreparationTimes {\n  constructor(\n    public readonly queryCompilationTime: TimeSpan,\n    public readonly logicalPlanBuildTime: TimeSpan,\n    public readonly physicalPlanBuildTime: TimeSpan,\n    public readonly queryOptimizationTime: TimeSpan,\n  ) {}\n\n  /**\n   * returns a new QueryPreparationTimes instance that is the addition of this and the arguments.\n   */\n  public add(...queryPreparationTimesArray: QueryPreparationTimes[]): QueryPreparationTimes {\n    let queryCompilationTime = this.queryCompilationTime;\n    let logicalPlanBuildTime = this.logicalPlanBuildTime;\n    let physicalPlanBuildTime = this.physicalPlanBuildTime;\n    let queryOptimizationTime = this.queryOptimizationTime;\n\n    for (const queryPreparationTimes of queryPreparationTimesArray) {\n      if (queryPreparationTimes == null) {\n        throw new Error(\"queryPreparationTimesArray has null or undefined item(s)\");\n      }\n\n      queryCompilationTime = queryCompilationTime.add(queryPreparationTimes.queryCompilationTime);\n      logicalPlanBuildTime = logicalPlanBuildTime.add(queryPreparationTimes.logicalPlanBuildTime);\n      physicalPlanBuildTime = physicalPlanBuildTime.add(\n        queryPreparationTimes.physicalPlanBuildTime,\n      );\n      queryOptimizationTime = queryOptimizationTime.add(\n        queryPreparationTimes.queryOptimizationTime,\n      );\n    }\n\n    return new QueryPreparationTimes(\n      queryCompilationTime,\n      logicalPlanBuildTime,\n      physicalPlanBuildTime,\n      queryOptimizationTime,\n    );\n  }\n\n  /**\n   * Output the QueryPreparationTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.QueryCompileTimeInMs\n      }=${this.queryCompilationTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.LogicalPlanBuildTimeInMs\n      }=${this.logicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.PhysicalPlanBuildTimeInMs\n      }=${this.physicalPlanBuildTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.QueryOptimizationTimeInMs\n      }=${this.queryOptimizationTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new QueryPreparationTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n  );\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class that is the\n   * aggregation of an array of QueryPreparationTimes.\n   */\n  public static createFromArray(\n    queryPreparationTimesArray: QueryPreparationTimes[],\n  ): QueryPreparationTimes {\n    if (queryPreparationTimesArray == null) {\n      throw new Error(\"queryPreparationTimesArray is null or undefined item(s)\");\n    }\n\n    return QueryPreparationTimes.zero.add(...queryPreparationTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryPreparationTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): QueryPreparationTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    return new QueryPreparationTimes(\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryCompileTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.LogicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.PhysicalPlanBuildTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.QueryOptimizationTimeInMs),\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class RuntimeExecutionTimes {\n  constructor(\n    public readonly queryEngineExecutionTime: TimeSpan,\n    public readonly systemFunctionExecutionTime: TimeSpan,\n    public readonly userDefinedFunctionExecutionTime: TimeSpan,\n  ) {}\n\n  /**\n   * returns a new RuntimeExecutionTimes instance that is the addition of this and the arguments.\n   */\n  public add(...runtimeExecutionTimesArray: RuntimeExecutionTimes[]): RuntimeExecutionTimes {\n    let queryEngineExecutionTime = this.queryEngineExecutionTime;\n    let systemFunctionExecutionTime = this.systemFunctionExecutionTime;\n    let userDefinedFunctionExecutionTime = this.userDefinedFunctionExecutionTime;\n\n    for (const runtimeExecutionTimes of runtimeExecutionTimesArray) {\n      if (runtimeExecutionTimes == null) {\n        throw new Error(\"runtimeExecutionTimes has null or undefined item(s)\");\n      }\n\n      queryEngineExecutionTime = queryEngineExecutionTime.add(\n        runtimeExecutionTimes.queryEngineExecutionTime,\n      );\n      systemFunctionExecutionTime = systemFunctionExecutionTime.add(\n        runtimeExecutionTimes.systemFunctionExecutionTime,\n      );\n      userDefinedFunctionExecutionTime = userDefinedFunctionExecutionTime.add(\n        runtimeExecutionTimes.userDefinedFunctionExecutionTime,\n      );\n    }\n\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      systemFunctionExecutionTime,\n      userDefinedFunctionExecutionTime,\n    );\n  }\n\n  /**\n   * Output the RuntimeExecutionTimes as a delimited string.\n   */\n  public toDelimitedString(): string {\n    return (\n      `${\n        QueryMetricsConstants.SystemFunctionExecuteTimeInMs\n      }=${this.systemFunctionExecutionTime.totalMilliseconds()};` +\n      `${\n        QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs\n      }=${this.userDefinedFunctionExecutionTime.totalMilliseconds()}`\n    );\n  }\n\n  public static readonly zero = new RuntimeExecutionTimes(\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n  );\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class that is\n   *  the aggregation of an array of RuntimeExecutionTimes.\n   */\n  public static createFromArray(\n    runtimeExecutionTimesArray: RuntimeExecutionTimes[],\n  ): RuntimeExecutionTimes {\n    if (runtimeExecutionTimesArray == null) {\n      throw new Error(\"runtimeExecutionTimesArray is null or undefined item(s)\");\n    }\n\n    return RuntimeExecutionTimes.zero.add(...runtimeExecutionTimesArray);\n  }\n\n  /**\n   * Returns a new instance of the RuntimeExecutionTimes class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(delimitedString: string): RuntimeExecutionTimes {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const vmExecutionTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs);\n    const indexLookupTime = timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs);\n    const documentLoadTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentLoadTimeInMs,\n    );\n    const documentWriteTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.DocumentWriteTimeInMs,\n    );\n\n    let queryEngineExecutionTime = TimeSpan.zero;\n    queryEngineExecutionTime = queryEngineExecutionTime.add(vmExecutionTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(indexLookupTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentLoadTime);\n    queryEngineExecutionTime = queryEngineExecutionTime.subtract(documentWriteTime);\n    return new RuntimeExecutionTimes(\n      queryEngineExecutionTime,\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.SystemFunctionExecuteTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.UserDefinedFunctionExecutionTimeInMs),\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ClientSideMetrics } from \"./clientSideMetrics\";\nimport QueryMetricsConstants from \"./queryMetricsConstants\";\nimport { parseDelimitedString, timeSpanFromMetrics } from \"./queryMetricsUtils\";\nimport { QueryPreparationTimes } from \"./queryPreparationTime\";\nimport { RuntimeExecutionTimes } from \"./runtimeExecutionTimes\";\nimport { TimeSpan } from \"./timeSpan\";\n\nexport class QueryMetrics {\n  constructor(\n    public readonly retrievedDocumentCount: number,\n    public readonly retrievedDocumentSize: number,\n    public readonly outputDocumentCount: number,\n    public readonly outputDocumentSize: number,\n    public readonly indexHitDocumentCount: number,\n    public readonly totalQueryExecutionTime: TimeSpan,\n    public readonly queryPreparationTimes: QueryPreparationTimes,\n    public readonly indexLookupTime: TimeSpan,\n    public readonly documentLoadTime: TimeSpan,\n    public readonly vmExecutionTime: TimeSpan,\n    public readonly runtimeExecutionTimes: RuntimeExecutionTimes,\n    public readonly documentWriteTime: TimeSpan,\n    public readonly clientSideMetrics: ClientSideMetrics,\n  ) {}\n\n  /**\n   * Gets the IndexHitRatio\n   * @hidden\n   */\n  public get indexHitRatio(): number {\n    return this.retrievedDocumentCount === 0\n      ? 1\n      : this.indexHitDocumentCount / this.retrievedDocumentCount;\n  }\n\n  /**\n   * returns a new QueryMetrics instance that is the addition of this and the arguments.\n   */\n  public add(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    let retrievedDocumentCount = 0;\n    let retrievedDocumentSize = 0;\n    let outputDocumentCount = 0;\n    let outputDocumentSize = 0;\n    let indexHitDocumentCount = 0;\n    let totalQueryExecutionTime = TimeSpan.zero;\n    const queryPreparationTimesArray = [];\n    let indexLookupTime = TimeSpan.zero;\n    let documentLoadTime = TimeSpan.zero;\n    let vmExecutionTime = TimeSpan.zero;\n    const runtimeExecutionTimesArray = [];\n    let documentWriteTime = TimeSpan.zero;\n    const clientSideQueryMetricsArray = [];\n\n    queryMetricsArray.push(this);\n\n    for (const queryMetrics of queryMetricsArray) {\n      if (queryMetrics) {\n        retrievedDocumentCount += queryMetrics.retrievedDocumentCount;\n        retrievedDocumentSize += queryMetrics.retrievedDocumentSize;\n        outputDocumentCount += queryMetrics.outputDocumentCount;\n        outputDocumentSize += queryMetrics.outputDocumentSize;\n        indexHitDocumentCount += queryMetrics.indexHitDocumentCount;\n        totalQueryExecutionTime = totalQueryExecutionTime.add(queryMetrics.totalQueryExecutionTime);\n        queryPreparationTimesArray.push(queryMetrics.queryPreparationTimes);\n        indexLookupTime = indexLookupTime.add(queryMetrics.indexLookupTime);\n        documentLoadTime = documentLoadTime.add(queryMetrics.documentLoadTime);\n        vmExecutionTime = vmExecutionTime.add(queryMetrics.vmExecutionTime);\n        runtimeExecutionTimesArray.push(queryMetrics.runtimeExecutionTimes);\n        documentWriteTime = documentWriteTime.add(queryMetrics.documentWriteTime);\n        clientSideQueryMetricsArray.push(queryMetrics.clientSideMetrics);\n      }\n    }\n\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitDocumentCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromArray(queryPreparationTimesArray),\n      indexLookupTime,\n      documentLoadTime,\n      vmExecutionTime,\n      RuntimeExecutionTimes.createFromArray(runtimeExecutionTimesArray),\n      documentWriteTime,\n      ClientSideMetrics.createFromArray(...clientSideQueryMetricsArray),\n    );\n  }\n\n  /**\n   * Output the QueryMetrics as a delimited string.\n   * @hidden\n   */\n  public toDelimitedString(): string {\n    return (\n      QueryMetricsConstants.RetrievedDocumentCount +\n      \"=\" +\n      this.retrievedDocumentCount +\n      \";\" +\n      QueryMetricsConstants.RetrievedDocumentSize +\n      \"=\" +\n      this.retrievedDocumentSize +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentCount +\n      \"=\" +\n      this.outputDocumentCount +\n      \";\" +\n      QueryMetricsConstants.OutputDocumentSize +\n      \"=\" +\n      this.outputDocumentSize +\n      \";\" +\n      QueryMetricsConstants.IndexHitRatio +\n      \"=\" +\n      this.indexHitRatio +\n      \";\" +\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs +\n      \"=\" +\n      this.totalQueryExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.queryPreparationTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.IndexLookupTimeInMs +\n      \"=\" +\n      this.indexLookupTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.DocumentLoadTimeInMs +\n      \"=\" +\n      this.documentLoadTime.totalMilliseconds() +\n      \";\" +\n      QueryMetricsConstants.VMExecutionTimeInMs +\n      \"=\" +\n      this.vmExecutionTime.totalMilliseconds() +\n      \";\" +\n      this.runtimeExecutionTimes.toDelimitedString() +\n      \";\" +\n      QueryMetricsConstants.DocumentWriteTimeInMs +\n      \"=\" +\n      this.documentWriteTime.totalMilliseconds()\n    );\n  }\n\n  public static readonly zero = new QueryMetrics(\n    0,\n    0,\n    0,\n    0,\n    0,\n    TimeSpan.zero,\n    QueryPreparationTimes.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    TimeSpan.zero,\n    RuntimeExecutionTimes.zero,\n    TimeSpan.zero,\n    ClientSideMetrics.zero,\n  );\n\n  /**\n   * Returns a new instance of the QueryMetrics class that is the aggregation of an array of query metrics.\n   */\n  public static createFromArray(queryMetricsArray: QueryMetrics[]): QueryMetrics {\n    if (!queryMetricsArray) {\n      throw new Error(\"queryMetricsArray is null or undefined item(s)\");\n    }\n\n    return QueryMetrics.zero.add(queryMetricsArray);\n  }\n\n  /**\n   * Returns a new instance of the QueryMetrics class this is deserialized from a delimited string.\n   */\n  public static createFromDelimitedString(\n    delimitedString: string,\n    clientSideMetrics?: ClientSideMetrics,\n  ): QueryMetrics {\n    const metrics = parseDelimitedString(delimitedString);\n\n    const indexHitRatio = metrics[QueryMetricsConstants.IndexHitRatio] || 0;\n    const retrievedDocumentCount = metrics[QueryMetricsConstants.RetrievedDocumentCount] || 0;\n    const indexHitCount = indexHitRatio * retrievedDocumentCount;\n    const outputDocumentCount = metrics[QueryMetricsConstants.OutputDocumentCount] || 0;\n    const outputDocumentSize = metrics[QueryMetricsConstants.OutputDocumentSize] || 0;\n    const retrievedDocumentSize = metrics[QueryMetricsConstants.RetrievedDocumentSize] || 0;\n    const totalQueryExecutionTime = timeSpanFromMetrics(\n      metrics,\n      QueryMetricsConstants.TotalQueryExecutionTimeInMs,\n    );\n    return new QueryMetrics(\n      retrievedDocumentCount,\n      retrievedDocumentSize,\n      outputDocumentCount,\n      outputDocumentSize,\n      indexHitCount,\n      totalQueryExecutionTime,\n      QueryPreparationTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.IndexLookupTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentLoadTimeInMs),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.VMExecutionTimeInMs),\n      RuntimeExecutionTimes.createFromDelimitedString(delimitedString),\n      timeSpanFromMetrics(metrics, QueryMetricsConstants.DocumentWriteTimeInMs),\n      clientSideMetrics || ClientSideMetrics.zero,\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport { QueryMetrics } from \"../queryMetrics/queryMetrics\";\n\nexport interface CosmosHeaders {\n  [key: string]: any;\n}\n\n/** @hidden */\n// TODO: docs\nexport function getRequestChargeIfAny(headers: CosmosHeaders | number): number {\n  if (typeof headers === \"number\") {\n    return headers;\n  } else if (typeof headers === \"string\") {\n    return parseFloat(headers);\n  }\n\n  if (headers) {\n    const rc = headers[Constants.HttpHeaders.RequestCharge];\n    if (rc) {\n      return parseFloat(rc as string);\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\n/**\n * @hidden\n */\nexport function getInitialHeader(): CosmosHeaders {\n  const headers: CosmosHeaders = {};\n  headers[Constants.HttpHeaders.RequestCharge] = 0;\n  headers[Constants.HttpHeaders.QueryMetrics] = {};\n  return headers;\n}\n\n/**\n * @hidden\n */\n// TODO: The name of this method isn't very accurate to what it does\nexport function mergeHeaders(headers: CosmosHeaders, toBeMergedHeaders: CosmosHeaders): void {\n  if (headers[Constants.HttpHeaders.RequestCharge] === undefined) {\n    headers[Constants.HttpHeaders.RequestCharge] = 0;\n  }\n\n  if (headers[Constants.HttpHeaders.QueryMetrics] === undefined) {\n    headers[Constants.HttpHeaders.QueryMetrics] = QueryMetrics.zero;\n  }\n\n  if (!toBeMergedHeaders) {\n    return;\n  }\n\n  headers[Constants.HttpHeaders.RequestCharge] += getRequestChargeIfAny(toBeMergedHeaders);\n  if (toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed]) {\n    headers[Constants.HttpHeaders.IsRUPerMinuteUsed] =\n      toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed];\n  }\n\n  if (Constants.HttpHeaders.QueryMetrics in toBeMergedHeaders) {\n    const headerQueryMetrics = headers[Constants.HttpHeaders.QueryMetrics];\n    const toBeMergedHeaderQueryMetrics = toBeMergedHeaders[Constants.HttpHeaders.QueryMetrics];\n\n    for (const partitionId in toBeMergedHeaderQueryMetrics) {\n      if (headerQueryMetrics[partitionId]) {\n        const combinedQueryMetrics = headerQueryMetrics[partitionId].add([\n          toBeMergedHeaderQueryMetrics[partitionId],\n        ]);\n        headerQueryMetrics[partitionId] = combinedQueryMetrics;\n      } else {\n        headerQueryMetrics[partitionId] = toBeMergedHeaderQueryMetrics[partitionId];\n      }\n    }\n  }\n\n  if (Constants.HttpHeaders.IndexUtilization in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.IndexUtilization] =\n      toBeMergedHeaders[Constants.HttpHeaders.IndexUtilization];\n  }\n\n  if (Constants.HttpHeaders.CorrelatedActivityId in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.CorrelatedActivityId] =\n      toBeMergedHeaders[Constants.HttpHeaders.CorrelatedActivityId];\n  }\n}\n\n/** @hidden */\nexport function decodeAndParseJSONString(inputString: string): string {\n  try {\n    if (!inputString || inputString === \"\") {\n      return \"{}\";\n    }\n    const decodedString = decodeURIComponent(inputString);\n    const parsedString = JSON.parse(decodedString);\n    const indexMetrics = JSON.stringify(parsedString);\n    return indexMetrics;\n  } catch (e) {\n    console.error(\"Error parsing JSON file:\", e.message);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/headerUtils\";\nimport {\n  decodeAndParseJSONString,\n  getRequestChargeIfAny,\n} from \"../queryExecutionContext/headerUtils\";\nimport type { CosmosDiagnostics } from \"../CosmosDiagnostics\";\n\nexport class FeedResponse<TResource> {\n  constructor(\n    public readonly resources: TResource[],\n    private readonly headers: CosmosHeaders,\n    public readonly hasMoreResults: boolean,\n    public readonly diagnostics: CosmosDiagnostics,\n  ) {}\n\n  public get continuation(): string {\n    return this.continuationToken;\n  }\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.Continuation];\n  }\n  public get queryMetrics(): string {\n    return this.headers[Constants.HttpHeaders.QueryMetrics];\n  }\n  public get requestCharge(): number {\n    return getRequestChargeIfAny(this.headers);\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  public get correlatedActivityId(): string {\n    return this.headers[Constants.HttpHeaders.CorrelatedActivityId];\n  }\n  public get indexMetrics(): string {\n    return decodeAndParseJSONString(this.headers[Constants.HttpHeaders.IndexUtilization]);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @hidden\n */\nexport const TimeoutErrorCode = \"TimeoutError\";\n\nexport class TimeoutError extends Error {\n  public readonly code: string = TimeoutErrorCode;\n  constructor(message: string = \"Timeout Error\") {\n    super(message);\n    this.name = TimeoutErrorCode;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Cosmos DB Diagnostic Level\n */\nexport enum CosmosDbDiagnosticLevel {\n  info = \"info\",\n  debug = \"debug\",\n  debugUnsafe = \"debug-unsafe\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\n\n/**\n * @hidden\n */\nexport const CosmosDbDiagnosticLevelOrder = [\n  CosmosDbDiagnosticLevel.info,\n  CosmosDbDiagnosticLevel.debug,\n  CosmosDbDiagnosticLevel.debugUnsafe,\n];\n\n/**\n * @hidden\n */\nexport function allowTracing(\n  levelToCheck: CosmosDbDiagnosticLevel,\n  clientDiagnosticLevel: CosmosDbDiagnosticLevel,\n): boolean {\n  const indexOfDiagnosticLevelToCheck = CosmosDbDiagnosticLevelOrder.indexOf(levelToCheck);\n  const indexOfClientDiagnosticLevel = CosmosDbDiagnosticLevelOrder.indexOf(clientDiagnosticLevel);\n  if (indexOfDiagnosticLevelToCheck === -1 || indexOfClientDiagnosticLevel === -1) {\n    return false;\n  }\n  return indexOfDiagnosticLevelToCheck <= indexOfClientDiagnosticLevel;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CosmosDiagnosticContext } from \"./CosmosDiagnosticsContext\";\nimport { ErrorResponse, RequestContext } from \"../request\";\nimport {\n  DiagnosticNode,\n  EncryptionDiagnostics,\n  MetadataLookUpType,\n  ClientConfigDiagnostic,\n} from \"../CosmosDiagnostics\";\nimport { CosmosDiagnostics, getRootNode } from \"../CosmosDiagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport type { HttpHeaders, PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport type { OperationType, ResourceType } from \"../common\";\nimport { Constants, prepareURL } from \"../common\";\nimport { allowTracing } from \"./diagnosticLevelComparator\";\nimport { randomUUID } from \"@azure/core-util\";\n\n/**\n * @hidden\n * This is Internal Representation for DiagnosticNode. It contains useful helper functions to collect\n * diagnostic information throughout the lifetime of Diagnostic session.\n * The functions toDiagnosticNode() & toDiagnostic() are given to convert it to public facing counterpart.\n */\nexport class DiagnosticNodeInternal implements DiagnosticNode {\n  public id: string;\n  public nodeType: DiagnosticNodeType;\n  public parent: DiagnosticNodeInternal;\n  public children: DiagnosticNodeInternal[];\n  public data: Partial<DiagnosticDataValue>;\n  public startTimeUTCInMs: number;\n  public durationInMs: number;\n  public diagnosticLevel: CosmosDbDiagnosticLevel;\n  private diagnosticCtx: CosmosDiagnosticContext;\n  private encryptionDiagnostics: EncryptionDiagnostics;\n\n  /**\n   * @internal\n   */\n  constructor(\n    diagnosticLevel: CosmosDbDiagnosticLevel,\n    type: DiagnosticNodeType,\n    parent: DiagnosticNodeInternal,\n    data: Partial<DiagnosticDataValue> = {},\n    startTimeUTCInMs: number = getCurrentTimestampInMs(),\n    ctx: CosmosDiagnosticContext = new CosmosDiagnosticContext(),\n  ) {\n    this.id = randomUUID();\n    this.nodeType = type;\n    this.startTimeUTCInMs = startTimeUTCInMs;\n    this.data = data;\n    this.children = [];\n    this.durationInMs = 0;\n    this.parent = parent;\n    this.diagnosticCtx = ctx;\n    this.diagnosticLevel = diagnosticLevel;\n\n    // Initialize EncryptionDiagnostics\n    this.encryptionDiagnostics = {\n      encryptContent: {},\n      decryptContent: {},\n      processingDurationInMs: 0,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  private addLog(msg: string): void {\n    if (!this.data.log) {\n      this.data.log = [];\n    }\n    this.data.log.push(msg);\n  }\n\n  /**\n   * @internal\n   */\n  private sanitizeHeaders(headers?: CosmosHeaders | HttpHeaders): CosmosHeaders | HttpHeaders {\n    return headers;\n  }\n\n  /**\n   * Updated durationInMs for node, based on endTimeUTCInMs provided.\n   * @internal\n   */\n  public updateTimestamp(endTimeUTCInMs: number = getCurrentTimestampInMs()): void {\n    this.durationInMs = endTimeUTCInMs - this.startTimeUTCInMs;\n  }\n\n  /**\n   * @internal\n   */\n  public recordSuccessfulNetworkCall(\n    startTimeUTCInMs: number,\n    requestContext: RequestContext,\n    pipelineResponse: PipelineResponse,\n    substatus: number,\n    url: string,\n  ): void {\n    const responseHeaders = pipelineResponse.headers.toJSON();\n    const gatewayRequest = {\n      activityId: responseHeaders[Constants.HttpHeaders.ActivityId],\n      correlateActivityId: requestContext.headers[Constants.HttpHeaders.CorrelatedActivityId],\n      startTimeUTCInMs,\n      durationInMs: getCurrentTimestampInMs() - startTimeUTCInMs,\n      statusCode: pipelineResponse.status,\n      subStatusCode: substatus,\n      requestPayloadLengthInBytes: calculateRequestPayloadLength(requestContext),\n      responsePayloadLengthInBytes: calculateResponsePayloadLength(pipelineResponse),\n      operationType: requestContext.operationType,\n      resourceType: requestContext.resourceType,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n    };\n    let requestData: any = {\n      OperationType: gatewayRequest.operationType,\n      resourceType: gatewayRequest.resourceType,\n      requestPayloadLengthInBytes: gatewayRequest.requestPayloadLengthInBytes,\n    };\n\n    if (allowTracing(CosmosDbDiagnosticLevel.debugUnsafe, this.diagnosticLevel)) {\n      requestData = {\n        ...requestData,\n        headers: this.sanitizeHeaders(requestContext.headers),\n        requestBody: requestContext.body,\n        responseBody: pipelineResponse.bodyAsText,\n        url: url,\n      };\n    }\n    this.addData({\n      requestPayloadLengthInBytes: gatewayRequest.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gatewayRequest.responsePayloadLengthInBytes,\n      startTimeUTCInMs: gatewayRequest.startTimeUTCInMs,\n      durationInMs: gatewayRequest.durationInMs,\n      requestData,\n    });\n    this.diagnosticCtx.recordNetworkCall(gatewayRequest);\n  }\n\n  /**\n   * @internal\n   */\n  public recordFailedNetworkCall(\n    startTimeUTCInMs: number,\n    requestContext: RequestContext,\n    retryAttemptNumber: number,\n    statusCode: number,\n    substatusCode: number,\n    responseHeaders: CosmosHeaders,\n  ): void {\n    this.addData({ failedAttempty: true });\n    const requestPayloadLengthInBytes = calculateRequestPayloadLength(requestContext);\n    this.diagnosticCtx.recordFailedAttempt(\n      {\n        activityId: responseHeaders[Constants.HttpHeaders.ActivityId] as string,\n        correlatedActivityId: requestContext.headers[\n          Constants.HttpHeaders.CorrelatedActivityId\n        ] as string,\n        startTimeUTCInMs,\n        durationInMs: getCurrentTimestampInMs() - startTimeUTCInMs,\n        statusCode,\n        subStatusCode: substatusCode,\n        requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: 0,\n        operationType: requestContext.operationType,\n        resourceType: requestContext.resourceType,\n      },\n      retryAttemptNumber,\n    );\n    let requestData: any = {\n      OperationType: requestContext.operationType,\n      resourceType: requestContext.resourceType,\n      requestPayloadLengthInBytes,\n    };\n    if (allowTracing(CosmosDbDiagnosticLevel.debugUnsafe, this.diagnosticLevel)) {\n      requestData = {\n        ...requestData,\n        headers: this.sanitizeHeaders(requestContext.headers),\n        requestBody: requestContext.body,\n        url: prepareURL(requestContext.endpoint, requestContext.path),\n      };\n    }\n    this.addData({\n      failedAttempty: true,\n      requestData,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public recordEndpointResolution(location: string): void {\n    this.addData({ selectedLocation: location });\n    this.diagnosticCtx.recordEndpointResolution(location);\n  }\n\n  /**\n   * @internal\n   */\n  public addData(\n    data: Partial<DiagnosticDataValue>,\n    msg?: string,\n    level: CosmosDbDiagnosticLevel = this.diagnosticLevel,\n  ): void {\n    if (level !== CosmosDbDiagnosticLevel.info) {\n      this.data = { ...this.data, ...data };\n      if (msg) {\n        this.addLog(msg);\n      }\n    }\n  }\n\n  /**\n   * Merge given DiagnosticNodeInternal's context to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests. Given DiagnosticNodeInternal becomes a child of this node.\n   * @internal\n   */\n  public addChildNode(\n    child: DiagnosticNodeInternal,\n    level: CosmosDbDiagnosticLevel,\n    metadataType?: MetadataLookUpType,\n  ): DiagnosticNodeInternal {\n    this.diagnosticCtx.mergeDiagnostics(child.diagnosticCtx, metadataType);\n    if (allowTracing(level, this.diagnosticLevel)) {\n      child.parent = this;\n      this.children.push(child);\n    }\n    return child;\n  }\n\n  /**\n   * @internal\n   */\n  public initializeChildNode(\n    type: DiagnosticNodeType,\n    level: CosmosDbDiagnosticLevel,\n    data: Partial<DiagnosticDataValue> = {},\n  ): DiagnosticNodeInternal {\n    if (allowTracing(level, this.diagnosticLevel)) {\n      const child = new DiagnosticNodeInternal(\n        this.diagnosticLevel,\n        type,\n        this,\n        data,\n        getCurrentTimestampInMs(),\n        this.diagnosticCtx,\n      );\n      this.children.push(child);\n      return child;\n    } else {\n      return this;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  public recordQueryResult(resources: unknown, level: CosmosDbDiagnosticLevel): void {\n    if (allowTracing(level, this.diagnosticLevel)) {\n      const previousCount = this.data.queryRecordsRead ?? 0;\n      if (Array.isArray(resources)) {\n        this.data.queryRecordsRead = previousCount + resources.length;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * record startTime for encryption in an operation\n   */\n  public beginEncryptionDiagnostics(operation: string): void {\n    const startTime = getCurrentTimestampInMs();\n    switch (operation) {\n      case Constants.Encryption.DiagnosticsEncryptOperation:\n        this.encryptionDiagnostics.encryptContent[Constants.Encryption.DiagnosticsStartTime] =\n          startTime;\n        break;\n      case Constants.Encryption.DiagnosticsDecryptOperation:\n        this.encryptionDiagnostics.decryptContent[Constants.Encryption.DiagnosticsStartTime] =\n          startTime;\n        break;\n      default:\n        throw new ErrorResponse(\"Invalid operation type for encryption diagnostics\");\n    }\n  }\n  /**\n   * @internal\n   * record duration from startTime and properties count for encryption in an operation\n   */\n  public endEncryptionDiagnostics(operation: string, propertiesCount?: number): void {\n    const endTime = getCurrentTimestampInMs();\n    let processingDuration = 0;\n    switch (operation) {\n      case Constants.Encryption.DiagnosticsEncryptOperation:\n        processingDuration =\n          endTime -\n          this.encryptionDiagnostics.encryptContent[Constants.Encryption.DiagnosticsStartTime];\n        this.encryptionDiagnostics.encryptContent[Constants.Encryption.DiagnosticsDuration] =\n          processingDuration;\n        // will be undefined in case of bulk/batch\n        if (propertiesCount !== undefined) {\n          this.encryptionDiagnostics.encryptContent[\n            Constants.Encryption.DiagnosticsPropertiesEncryptedCount\n          ] = propertiesCount;\n        }\n        break;\n\n      case Constants.Encryption.DiagnosticsDecryptOperation:\n        processingDuration =\n          endTime -\n          this.encryptionDiagnostics.decryptContent[Constants.Encryption.DiagnosticsStartTime];\n        this.encryptionDiagnostics.decryptContent[Constants.Encryption.DiagnosticsDuration] =\n          processingDuration;\n        if (propertiesCount !== undefined) {\n          this.encryptionDiagnostics.decryptContent[\n            Constants.Encryption.DiagnosticsPropertiesDecryptedCount\n          ] = propertiesCount;\n        }\n        break;\n      default:\n        throw new ErrorResponse(\"Invalid operation type for encryption diagnostics\");\n    }\n    this.diagnosticCtx.recordEncryptionDiagnostics(this.encryptionDiagnostics);\n  }\n\n  /**\n   * Convert DiagnosticNodeInternal (internal representation) to DiagnosticNode (public, sanitized representation)\n   * @internal\n   */\n  public toDiagnosticNode(): DiagnosticNode {\n    return {\n      id: this.id,\n      nodeType: this.nodeType,\n      children: this.children.map((child) => child.toDiagnosticNode()),\n      data: this.data,\n      startTimeUTCInMs: this.startTimeUTCInMs,\n      durationInMs: this.durationInMs,\n    };\n  }\n\n  /**\n   * Convert to CosmosDiagnostics\n   * @internal\n   */\n  public toDiagnostic(clientConfigDiagnostic: ClientConfigDiagnostic): CosmosDiagnostics {\n    const rootNode = getRootNode(this);\n    const diagnostiNode = allowTracing(CosmosDbDiagnosticLevel.debug, this.diagnosticLevel)\n      ? rootNode.toDiagnosticNode()\n      : undefined;\n    const clientConfig = allowTracing(CosmosDbDiagnosticLevel.debug, this.diagnosticLevel)\n      ? clientConfigDiagnostic\n      : undefined;\n    const cosmosDiagnostic = new CosmosDiagnostics(\n      this.diagnosticCtx.getClientSideStats(),\n      diagnostiNode,\n      clientConfig,\n    );\n    return cosmosDiagnostic;\n  }\n}\n\n/**\n * @hidden\n */\nexport type DiagnosticDataValue = {\n  selectedLocation: string;\n  activityId: string;\n  requestAttempNumber: number;\n  requestPayloadLengthInBytes: number;\n  responsePayloadLengthInBytes: number;\n  responseStatus: number;\n  readFromCache: boolean;\n  operationType: OperationType;\n  metadatOperationType: MetadataLookUpType;\n  resourceType: ResourceType;\n  failedAttempty: boolean;\n  successfulRetryPolicy: string;\n  partitionKeyRangeId: string;\n  stateful: boolean;\n  queryRecordsRead: number;\n  queryMethodIdentifier: string;\n  log: string[];\n  failure: boolean;\n  startTimeUTCInMs: number;\n  durationInMs: number;\n  requestData: Partial<{\n    requestPayloadLengthInBytes: number;\n    responsePayloadLengthInBytes: number;\n    operationType: OperationType;\n    resourceType: ResourceType;\n    headers: CosmosHeaders;\n    requestBody: any;\n    responseBody: any;\n    url: string;\n  }>;\n};\n\n/**\n * @hidden\n */\nexport enum DiagnosticNodeType {\n  CLIENT_REQUEST_NODE = \"CLIENT_REQUEST_NODE\", // Top most node representing client operations.\n  METADATA_REQUEST_NODE = \"METADATA_REQUEST_NODE\", // Node representing a metadata request.\n  HTTP_REQUEST = \"HTTP_REQUEST\", // Node representing REST call to backend services.\n  BATCH_REQUEST = \"BATCH_REQUEST\", // Node representing batch request.\n  PARALLEL_QUERY_NODE = \"PARALLEL_QUERY_NODE\", // Node representing parallel query execution.\n  DEFAULT_QUERY_NODE = \"DEFAULT_QUERY_NODE\", // Node representing default query execution.\n  QUERY_REPAIR_NODE = \"QUERY_REPAIR_NODE\", // Node representing query repair.\n  BACKGROUND_REFRESH_THREAD = \"BACKGROUND_REFRESH_THREAD\", // Node representing background refresh.\n  REQUEST_ATTEMPTS = \"REQUEST_ATTEMPTS\", // Node representing request attempts.\n}\n\nfunction calculateResponsePayloadLength(response: PipelineResponse) {\n  return response?.bodyAsText?.length || 0;\n}\n\nfunction calculateRequestPayloadLength(requestContext: RequestContext) {\n  return requestContext.body ? requestContext.body.length : 0;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { MetadataLookUpType } from \"../CosmosDiagnostics\";\nimport { CosmosDiagnostics } from \"../CosmosDiagnostics\";\nimport type { DiagnosticDataValue } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { ClientContext } from \"../ClientContext\";\nimport { getCurrentTimestampInMs } from \"./time\";\nimport { CosmosDbDiagnosticLevel } from \"../diagnostics/CosmosDbDiagnosticLevel\";\nimport { randomUUID } from \"@azure/core-util\";\n\n/**\n * @hidden\n * Utility function to create an Empty CosmosDiagnostic object.\n */\nexport function getEmptyCosmosDiagnostics(): CosmosDiagnostics {\n  return new CosmosDiagnostics(\n    {\n      requestDurationInMs: 0,\n      requestStartTimeUTCInMs: getCurrentTimestampInMs(),\n      totalRequestPayloadLengthInBytes: 0,\n      totalResponsePayloadLengthInBytes: 0,\n      locationEndpointsContacted: [],\n      retryDiagnostics: {\n        failedAttempts: [],\n      },\n      metadataDiagnostics: {\n        metadataLookups: [],\n      },\n      gatewayStatistics: [],\n    },\n    {\n      id: randomUUID(),\n      nodeType: DiagnosticNodeType.CLIENT_REQUEST_NODE,\n      children: [],\n      data: {},\n      startTimeUTCInMs: getCurrentTimestampInMs(),\n      durationInMs: 0,\n    },\n  );\n}\n\n/**\n * @hidden\n */\nexport type ExtractPromise<T> = T extends Promise<infer U> ? U : never;\n\n/**\n * A supporting utility wrapper function, to be used inside a diagnostic session started\n * by `withDiagnostics` function.\n * Created a Diagnostic node and add it as a child to existing diagnostic session.\n * @hidden\n */\nexport async function addDignosticChild<\n  Callback extends (node: DiagnosticNodeInternal) => Promise<any>,\n>(\n  callback: Callback,\n  node: DiagnosticNodeInternal,\n  type: DiagnosticNodeType,\n  data: Partial<DiagnosticDataValue> = {},\n): Promise<ExtractPromise<ReturnType<Callback>>> {\n  const childNode = node.initializeChildNode(type, CosmosDbDiagnosticLevel.debug, data);\n  try {\n    const response = await callback(childNode);\n    childNode.updateTimestamp();\n    return response;\n  } catch (e: any) {\n    childNode.addData({\n      failure: true,\n    });\n    childNode.updateTimestamp();\n    throw e;\n  }\n}\n\n/**\n * A supporting utility wrapper function, to be used inside a diagnostic session started\n * by `withDiagnostics` function.\n * Treats requests originating in  provided `callback` as metadata calls.\n * To realize this, starts a temporary diagnostic session, after execution of callback is\n * finished. Merges this temporary diagnostic session to the original diagnostic session\n * represented by the input parameter `node`.\n * @hidden\n */\nexport async function withMetadataDiagnostics<\n  Callback extends (node: DiagnosticNodeInternal) => Promise<any>,\n>(\n  callback: Callback,\n  node: DiagnosticNodeInternal,\n  type: MetadataLookUpType,\n): Promise<ExtractPromise<ReturnType<Callback>>> {\n  const diagnosticNodeForMetadataCall = new DiagnosticNodeInternal(\n    node.diagnosticLevel,\n    DiagnosticNodeType.METADATA_REQUEST_NODE,\n    null,\n  );\n  try {\n    const response: any = await callback(diagnosticNodeForMetadataCall);\n    node.addChildNode(diagnosticNodeForMetadataCall, CosmosDbDiagnosticLevel.debug, type);\n    return response;\n  } catch (e) {\n    node.addChildNode(diagnosticNodeForMetadataCall, CosmosDbDiagnosticLevel.debug, type);\n    throw e;\n  }\n}\n\n/**\n * Utility wrapper function to managed lifecycle of a Diagnostic session.\n * Meant to be used at the root of the client operation. i.e. item.read(),\n * queryIterator.fetchAll().\n *\n * This utility starts a new diagnostic session. So using it any where else\n * other than start of operation, will result is different diagnostic sessions.\n *\n * Workings :\n * 1. Takes a callback function as input.\n * 2. Creates a new instance of DiagnosticNodeInternal, which can be though as starting\n * a new diagnostic session.\n * 3. Executes the callback function.\n * 4. If execution was successful. Converts DiagnosticNodeInternal to CosmosDiagnostics\n * and injects it to the response object and returns this object.\n * 5. If execution threw an exception. Sill converts DiagnosticNodeInternal to CosmosDiagnostics\n * and injects it to the Error object, and rethrows the Error object.\n *\n * @hidden\n */\nexport async function withDiagnostics<\n  Callback extends (node: DiagnosticNodeInternal) => Promise<any>,\n>(\n  callback: Callback,\n  clientContext: ClientContext,\n  type: DiagnosticNodeType = DiagnosticNodeType.CLIENT_REQUEST_NODE,\n): Promise<ExtractPromise<ReturnType<Callback>>> {\n  const diagnosticNode = new DiagnosticNodeInternal(clientContext.diagnosticLevel, type, null);\n  try {\n    const response: any = await callback(diagnosticNode);\n    diagnosticNode.updateTimestamp();\n    const diagnostics = diagnosticNode.toDiagnostic(clientContext.getClientConfig());\n    if (typeof response === \"object\" && response !== null) {\n      (response as any).diagnostics = diagnostics;\n    }\n    clientContext.recordDiagnostics(diagnostics);\n    return response;\n  } catch (e: any) {\n    diagnosticNode.updateTimestamp();\n    diagnosticNode.addData({\n      failure: true,\n    });\n    const diagnostics = diagnosticNode.toDiagnostic(clientContext.getClientConfig());\n    e.diagnostics = diagnostics;\n    clientContext.recordDiagnostics(diagnostics);\n    throw e;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/constants\";\nimport { InMemoryCollectionRoutingMap } from \"./inMemoryCollectionRoutingMap\";\n\n/**\n * @hidden\n */\nfunction compareRanges(a: any, b: any): 0 | 1 | -1 {\n  const aVal = a[0][Constants.PartitionKeyRange.MinInclusive];\n  const bVal = b[0][Constants.PartitionKeyRange.MinInclusive];\n  if (aVal > bVal) {\n    return 1;\n  }\n  if (aVal < bVal) {\n    return -1;\n  }\n  return 0;\n}\n\n/** @hidden */\nexport function createCompleteRoutingMap(\n  partitionKeyRangeInfoTuppleList: any[],\n): InMemoryCollectionRoutingMap {\n  const rangeById: any = {}; // TODO: any\n  const rangeByInfo: any = {}; // TODO: any\n\n  let sortedRanges = [];\n\n  // the for loop doesn't invoke any async callback\n  for (const r of partitionKeyRangeInfoTuppleList) {\n    rangeById[r[0][Constants.PartitionKeyRange.Id]] = r;\n    rangeByInfo[r[1]] = r[0];\n    sortedRanges.push(r);\n  }\n\n  sortedRanges = sortedRanges.sort(compareRanges);\n  const partitionKeyOrderedRange = sortedRanges.map((r) => r[0]);\n  const orderedPartitionInfo = sortedRanges.map((r) => r[1]);\n\n  if (!isCompleteSetOfRange(partitionKeyOrderedRange)) {\n    return undefined;\n  }\n  return new InMemoryCollectionRoutingMap(partitionKeyOrderedRange, orderedPartitionInfo);\n}\n\n/**\n * @hidden\n */\nfunction isCompleteSetOfRange(partitionKeyOrderedRange: any): boolean {\n  // TODO: any\n  let isComplete = false;\n  if (partitionKeyOrderedRange.length > 0) {\n    const firstRange = partitionKeyOrderedRange[0];\n    const lastRange = partitionKeyOrderedRange[partitionKeyOrderedRange.length - 1];\n    isComplete =\n      firstRange[Constants.PartitionKeyRange.MinInclusive] ===\n      Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey;\n    isComplete =\n      isComplete &&\n      lastRange[Constants.PartitionKeyRange.MaxExclusive] ===\n        Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey;\n\n    for (let i = 1; i < partitionKeyOrderedRange.length; i++) {\n      const previousRange = partitionKeyOrderedRange[i - 1];\n      const currentRange = partitionKeyOrderedRange[i];\n      isComplete =\n        isComplete &&\n        previousRange[Constants.PartitionKeyRange.MaxExclusive] ===\n          currentRange[Constants.PartitionKeyRange.MinInclusive];\n\n      if (!isComplete) {\n        if (\n          previousRange[Constants.PartitionKeyRange.MaxExclusive] >\n          currentRange[Constants.PartitionKeyRange.MinInclusive]\n        ) {\n          throw Error(\"Ranges overlap\");\n        }\n        break;\n      }\n    }\n  }\n  return isComplete;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { MetadataLookUpType } from \"../CosmosDiagnostics\";\nimport type { PartitionKeyRange } from \"../client/Container/PartitionKeyRange\";\nimport type { ClientContext } from \"../ClientContext\";\nimport { getIdFromLink } from \"../common/helper\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { withMetadataDiagnostics } from \"../utils/diagnostics\";\nimport { createCompleteRoutingMap } from \"./CollectionRoutingMapFactory\";\nimport type { InMemoryCollectionRoutingMap } from \"./inMemoryCollectionRoutingMap\";\nimport type { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport class PartitionKeyRangeCache {\n  private collectionRoutingMapByCollectionId: {\n    [key: string]: Promise<InMemoryCollectionRoutingMap>;\n  };\n\n  constructor(private clientContext: ClientContext) {\n    this.collectionRoutingMapByCollectionId = {};\n  }\n  /**\n   * Finds or Instantiates the requested Collection Routing Map\n   * @param collectionLink - Requested collectionLink\n   * @hidden\n   */\n  public async onCollectionRoutingMap(\n    collectionLink: string,\n    diagnosticNode: DiagnosticNodeInternal,\n    forceRefresh: boolean = false,\n  ): Promise<InMemoryCollectionRoutingMap> {\n    const collectionId = getIdFromLink(collectionLink);\n    if (this.collectionRoutingMapByCollectionId[collectionId] === undefined || forceRefresh) {\n      this.collectionRoutingMapByCollectionId[collectionId] = this.requestCollectionRoutingMap(\n        collectionLink,\n        diagnosticNode,\n      );\n    }\n    return this.collectionRoutingMapByCollectionId[collectionId];\n  }\n\n  /**\n   * Given the query ranges and a collection, invokes the callback on the list of overlapping partition key ranges\n   * @hidden\n   */\n  public async getOverlappingRanges(\n    collectionLink: string,\n    queryRange: QueryRange,\n    diagnosticNode: DiagnosticNodeInternal,\n    forceRefresh: boolean = false,\n  ): Promise<PartitionKeyRange[]> {\n    const crm = await this.onCollectionRoutingMap(collectionLink, diagnosticNode, forceRefresh);\n    return crm.getOverlappingRanges(queryRange);\n  }\n\n  private async requestCollectionRoutingMap(\n    collectionLink: string,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<InMemoryCollectionRoutingMap> {\n    const { resources } = await withMetadataDiagnostics(\n      async (metadataDiagnostics: DiagnosticNodeInternal) => {\n        return this.clientContext\n          .queryPartitionKeyRanges(collectionLink)\n          .fetchAllInternal(metadataDiagnostics);\n      },\n      diagnosticNode,\n      MetadataLookUpType.PartitionKeyRangeLookUp,\n    );\n    return createCompleteRoutingMap(resources.map((r) => [r, true]));\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../ClientContext\";\nimport { Constants } from \"../common/constants\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { PartitionKeyRangeCache } from \"./partitionKeyRangeCache\";\nimport { QueryRange } from \"./QueryRange\";\n\n/** @hidden */\nexport const PARITIONKEYRANGE = Constants.PartitionKeyRange;\n\n/** @hidden */\nexport class SmartRoutingMapProvider {\n  private partitionKeyRangeCache: PartitionKeyRangeCache;\n\n  constructor(clientContext: ClientContext) {\n    this.partitionKeyRangeCache = new PartitionKeyRangeCache(clientContext);\n  }\n  private static _secondRangeIsAfterFirstRange(range1: QueryRange, range2: QueryRange): boolean {\n    if (typeof range1.max === \"undefined\") {\n      throw new Error(\"range1 must have max\");\n    }\n\n    if (typeof range2.min === \"undefined\") {\n      throw new Error(\"range2 must have min\");\n    }\n\n    if (range1.max > range2.min) {\n      // r.min < #previous_r.max\n      return false;\n    } else {\n      if (range1.max === range2.min && range1.isMaxInclusive && range2.isMinInclusive) {\n        // the inclusive ending endpoint of previous_r is the same as the inclusive beginning endpoint of r\n        // they share a point\n        return false;\n      }\n      return true;\n    }\n  }\n\n  private static _isSortedAndNonOverlapping(ranges: QueryRange[]): boolean {\n    for (let idx = 1; idx < ranges.length; idx++) {\n      const previousR = ranges[idx - 1];\n      const r = ranges[idx];\n      if (!this._secondRangeIsAfterFirstRange(previousR, r)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static _stringMax(a: string, b: string): string {\n    return a >= b ? a : b;\n  }\n\n  private static _stringCompare(a: string, b: string): 1 | 0 | -1 {\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  private static _subtractRange(r: QueryRange, partitionKeyRange: any): QueryRange {\n    const left = this._stringMax(partitionKeyRange[PARITIONKEYRANGE.MaxExclusive], r.min);\n    const leftInclusive = this._stringCompare(left, r.min) === 0 ? r.isMinInclusive : false;\n    return new QueryRange(left, r.max, leftInclusive, r.isMaxInclusive);\n  }\n\n  /**\n   * Given the sorted ranges and a collection, invokes the callback on the list of overlapping partition key ranges\n   * @param callback - Function execute on the overlapping partition key ranges result,\n   *                   takes two parameters error, partition key ranges\n   * @hidden\n   */\n  public async getOverlappingRanges(\n    collectionLink: string,\n    sortedRanges: QueryRange[],\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<any[]> {\n    // validate if the list is non- overlapping and sorted                             TODO: any PartitionKeyRanges\n    if (!SmartRoutingMapProvider._isSortedAndNonOverlapping(sortedRanges)) {\n      throw new Error(\"the list of ranges is not a non-overlapping sorted ranges\");\n    }\n\n    let partitionKeyRanges: any[] = []; // TODO: any ParitionKeyRanges\n\n    if (sortedRanges.length === 0) {\n      return partitionKeyRanges;\n    }\n\n    const collectionRoutingMap = await this.partitionKeyRangeCache.onCollectionRoutingMap(\n      collectionLink,\n      diagnosticNode,\n    );\n\n    let index = 0;\n    let currentProvidedRange = sortedRanges[index];\n    for (;;) {\n      if (currentProvidedRange.isEmpty()) {\n        // skip and go to the next item\n        if (++index >= sortedRanges.length) {\n          return partitionKeyRanges;\n        }\n        currentProvidedRange = sortedRanges[index];\n        continue;\n      }\n\n      let queryRange;\n      if (partitionKeyRanges.length > 0) {\n        queryRange = SmartRoutingMapProvider._subtractRange(\n          currentProvidedRange,\n          partitionKeyRanges[partitionKeyRanges.length - 1],\n        );\n      } else {\n        queryRange = currentProvidedRange;\n      }\n\n      const overlappingRanges = collectionRoutingMap.getOverlappingRanges(queryRange);\n      if (overlappingRanges.length <= 0) {\n        throw new Error(`error: returned overlapping ranges for queryRange ${queryRange} is empty`);\n      }\n      partitionKeyRanges = partitionKeyRanges.concat(overlappingRanges);\n\n      const lastKnownTargetRange = QueryRange.parsePartitionKeyRange(\n        partitionKeyRanges[partitionKeyRanges.length - 1],\n      );\n      if (!lastKnownTargetRange) {\n        throw new Error(\"expected lastKnowTargetRange to be truthy\");\n      }\n      // the overlapping ranges must contain the requested range\n\n      if (\n        SmartRoutingMapProvider._stringCompare(currentProvidedRange.max, lastKnownTargetRange.max) >\n        0\n      ) {\n        throw new Error(`error: returned overlapping ranges ${overlappingRanges} \\\n        does not contain the requested range ${queryRange}`);\n      }\n\n      // the current range is contained in partitionKeyRanges just move forward\n      if (++index >= sortedRanges.length) {\n        return partitionKeyRanges;\n      }\n      currentProvidedRange = sortedRanges[index];\n\n      while (\n        SmartRoutingMapProvider._stringCompare(\n          currentProvidedRange.max,\n          lastKnownTargetRange.max,\n        ) <= 0\n      ) {\n        // the current range is covered too.just move forward\n        if (++index >= sortedRanges.length) {\n          return partitionKeyRanges;\n        }\n        currentProvidedRange = sortedRanges[index];\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ChangeFeedRange } from \"./ChangeFeedRange\";\n/**\n * @hidden\n * A queue for iterating over specified Epk ranges and fetch change feed for the given epk ranges.\n */\nexport class FeedRangeQueue<T> {\n  private elements: ChangeFeedRange[];\n\n  constructor() {\n    this.elements = [];\n  }\n\n  public modifyFirstElement(newItem: ChangeFeedRange): void {\n    if (!this.isEmpty()) {\n      this.elements[0] = newItem;\n    }\n  }\n\n  public enqueue(item: ChangeFeedRange): void {\n    this.elements.push(item);\n  }\n\n  public dequeue(): ChangeFeedRange {\n    return this.elements.shift();\n  }\n\n  public peek(): T | ChangeFeedRange {\n    return !this.isEmpty() ? this.elements[0] : undefined;\n  }\n\n  public isEmpty(): boolean {\n    return this.elements.length === 0;\n  }\n\n  public moveFirstElementToTheEnd(): void {\n    if (!this.isEmpty()) {\n      this.elements.push(this.dequeue());\n    }\n  }\n  /**\n   * Returns a snapshot of the queue as an array to be used as Continuation token.\n   */\n  public returnSnapshot(): ChangeFeedRange[] {\n    const allFeedRanges: ChangeFeedRange[] = [];\n    this.elements.map((element) => {\n      const minInclusive = element.epkMinHeader ? element.epkMinHeader : element.minInclusive;\n      const maxExclusive = element.epkMaxHeader ? element.epkMaxHeader : element.maxExclusive;\n      const feedRangeElement = new ChangeFeedRange(\n        minInclusive,\n        maxExclusive,\n        element.continuationToken,\n      );\n      allFeedRanges.push(feedRangeElement);\n    });\n    return allFeedRanges;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ChangeFeedRange } from \"./ChangeFeedRange\";\n/**\n * Continuation token for change feed of entire container, or a specific Epk Range.\n * @internal\n */\nexport class CompositeContinuationToken {\n  /**\n   * rid of the container for which the continuation token is issued.\n   */\n  public readonly rid: string;\n  /**\n   * List of Epk Ranges part of the continuation token\n   */\n  public readonly Continuation: ChangeFeedRange[];\n\n  constructor(rid: string, Continuation: ChangeFeedRange[]) {\n    this.rid = rid;\n    this.Continuation = Continuation;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKey } from \"../../documents\";\nimport type { FeedRange } from \"./FeedRange\";\n\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from beginning of time.\n */\nexport class ChangeFeedStartFromBeginning {\n  private cfResource?: PartitionKey | FeedRange;\n\n  constructor(cfResource?: PartitionKey | FeedRange) {\n    this.cfResource = cfResource;\n  }\n\n  public getCfResource(): PartitionKey | FeedRange | undefined {\n    return this.cfResource;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKey } from \"../../documents\";\nimport type { FeedRange } from \"./FeedRange\";\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from a particular point of time.\n */\nexport class ChangeFeedStartFromTime {\n  private cfResource?: PartitionKey | FeedRange;\n\n  private startTime: Date;\n\n  constructor(startTime: Date, cfResource?: PartitionKey | FeedRange) {\n    this.startTime = startTime;\n    this.cfResource = cfResource;\n  }\n\n  public getCfResource(): PartitionKey | FeedRange | undefined {\n    return this.cfResource;\n  }\n\n  public getStartTime(): Date {\n    return this.startTime;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ErrorResponse } from \"../../request\";\n\n/**\n * Specifies a feed range for the changefeed.\n */\nexport abstract class FeedRange {\n  /**\n   * Min value for the feed range.\n   */\n  readonly minInclusive: string;\n  /**\n   * Max value for the feed range.\n   */\n  readonly maxExclusive: string;\n  /**\n   * @internal\n   */\n  protected constructor(minInclusive: string, maxExclusive: string) {\n    // only way to explictly block users from creating FeedRange directly in JS\n    if (new.target === FeedRange) {\n      throw new ErrorResponse(\"Cannot instantiate abstract class FeedRange\");\n    }\n\n    this.minInclusive = minInclusive;\n    this.maxExclusive = maxExclusive;\n  }\n}\n\n/**\n * @hidden\n * Specifies a feed range for the changefeed.\n */\nexport class FeedRangeInternal extends FeedRange {\n  /* eslint-disable @typescript-eslint/no-useless-constructor */\n  constructor(minInclusive: string, maxExclusive: string) {\n    super(minInclusive, maxExclusive);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport const BytePrefix = {\n  Undefined: \"00\",\n  Null: \"01\",\n  False: \"02\",\n  True: \"03\",\n  MinNumber: \"04\",\n  Number: \"05\",\n  MaxNumber: \"06\",\n  MinString: \"07\",\n  String: \"08\",\n  MaxString: \"09\",\n  Int64: \"0a\",\n  Int32: \"0b\",\n  Int16: \"0c\",\n  Int8: \"0d\",\n  Uint64: \"0e\",\n  Uint32: \"0f\",\n  Uint16: \"10\",\n  Uint8: \"11\",\n  Binary: \"12\",\n  Guid: \"13\",\n  Float: \"14\",\n  Infinity: \"FF\",\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport JSBI from \"jsbi\";\nimport { BytePrefix } from \"./prefix\";\n\nexport function writeNumberForBinaryEncodingJSBI(hash: number): Buffer {\n  let payload = encodeNumberAsUInt64JSBI(hash);\n  let outputStream = Buffer.from(BytePrefix.Number, \"hex\");\n  const firstChunk = JSBI.asUintN(64, JSBI.signedRightShift(payload, JSBI.BigInt(56)));\n\n  outputStream = Buffer.concat([outputStream, Buffer.from(firstChunk.toString(16), \"hex\")]);\n  payload = JSBI.asUintN(64, JSBI.leftShift(JSBI.BigInt(payload), JSBI.BigInt(0x8)));\n\n  let byteToWrite = JSBI.BigInt(0);\n  let firstIteration = false;\n  let shifted: JSBI;\n  let padded: string;\n\n  do {\n    if (!firstIteration) {\n      // we pad because after shifting because we will produce characters like \"f\" or similar,\n      // which cannot be encoded as hex in a buffer because they are invalid hex\n      // https://github.com/nodejs/node/issues/24491\n      padded = byteToWrite.toString(16).padStart(2, \"0\");\n      if (padded !== \"00\") {\n        outputStream = Buffer.concat([outputStream, Buffer.from(padded, \"hex\")]);\n      }\n    } else {\n      firstIteration = false;\n    }\n\n    shifted = JSBI.asUintN(64, JSBI.signedRightShift(payload, JSBI.BigInt(56)));\n    byteToWrite = JSBI.asUintN(64, JSBI.bitwiseOr(shifted, JSBI.BigInt(0x01)));\n    payload = JSBI.asUintN(64, JSBI.leftShift(payload, JSBI.BigInt(7)));\n  } while (JSBI.notEqual(payload, JSBI.BigInt(0)));\n\n  const lastChunk = JSBI.asUintN(64, JSBI.bitwiseAnd(byteToWrite, JSBI.BigInt(0xfe)));\n  // we pad because after shifting because we will produce characters like \"f\" or similar,\n  // which cannot be encoded as hex in a buffer because they are invalid hex\n  // https://github.com/nodejs/node/issues/24491\n  padded = lastChunk.toString(16).padStart(2, \"0\");\n  if (padded !== \"00\") {\n    outputStream = Buffer.concat([outputStream, Buffer.from(padded, \"hex\")]);\n  }\n\n  return outputStream;\n}\n\nfunction encodeNumberAsUInt64JSBI(value: number): JSBI {\n  const rawValueBits = getRawBitsJSBI(value);\n  const mask = JSBI.BigInt(0x8000000000000000);\n  const returned = JSBI.greaterThan(mask, rawValueBits)\n    ? JSBI.bitwiseXor(rawValueBits, mask)\n    : JSBI.add(JSBI.bitwiseNot(rawValueBits), JSBI.BigInt(1));\n  return returned;\n}\n\nexport function doubleToByteArrayJSBI(double: number): Buffer {\n  const output: Buffer = Buffer.alloc(8);\n  const lng = getRawBitsJSBI(double);\n  for (let i = 0; i < 8; i++) {\n    output[i] = JSBI.toNumber(\n      JSBI.bitwiseAnd(\n        JSBI.signedRightShift(lng, JSBI.multiply(JSBI.BigInt(i), JSBI.BigInt(8))),\n        JSBI.BigInt(0xff),\n      ),\n    );\n  }\n  return output;\n}\n\nfunction getRawBitsJSBI(value: number): JSBI {\n  const view = new DataView(new ArrayBuffer(8));\n  view.setFloat64(0, value);\n  return JSBI.BigInt(`0x${buf2hex(view.buffer)}`);\n}\n\nfunction buf2hex(buffer: ArrayBuffer): string {\n  return Array.prototype.map\n    .call(new Uint8Array(buffer), (x: number) => (\"00\" + x.toString(16)).slice(-2))\n    .join(\"\");\n}\n","// +----------------------------------------------------------------------+\n// | murmurHash3js.js v3.0.1 // https://github.com/pid/murmurHash3js\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012-2015 Karan Lyons                                       |\n// | https://github.com/karanlyons/murmurHash3.js/blob/c1778f75792abef7bdd74bc85d2d4e1a3d25cfe9/murmurHash3.js |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n// PRIVATE FUNCTIONS\n// -----------------\n\nfunction _x86Multiply(m: number, n: number) {\n  //\n  // Given two 32bit ints, returns the two multiplied together as a\n  // 32bit int.\n  //\n\n  return (m & 0xffff) * n + ((((m >>> 16) * n) & 0xffff) << 16);\n}\n\nfunction _x86Rotl(m: number, n: number) {\n  //\n  // Given a 32bit int and an int representing a number of bit positions,\n  // returns the 32bit int rotated left by that number of positions.\n  //\n\n  return (m << n) | (m >>> (32 - n));\n}\n\nfunction _x86Fmix(h: number) {\n  //\n  // Given a block, returns murmurHash3's final x86 mix of that block.\n  //\n\n  h ^= h >>> 16;\n  h = _x86Multiply(h, 0x85ebca6b);\n  h ^= h >>> 13;\n  h = _x86Multiply(h, 0xc2b2ae35);\n  h ^= h >>> 16;\n\n  return h;\n}\n\nfunction _x64Add(m: number[], n: number[]) {\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // added together as a 64bit int (as an array of two 32bit ints).\n  //\n\n  m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n  n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n  const o = [0, 0, 0, 0];\n\n  o[3] += m[3] + n[3];\n  o[2] += o[3] >>> 16;\n  o[3] &= 0xffff;\n\n  o[2] += m[2] + n[2];\n  o[1] += o[2] >>> 16;\n  o[2] &= 0xffff;\n\n  o[1] += m[1] + n[1];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[0] += m[0] + n[0];\n  o[0] &= 0xffff;\n\n  return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n}\n\nfunction _x64Multiply(m: number[], n: number[]) {\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // multiplied together as a 64bit int (as an array of two 32bit ints).\n  //\n\n  m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n  n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n  const o = [0, 0, 0, 0];\n\n  o[3] += m[3] * n[3];\n  o[2] += o[3] >>> 16;\n  o[3] &= 0xffff;\n\n  o[2] += m[2] * n[3];\n  o[1] += o[2] >>> 16;\n  o[2] &= 0xffff;\n\n  o[2] += m[3] * n[2];\n  o[1] += o[2] >>> 16;\n  o[2] &= 0xffff;\n\n  o[1] += m[1] * n[3];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[1] += m[2] * n[2];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[1] += m[3] * n[1];\n  o[0] += o[1] >>> 16;\n  o[1] &= 0xffff;\n\n  o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];\n  o[0] &= 0xffff;\n\n  return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n}\n\nfunction _x64Rotl(m: number[], n: number) {\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) rotated left by that number of positions.\n  //\n\n  n %= 64;\n\n  if (n === 32) {\n    return [m[1], m[0]];\n  } else if (n < 32) {\n    return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n  } else {\n    n -= 32;\n    return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n  }\n}\n\nfunction _x64LeftShift(m: number[], n: number) {\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) shifted left by that number of positions.\n  //\n\n  n %= 64;\n\n  if (n === 0) {\n    return m;\n  } else if (n < 32) {\n    return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n  } else {\n    return [m[1] << (n - 32), 0];\n  }\n}\n\nfunction _x64Xor(m: number[], n: number[]) {\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // xored together as a 64bit int (as an array of two 32bit ints).\n  //\n\n  return [m[0] ^ n[0], m[1] ^ n[1]];\n}\n\nfunction _x64Fmix(h: number[]) {\n  //\n  // Given a block, returns murmurHash3's final x64 mix of that block.\n  // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n  // only place where we need to right shift 64bit ints.)\n  //\n\n  h = _x64Xor(h, [0, h[0] >>> 1]);\n  h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n  h = _x64Xor(h, [0, h[0] >>> 1]);\n  h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n  h = _x64Xor(h, [0, h[0] >>> 1]);\n\n  return h;\n}\n\n// PUBLIC FUNCTIONS\n// ----------------\n\nfunction x86Hash32(bytes: Buffer, seed?: number) {\n  //\n  // Given a string and an optional seed as an int, returns a 32 bit hash\n  // using the x86 flavor of MurmurHash3, as an unsigned int.\n  //\n  seed = seed || 0;\n\n  const remainder = bytes.length % 4;\n  const blocks = bytes.length - remainder;\n\n  let h1 = seed;\n\n  let k1 = 0;\n\n  const c1 = 0xcc9e2d51;\n  const c2 = 0x1b873593;\n  let j = 0;\n\n  for (let i = 0; i < blocks; i = i + 4) {\n    k1 = bytes[i] | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n\n    k1 = _x86Multiply(k1, c1);\n    k1 = _x86Rotl(k1, 15);\n    k1 = _x86Multiply(k1, c2);\n\n    h1 ^= k1;\n    h1 = _x86Rotl(h1, 13);\n    h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    j = i + 4;\n  }\n\n  k1 = 0;\n\n  switch (remainder) {\n    case 3:\n      k1 ^= bytes[j + 2] << 16;\n\n    case 2:\n      k1 ^= bytes[j + 1] << 8;\n\n    case 1:\n      k1 ^= bytes[j];\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= bytes.length;\n  h1 = _x86Fmix(h1);\n\n  return h1 >>> 0;\n}\n\nfunction x86Hash128(bytes: Buffer, seed?: number) {\n  //\n  // Given a string and an optional seed as an int, returns a 128 bit\n  // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n  //\n\n  seed = seed || 0;\n  const remainder = bytes.length % 16;\n  const blocks = bytes.length - remainder;\n\n  let h1 = seed;\n  let h2 = seed;\n  let h3 = seed;\n  let h4 = seed;\n\n  let k1 = 0;\n  let k2 = 0;\n  let k3 = 0;\n  let k4 = 0;\n\n  const c1 = 0x239b961b;\n  const c2 = 0xab0e9789;\n  const c3 = 0x38b34ae5;\n  const c4 = 0xa1e38b93;\n  let j = 0;\n\n  for (let i = 0; i < blocks; i = i + 16) {\n    k1 = bytes[i] | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);\n    k2 = bytes[i + 4] | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);\n    k3 = bytes[i + 8] | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);\n    k4 = bytes[i + 12] | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);\n\n    k1 = _x86Multiply(k1, c1);\n    k1 = _x86Rotl(k1, 15);\n    k1 = _x86Multiply(k1, c2);\n    h1 ^= k1;\n\n    h1 = _x86Rotl(h1, 19);\n    h1 += h2;\n    h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n    k2 = _x86Multiply(k2, c2);\n    k2 = _x86Rotl(k2, 16);\n    k2 = _x86Multiply(k2, c3);\n    h2 ^= k2;\n\n    h2 = _x86Rotl(h2, 17);\n    h2 += h3;\n    h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n    k3 = _x86Multiply(k3, c3);\n    k3 = _x86Rotl(k3, 17);\n    k3 = _x86Multiply(k3, c4);\n    h3 ^= k3;\n\n    h3 = _x86Rotl(h3, 15);\n    h3 += h4;\n    h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n    k4 = _x86Multiply(k4, c4);\n    k4 = _x86Rotl(k4, 18);\n    k4 = _x86Multiply(k4, c1);\n    h4 ^= k4;\n\n    h4 = _x86Rotl(h4, 13);\n    h4 += h1;\n    h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    j = i + 16;\n  }\n\n  k1 = 0;\n  k2 = 0;\n  k3 = 0;\n  k4 = 0;\n\n  switch (remainder) {\n    case 15:\n      k4 ^= bytes[j + 14] << 16;\n\n    case 14:\n      k4 ^= bytes[j + 13] << 8;\n\n    case 13:\n      k4 ^= bytes[j + 12];\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n    case 12:\n      k3 ^= bytes[j + 11] << 24;\n\n    case 11:\n      k3 ^= bytes[j + 10] << 16;\n\n    case 10:\n      k3 ^= bytes[j + 9] << 8;\n\n    case 9:\n      k3 ^= bytes[j + 8];\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n    case 8:\n      k2 ^= bytes[j + 7] << 24;\n\n    case 7:\n      k2 ^= bytes[j + 6] << 16;\n\n    case 6:\n      k2 ^= bytes[j + 5] << 8;\n\n    case 5:\n      k2 ^= bytes[j + 4];\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n    case 4:\n      k1 ^= bytes[j + 3] << 24;\n\n    case 3:\n      k1 ^= bytes[j + 2] << 16;\n\n    case 2:\n      k1 ^= bytes[j + 1] << 8;\n\n    case 1:\n      k1 ^= bytes[j];\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n  }\n\n  h1 ^= bytes.length;\n  h2 ^= bytes.length;\n  h3 ^= bytes.length;\n  h4 ^= bytes.length;\n\n  h1 += h2;\n  h1 += h3;\n  h1 += h4;\n  h2 += h1;\n  h3 += h1;\n  h4 += h1;\n\n  h1 = _x86Fmix(h1);\n  h2 = _x86Fmix(h2);\n  h3 = _x86Fmix(h3);\n  h4 = _x86Fmix(h4);\n\n  h1 += h2;\n  h1 += h3;\n  h1 += h4;\n  h2 += h1;\n  h3 += h1;\n  h4 += h1;\n\n  return (\n    (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) +\n    (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) +\n    (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) +\n    (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8)\n  );\n}\n\nfunction x64Hash128(bytes: Buffer, seed?: number) {\n  //\n  // Given a string and an optional seed as an int, returns a 128 bit\n  // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n  //\n  seed = seed || 0;\n\n  const remainder = bytes.length % 16;\n  const blocks = bytes.length - remainder;\n\n  let h1 = [0, seed];\n  let h2 = [0, seed];\n\n  let k1 = [0, 0];\n  let k2 = [0, 0];\n\n  const c1 = [0x87c37b91, 0x114253d5];\n  const c2 = [0x4cf5ad43, 0x2745937f];\n  let j = 0;\n\n  for (let i = 0; i < blocks; i = i + 16) {\n    k1 = [\n      bytes[i + 4] | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24),\n      bytes[i] | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24),\n    ];\n    k2 = [\n      bytes[i + 12] | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24),\n      bytes[i + 8] | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24),\n    ];\n\n    k1 = _x64Multiply(k1, c1);\n    k1 = _x64Rotl(k1, 31);\n    k1 = _x64Multiply(k1, c2);\n    h1 = _x64Xor(h1, k1);\n\n    h1 = _x64Rotl(h1, 27);\n    h1 = _x64Add(h1, h2);\n    h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n    k2 = _x64Multiply(k2, c2);\n    k2 = _x64Rotl(k2, 33);\n    k2 = _x64Multiply(k2, c1);\n    h2 = _x64Xor(h2, k2);\n\n    h2 = _x64Rotl(h2, 31);\n    h2 = _x64Add(h2, h1);\n    h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    j = i + 16;\n  }\n\n  k1 = [0, 0];\n  k2 = [0, 0];\n\n  switch (remainder) {\n    case 15:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 14]], 48));\n\n    case 14:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 13]], 40));\n\n    case 13:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 12]], 32));\n\n    case 12:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 11]], 24));\n\n    case 11:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 10]], 16));\n\n    case 10:\n      k2 = _x64Xor(k2, _x64LeftShift([0, bytes[j + 9]], 8));\n\n    case 9:\n      k2 = _x64Xor(k2, [0, bytes[j + 8]]);\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n    case 8:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 7]], 56));\n\n    case 7:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 6]], 48));\n\n    case 6:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 5]], 40));\n\n    case 5:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 4]], 32));\n\n    case 4:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 3]], 24));\n\n    case 3:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 2]], 16));\n\n    case 2:\n      k1 = _x64Xor(k1, _x64LeftShift([0, bytes[j + 1]], 8));\n\n    case 1:\n      k1 = _x64Xor(k1, [0, bytes[j]]);\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n  }\n\n  h1 = _x64Xor(h1, [0, bytes.length]);\n  h2 = _x64Xor(h2, [0, bytes.length]);\n\n  h1 = _x64Add(h1, h2);\n  h2 = _x64Add(h2, h1);\n\n  h1 = _x64Fmix(h1);\n  h2 = _x64Fmix(h2);\n\n  h1 = _x64Add(h1, h2);\n  h2 = _x64Add(h2, h1);\n\n  // Here we reverse h1 and h2 in Cosmos\n  // This is an implementation detail and not part of the public spec\n  const h1Buff = Buffer.from(\n    (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) +\n      (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8),\n    \"hex\",\n  );\n  const h1Reversed = reverse(h1Buff).toString(\"hex\");\n  const h2Buff = Buffer.from(\n    (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) +\n      (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8),\n    \"hex\",\n  );\n  const h2Reversed = reverse(h2Buff).toString(\"hex\");\n  return h1Reversed + h2Reversed;\n}\n\nexport function reverse(buff: Buffer) {\n  const buffer = Buffer.allocUnsafe(buff.length);\n\n  for (let i = 0, j = buff.length - 1; i <= j; ++i, --j) {\n    buffer[i] = buff[j];\n    buffer[j] = buff[i];\n  }\n  return buffer;\n}\n\nexport default {\n  version: \"3.0.0\",\n  x86: {\n    hash32: x86Hash32,\n    hash128: x86Hash128,\n  },\n  x64: {\n    hash128: x64Hash128,\n  },\n  inputValidation: true,\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PrimitivePartitionKeyValue } from \"../../documents\";\nimport { doubleToByteArrayJSBI } from \"./encoding/number\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\n\nexport function hashV2PartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  const toHash: Buffer = Buffer.concat(partitionKey.map(prefixKeyByType));\n  const hash = MurmurHash.x64.hash128(toHash);\n  const reverseBuff: Buffer = reverse(Buffer.from(hash, \"hex\"));\n  reverseBuff[0] &= 0x3f;\n  return reverseBuff.toString(\"hex\").toUpperCase();\n}\n\nfunction prefixKeyByType(key: PrimitivePartitionKeyValue): Buffer {\n  let bytes: Buffer;\n  switch (typeof key) {\n    case \"string\": {\n      bytes = Buffer.concat([\n        Buffer.from(BytePrefix.String, \"hex\"),\n        Buffer.from(key),\n        Buffer.from(BytePrefix.Infinity, \"hex\"),\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayJSBI(key);\n      bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\": {\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    case \"undefined\": {\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nexport function reverse(buff: Buffer): Buffer {\n  const buffer = Buffer.allocUnsafe(buff.length);\n\n  for (let i = 0, j = buff.length - 1; i <= j; ++i, --j) {\n    buffer[i] = buff[j];\n    buffer[j] = buff[i];\n  }\n  return buffer;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport enum ChangeFeedMode {\n  LatestVersion = \"Incremental Feed\",\n  AllVersionsAndDeletes = \"Full-Fidelity Feed\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { ErrorResponse } from \"../../request\";\nimport type { PartitionKeyRange } from \"../Container\";\nimport type { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { isPrimitivePartitionKeyValue } from \"../../utils/typeChecks\";\nimport type { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { Constants } from \"../../common\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { QueryRange } from \"../../routing\";\nimport { FeedRangeInternal } from \"./FeedRange\";\nimport { hashV2PartitionKey } from \"../../utils/hashing/v2\";\nimport { PartitionKeyInternal } from \"../../documents/PartitionKeyInternal\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { EncryptionProcessor } from \"../../encryption\";\nimport { ChangeFeedMode } from \"./ChangeFeedMode\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\n\n/**\n * @hidden\n * Validates the change feed options passed by the user\n */\nexport function validateChangeFeedIteratorOptions(options: ChangeFeedIteratorOptions): void {\n  if (!isChangeFeedIteratorOptions(options)) {\n    throw new ErrorResponse(\"Invalid Changefeed Iterator Options.\");\n  }\n  if (options?.maxItemCount && typeof options?.maxItemCount !== \"number\") {\n    throw new ErrorResponse(\"maxItemCount must be number\");\n  }\n  if (options?.maxItemCount !== undefined && options?.maxItemCount < 1) {\n    throw new ErrorResponse(\"maxItemCount must be a positive number\");\n  }\n}\n\nfunction isChangeFeedIteratorOptions(options: unknown): options is ChangeFeedIteratorOptions {\n  if (typeof options !== \"object\") {\n    return false;\n  }\n  if (Object.keys(options).length === 0 && JSON.stringify(options) === \"{}\") {\n    return true;\n  }\n  return options && !(isPrimitivePartitionKeyValue(options) || Array.isArray(options));\n}\n\n/**\n * @hidden\n * Checks if pkRange entirely covers the given overLapping range or there is only partial overlap.\n *\n * If no complete overlap, exact range which overlaps is retured which is used to set minEpk and maxEpk headers while quering change feed.\n */\nexport async function extractOverlappingRanges(\n  epkRange: QueryRange,\n  overLappingRange: PartitionKeyRange,\n): Promise<[string, string]> {\n  if (\n    overLappingRange.minInclusive >= epkRange.min &&\n    overLappingRange.maxExclusive <= epkRange.max\n  ) {\n    return [undefined, undefined];\n  } else if (\n    overLappingRange.minInclusive <= epkRange.min &&\n    overLappingRange.maxExclusive >= epkRange.max\n  ) {\n    return [epkRange.min, epkRange.max];\n  }\n  // Right Side of overlapping range is covered\n  else if (\n    overLappingRange.minInclusive <= epkRange.min &&\n    overLappingRange.maxExclusive <= epkRange.max &&\n    overLappingRange.maxExclusive >= epkRange.min\n  ) {\n    return [epkRange.min, overLappingRange.maxExclusive];\n  }\n  // Left Side of overlapping range is covered\n  else {\n    return [overLappingRange.minInclusive, epkRange.max];\n  }\n}\n\n/**\n * @hidden\n * Checks if the object is a valid EpkRange\n */\nexport function isEpkRange(obj: unknown): boolean {\n  return (\n    obj instanceof FeedRangeInternal &&\n    typeof obj.minInclusive === \"string\" &&\n    typeof obj.maxExclusive === \"string\" &&\n    obj.minInclusive >=\n      Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey &&\n    obj.maxExclusive <=\n      Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey &&\n    obj.maxExclusive > obj.minInclusive\n  );\n}\n\n/**\n * @hidden\n */\nexport function buildInternalChangeFeedOptions(\n  options: ChangeFeedIteratorOptions,\n  continuationToken?: string,\n  startTime?: Date,\n  startFromNow?: boolean,\n): InternalChangeFeedIteratorOptions {\n  const internalCfOptions = {} as InternalChangeFeedIteratorOptions;\n  internalCfOptions.maxItemCount = options?.maxItemCount;\n  internalCfOptions.sessionToken = options?.sessionToken;\n  internalCfOptions.continuationToken = continuationToken;\n  internalCfOptions.changeFeedMode = options?.changeFeedMode;\n  // Default option of changefeed is to start from now.\n  if (startFromNow) {\n    internalCfOptions.startFromNow = true;\n  } else {\n    internalCfOptions.startTime = startTime;\n  }\n  return internalCfOptions;\n}\n/**\n * @hidden\n */\nexport function fetchStartTime(changeFeedStartFrom: ChangeFeedStartFrom): Date | undefined {\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromBeginning) {\n    return undefined;\n  } else if (changeFeedStartFrom instanceof ChangeFeedStartFromTime) {\n    return changeFeedStartFrom.getStartTime();\n  }\n}\n\n/**\n * @hidden\n */\nexport function isNullOrEmpty(text: string | null | undefined): boolean {\n  return text === null || text === undefined || text.trim() === \"\";\n}\n\n/**\n * @hidden\n */\nexport async function getEPKRangeForPrefixPartitionKey(\n  internalPartitionKey: PartitionKeyInternal,\n): Promise<QueryRange> {\n  const minEPK = getEffectivePartitionKeyForMultiHashPartitioning(internalPartitionKey);\n  const maxEPK =\n    minEPK + Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey;\n  return new QueryRange(minEPK, maxEPK, true, false);\n}\n\n/**\n * @hidden\n */\nexport function getEffectivePartitionKeyForMultiHashPartitioning(\n  partitionKeyInternal: PartitionKeyInternal,\n): string {\n  const hashArray = partitionKeyInternal.map((item) => hashV2PartitionKey([item]));\n  return hashArray.join(\"\");\n}\n\n/**\n * @hidden\n */\nexport async function decryptChangeFeedResponse(\n  result: ChangeFeedIteratorResponse<any>,\n  diagnosticNode: DiagnosticNodeInternal,\n  changeFeedMode: ChangeFeedMode,\n  encryptionProcessor: EncryptionProcessor,\n): Promise<void> {\n  let count = 0;\n  diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation);\n  for (let item of result.result) {\n    if (changeFeedMode === ChangeFeedMode.AllVersionsAndDeletes) {\n      if (\"current\" in item && item.current !== null) {\n        const { body, propertiesDecryptedCount } = await encryptionProcessor.decrypt(item.current);\n        item.current = body;\n        count += propertiesDecryptedCount;\n      }\n      if (\"previous\" in item && item.previous !== null) {\n        const { body, propertiesDecryptedCount } = await encryptionProcessor.decrypt(item.previous);\n        item.previous = body;\n        count += propertiesDecryptedCount;\n      }\n    } else {\n      const { body, propertiesDecryptedCount } = await encryptionProcessor.decrypt(item);\n      item = body;\n      count += propertiesDecryptedCount;\n    }\n  }\n  diagnosticNode.endEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation, count);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ChangeFeedRange } from \"./ChangeFeedRange\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport type { PartitionKeyRangeCache } from \"../../routing\";\nimport { QueryRange } from \"../../routing\";\nimport { FeedRangeQueue } from \"./FeedRangeQueue\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { Container, Resource } from \"../../client\";\nimport { Constants, SubStatusCodes, StatusCodes, ResourceType } from \"../../common\";\nimport type { Response, FeedOptions } from \"../../request\";\nimport { ErrorResponse } from \"../../request\";\nimport { CompositeContinuationToken } from \"./CompositeContinuationToken\";\nimport type { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport { decryptChangeFeedResponse, extractOverlappingRanges } from \"./changeFeedUtils\";\nimport type { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { ChangeFeedMode } from \"./ChangeFeedMode\";\n/**\n * @hidden\n * Provides iterator for change feed for entire container or an epk range.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForEpkRange<T> implements ChangeFeedPullModelIterator<T> {\n  private continuationToken?: CompositeContinuationToken;\n  private queue: FeedRangeQueue<ChangeFeedRange>;\n  private startTime: string;\n  private isInstantiated: boolean;\n  private rId: string;\n  private startFromNow: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private container: Container,\n    private partitionKeyRangeCache: PartitionKeyRangeCache,\n    private resourceId: string,\n    private resourceLink: string,\n    private url: string,\n    private changeFeedOptions: InternalChangeFeedIteratorOptions,\n    private epkRange: QueryRange,\n  ) {\n    this.queue = new FeedRangeQueue<ChangeFeedRange>();\n    this.continuationToken = changeFeedOptions.continuationToken\n      ? JSON.parse(changeFeedOptions.continuationToken)\n      : undefined;\n    this.isInstantiated = false;\n    // startTime is used to store and specify time from which change feed should start reading new changes. StartFromNow flag is used to indicate fetching changes from now.\n    if (changeFeedOptions.startFromNow) {\n      this.startFromNow = true;\n    } else if (changeFeedOptions.startTime) {\n      this.startTime = changeFeedOptions.startTime.toUTCString();\n    }\n  }\n\n  private async setIteratorRid(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    const { resource } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n\n  private continuationTokenRidMatchContainerRid(): boolean {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n\n  private async fillChangeFeedQueue(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (this.continuationToken) {\n      // fill the queue with feed ranges in continuation token.\n      await this.fetchContinuationTokenFeedRanges(diagnosticNode);\n    } else {\n      // fill the queue with feed ranges overlapping the given epk range.\n      await this.fetchOverLappingFeedRanges(diagnosticNode);\n    }\n    this.isInstantiated = true;\n  }\n\n  /**\n   * Fill the queue with the feed ranges overlapping with the given epk range.\n   */\n  private async fetchOverLappingFeedRanges(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    try {\n      const overLappingRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n        this.url,\n        this.epkRange,\n        diagnosticNode,\n      );\n      for (const overLappingRange of overLappingRanges) {\n        const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n          this.epkRange,\n          overLappingRange,\n        );\n        const feedRange: ChangeFeedRange = new ChangeFeedRange(\n          overLappingRange.minInclusive,\n          overLappingRange.maxExclusive,\n          \"\",\n          epkMinHeader,\n          epkMaxHeader,\n        );\n        this.queue.enqueue(feedRange);\n      }\n    } catch (err) {\n      throw new ErrorResponse(err.message);\n    }\n  }\n  /**\n   * Fill the queue with feed ranges from continuation token\n   */\n  private async fetchContinuationTokenFeedRanges(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<void> {\n    const contToken = this.continuationToken;\n    if (!this.continuationTokenRidMatchContainerRid()) {\n      throw new ErrorResponse(\"The continuation token is not for the current container definition\");\n    } else {\n      for (const cToken of contToken.Continuation) {\n        const queryRange = new QueryRange(cToken.minInclusive, cToken.maxExclusive, true, false);\n        try {\n          const overLappingRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n            this.url,\n            queryRange,\n            diagnosticNode,\n          );\n          for (const overLappingRange of overLappingRanges) {\n            // check if the epk range present in continuation token entirely covers the overlapping range.\n            // If yes, minInclusive and maxExclusive of the overlapping range will be set.\n            // If no, i.e. there is only partial overlap, epkMinHeader and epkMaxHeader are set as min and max of overlap.\n            // This will be used when we make a call to fetch change feed.\n            const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n              queryRange,\n              overLappingRange,\n            );\n            const feedRange: ChangeFeedRange = new ChangeFeedRange(\n              overLappingRange.minInclusive,\n              overLappingRange.maxExclusive,\n              cToken.continuationToken,\n              epkMinHeader,\n              epkMaxHeader,\n            );\n            this.queue.enqueue(feedRange);\n          }\n        } catch (err) {\n          throw new ErrorResponse(err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   *\n   * Keeps iterating over the feedranges and checks if any feed range has new result. Keeps note of the last feed range which returned non 304 result.\n   *\n   * When same feed range is reached and no new changes are found, a 304 (not Modified) is returned to the end user. Then starts process all over again.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      // validate if the internal queue is filled up with feed ranges.\n      if (!this.isInstantiated) {\n        await this.setIteratorRid(diagnosticNode);\n        await this.fillChangeFeedQueue(diagnosticNode);\n      }\n\n      // stores the last feedRange for which statusCode is not 304 i.e. there were new changes in that feed range.\n      let firstNotModifiedFeedRange: [string, string] = undefined;\n      let result: ChangeFeedIteratorResponse<Array<T & Resource>>;\n      do {\n        const [processedFeedRange, response] = await this.fetchNext(diagnosticNode);\n        result = response;\n\n        if (result !== undefined) {\n          {\n            if (firstNotModifiedFeedRange === undefined) {\n              firstNotModifiedFeedRange = processedFeedRange;\n            }\n            // move current feed range to end of queue to fetch result of next feed range.\n            // This is done to fetch changes in breadth first manner and avoid starvation.\n            this.queue.moveFirstElementToTheEnd();\n            // check if there are new results for the given feed range.\n            if (result.statusCode === StatusCodes.Ok) {\n              result.headers[Constants.HttpHeaders.ContinuationToken] =\n                this.generateContinuationToken();\n\n              if (this.clientContext.enableEncryption) {\n                await decryptChangeFeedResponse(\n                  result,\n                  diagnosticNode,\n                  this.changeFeedOptions.changeFeedMode,\n                  this.container.encryptionProcessor,\n                );\n              }\n              return result;\n            }\n          }\n        }\n      } while (!this.checkedAllFeedRanges(firstNotModifiedFeedRange));\n      // set the continuation token after processing.\n      result.headers[Constants.HttpHeaders.ContinuationToken] = this.generateContinuationToken();\n      return result;\n    }, this.clientContext);\n  }\n\n  private generateContinuationToken = (): string => {\n    return JSON.stringify(new CompositeContinuationToken(this.rId, this.queue.returnSnapshot()));\n  };\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  private async fetchNext(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<[[string, string], ChangeFeedIteratorResponse<Array<T & Resource>>]> {\n    const feedRange = this.queue.peek();\n    if (feedRange) {\n      // fetch results for feed range at the beginning of the queue.\n      const result = await this.getFeedResponse(feedRange, diagnosticNode);\n\n      // check if results need to be fetched again depending on status code returned.\n      // Eg. in case of paritionSplit, results need to be fetched for the child partitions.\n      const shouldRetry: boolean = await this.shouldRetryOnFailure(\n        feedRange,\n        result,\n        diagnosticNode,\n      );\n\n      if (shouldRetry) {\n        this.queue.dequeue();\n        return this.fetchNext(diagnosticNode);\n      } else {\n        // update the continuation value for the current feed range.\n        const continuationValueForFeedRange = result.headers[Constants.HttpHeaders.ETag];\n        const newFeedRange = this.queue.peek();\n        newFeedRange.continuationToken = continuationValueForFeedRange;\n\n        return [[newFeedRange.minInclusive, newFeedRange.maxExclusive], result];\n      }\n    } else {\n      return [[undefined, undefined], undefined];\n    }\n  }\n\n  private checkedAllFeedRanges(firstNotModifiedFeedRange: [string, string]): boolean {\n    if (firstNotModifiedFeedRange === undefined) {\n      return false;\n    }\n    const feedRangeQueueFirstElement = this.queue.peek();\n    return (\n      firstNotModifiedFeedRange[0] === feedRangeQueueFirstElement?.minInclusive &&\n      firstNotModifiedFeedRange[1] === feedRangeQueueFirstElement?.maxExclusive\n    );\n  }\n\n  /**\n   * Checks whether the current EpkRange is split into multiple ranges or not.\n   *\n   * If yes, it force refreshes the partitionKeyRange cache and enqueue children epk ranges.\n   */\n  private async shouldRetryOnFailure(\n    feedRange: ChangeFeedRange,\n    response: ChangeFeedIteratorResponse<Array<T & Resource>>,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<boolean> {\n    if (response.statusCode === StatusCodes.Ok || response.statusCode === StatusCodes.NotModified) {\n      return false;\n    }\n\n    const partitionSplit =\n      response.statusCode === StatusCodes.Gone &&\n      (response.subStatusCode === SubStatusCodes.PartitionKeyRangeGone ||\n        response.subStatusCode === SubStatusCodes.CompletingSplit);\n\n    if (partitionSplit) {\n      const queryRange = new QueryRange(\n        feedRange.epkMinHeader ? feedRange.epkMinHeader : feedRange.minInclusive,\n        feedRange.epkMaxHeader ? feedRange.epkMaxHeader : feedRange.maxExclusive,\n        true,\n        false,\n      );\n      const resolvedRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n        this.url,\n        queryRange,\n        diagnosticNode,\n        true,\n      );\n      if (resolvedRanges.length < 1) {\n        throw new ErrorResponse(\"Partition split/merge detected but no overlapping ranges found.\");\n      }\n      // This covers both cases of merge and split.\n      // resolvedRanges.length > 1 in case of split.\n      // resolvedRanges.length === 1 in case of merge. EpkRange headers will be added in this case.\n      if (resolvedRanges.length >= 1) {\n        await this.handleSplit(false, resolvedRanges, queryRange, feedRange.continuationToken);\n      }\n      return true;\n    }\n    return false;\n  }\n  /*\n   * Enqueues all the children feed ranges for the given feed range.\n   */\n  private async handleSplit(\n    shiftLeft: boolean,\n    resolvedRanges: any,\n    oldFeedRange: QueryRange,\n    continuationToken: string,\n  ): Promise<void> {\n    let flag = 0;\n    if (shiftLeft) {\n      // This section is only applicable when handleSplit is called by getPartitionRangeId().\n      // used only when existing partition key range cache is used to check for any overlapping ranges.\n      // Modifies the first element with the first overlapping range.\n      const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n        oldFeedRange,\n        resolvedRanges[0],\n      );\n      const newFeedRange = new ChangeFeedRange(\n        resolvedRanges[0].minInclusive,\n        resolvedRanges[0].maxExclusive,\n        continuationToken,\n        epkMinHeader,\n        epkMaxHeader,\n      );\n\n      this.queue.modifyFirstElement(newFeedRange);\n      flag = 1;\n    }\n    // Enqueue the overlapping ranges.\n    for (let i = flag; i < resolvedRanges.length; i++) {\n      const [epkMinHeader, epkMaxHeader] = await extractOverlappingRanges(\n        oldFeedRange,\n        resolvedRanges[i],\n      );\n      const newFeedRange = new ChangeFeedRange(\n        resolvedRanges[i].minInclusive,\n        resolvedRanges[i].maxExclusive,\n        continuationToken,\n        epkMinHeader,\n        epkMaxHeader,\n      );\n      this.queue.enqueue(newFeedRange);\n    }\n  }\n\n  /**\n   * Fetch the partitionKeyRangeId for the given feed range.\n   *\n   * This partitionKeyRangeId is passed to queryFeed to fetch the results.\n   */\n  private async getPartitionRangeId(\n    feedRange: ChangeFeedRange,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<string> {\n    const min = feedRange.epkMinHeader ? feedRange.epkMinHeader : feedRange.minInclusive;\n    const max = feedRange.epkMaxHeader ? feedRange.epkMaxHeader : feedRange.maxExclusive;\n    const queryRange = new QueryRange(min, max, true, false);\n    const resolvedRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n      this.url,\n      queryRange,\n      diagnosticNode,\n      false,\n    );\n    if (resolvedRanges.length < 1) {\n      throw new ErrorResponse(\"No overlapping ranges found.\");\n    }\n    const firstResolvedRange = resolvedRanges[0];\n    if (resolvedRanges.length > 1) {\n      await this.handleSplit(true, resolvedRanges, queryRange, feedRange.continuationToken);\n    }\n    return firstResolvedRange.id;\n  }\n\n  private async getFeedResponse(\n    feedRange: ChangeFeedRange,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const feedOptions: FeedOptions = {\n      initialHeaders: {},\n      useLatestVersionFeed: true,\n      useAllVersionsAndDeletesFeed: false,\n    };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (feedRange.continuationToken) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: feedRange.continuationToken,\n      };\n    } else if (this.startFromNow) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfNoneMatch] =\n        Constants.ChangeFeedIfNoneMatchStartFromNowHeader;\n    }\n\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n\n    if (\n      this.changeFeedOptions.changeFeedMode &&\n      this.changeFeedOptions.changeFeedMode === ChangeFeedMode.AllVersionsAndDeletes\n    ) {\n      feedOptions.useAllVersionsAndDeletesFeed = true;\n      feedOptions.useLatestVersionFeed = false;\n    }\n\n    const rangeId = await this.getPartitionRangeId(feedRange, diagnosticNode);\n    if (this.clientContext.enableEncryption) {\n      await this.container.checkAndInitializeEncryption();\n      feedOptions.containerRid = this.container._rid;\n    }\n    try {\n      // startEpk and endEpk are only valid in case we want to fetch result for a part of partition and not the entire partition.\n      const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n        path: this.resourceLink,\n        resourceType: ResourceType.item,\n        resourceId: this.resourceId,\n        resultFn: (result) => (result ? result.Documents : []),\n        query: undefined,\n        options: feedOptions,\n        diagnosticNode,\n        partitionKey: undefined,\n        partitionKeyRangeId: rangeId,\n        startEpk: feedRange.epkMinHeader,\n        endEpk: feedRange.epkMaxHeader,\n      }) as Promise<any>);\n\n      return new ChangeFeedIteratorResponse(\n        response.result,\n        response.result ? response.result.length : 0,\n        response.code,\n        response.headers,\n        getEmptyCosmosDiagnostics(),\n      );\n    } catch (err) {\n      // If partition split/merge is encountered, handle it gracefully and continue fetching results.\n      if (err.code === StatusCodes.Gone) {\n        return new ChangeFeedIteratorResponse(\n          [],\n          0,\n          err.code,\n          err.headers,\n          getEmptyCosmosDiagnostics(),\n          err.substatus,\n        );\n      }\n      // If any other errors are encountered, throw the error.\n      const errorResponse = new ErrorResponse(err.message);\n      errorResponse.code = err.code;\n      errorResponse.headers = err.headers;\n      throw errorResponse;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKey } from \"../../documents\";\n/**\n * Continuation token for change feed of entire container, or a specific Epk Range.\n * @internal\n */\nexport class ContinuationTokenForPartitionKey {\n  /**\n   * rid of the container for which the continuation token is issued.\n   */\n  public readonly rid: string;\n  /**\n   * A specific Partition key in the container for which the continuation token is issued.\n   */\n  public readonly partitionKey: PartitionKey;\n  /**\n   * Continuation value for the specific Partition key in the container.\n   */\n  public Continuation: string;\n\n  constructor(rid: string, partitionKey: PartitionKey, continuation: string) {\n    this.rid = rid;\n    this.partitionKey = partitionKey;\n    this.Continuation = continuation;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport { Container, Resource } from \"../../client\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, copyObject, ResourceType, StatusCodes } from \"../../common\";\nimport { FeedOptions, Response, ErrorResponse } from \"../../request\";\nimport { ContinuationTokenForPartitionKey } from \"./ContinuationTokenForPartitionKey\";\nimport { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport { PartitionKey, convertToInternalPartitionKey } from \"../../documents\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { ChangeFeedMode } from \"./ChangeFeedMode\";\nimport { decryptChangeFeedResponse } from \"./changeFeedUtils\";\n/**\n * @hidden\n * Provides iterator for change feed for one partition key.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForPartitionKey<T> implements ChangeFeedPullModelIterator<T> {\n  private continuationToken: ContinuationTokenForPartitionKey;\n  private startTime: string;\n  private rId: string;\n  private isInstantiated: boolean;\n  private startFromNow: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private container: Container,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: InternalChangeFeedIteratorOptions,\n  ) {\n    this.continuationToken = changeFeedOptions.continuationToken\n      ? JSON.parse(changeFeedOptions.continuationToken)\n      : undefined;\n    this.isInstantiated = false;\n    // startTime is used to store and specify time from which change feed should start reading new changes. StartFromNow flag is used to indicate fetching changes from now.\n    if (changeFeedOptions.startFromNow) {\n      this.startFromNow = true;\n    } else if (changeFeedOptions.startTime) {\n      this.startTime = changeFeedOptions.startTime.toUTCString();\n    }\n  }\n\n  private async instantiateIterator(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    await this.setIteratorRid(diagnosticNode);\n    if (this.clientContext.enableEncryption) {\n      await this.container.checkAndInitializeEncryption();\n      // returns copy of object to avoid encryption of original partition key passed\n      this.partitionKey = copyObject(this.partitionKey);\n      diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsEncryptOperation);\n      const { partitionKeyList, encryptedCount } =\n        await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n          convertToInternalPartitionKey(this.partitionKey),\n        );\n      this.partitionKey = partitionKeyList;\n      diagnosticNode.endEncryptionDiagnostics(\n        Constants.Encryption.DiagnosticsEncryptOperation,\n        encryptedCount,\n      );\n    }\n    if (this.continuationToken) {\n      if (!this.continuationTokenRidMatchContainerRid()) {\n        throw new ErrorResponse(\"The continuation is not for the current container definition.\");\n      }\n    } else {\n      this.continuationToken = new ContinuationTokenForPartitionKey(\n        this.rId,\n        this.partitionKey,\n        \"\",\n      );\n    }\n\n    this.isInstantiated = true;\n  }\n\n  private continuationTokenRidMatchContainerRid(): boolean {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n\n  private async setIteratorRid(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    const { resource } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (!this.isInstantiated) {\n        await this.instantiateIterator(diagnosticNode);\n      }\n      const result = await this.fetchNext(diagnosticNode);\n      if (result.statusCode === StatusCodes.Ok) {\n        if (this.clientContext.enableEncryption) {\n          await decryptChangeFeedResponse(\n            result,\n            diagnosticNode,\n            this.changeFeedOptions.changeFeedMode,\n            this.container.encryptionProcessor,\n          );\n        }\n      }\n      return result;\n    }, this.clientContext);\n  }\n\n  /**\n   * Read feed and retrieves the next set of results in Azure Cosmos DB.\n   */\n  private async fetchNext(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const response = await this.getFeedResponse(diagnosticNode);\n    this.continuationToken.Continuation = response.headers[Constants.HttpHeaders.ETag];\n    response.headers[Constants.HttpHeaders.ContinuationToken] = JSON.stringify(\n      this.continuationToken,\n    );\n    return response;\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const feedOptions: FeedOptions = {\n      initialHeaders: {},\n      useLatestVersionFeed: true,\n      useAllVersionsAndDeletesFeed: false,\n    };\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    const continuation = this.continuationToken.Continuation;\n    if (continuation) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: continuation,\n      };\n    } else if (this.startFromNow) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfNoneMatch] =\n        Constants.ChangeFeedIfNoneMatchStartFromNowHeader;\n    }\n\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n    if (\n      this.changeFeedOptions.changeFeedMode &&\n      this.changeFeedOptions.changeFeedMode === ChangeFeedMode.AllVersionsAndDeletes\n    ) {\n      feedOptions.useAllVersionsAndDeletesFeed = true;\n      feedOptions.useLatestVersionFeed = false;\n    }\n    if (this.clientContext.enableEncryption) {\n      feedOptions.containerRid = this.container._rid;\n    }\n    try {\n      const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n        path: this.resourceLink,\n        resourceType: ResourceType.item,\n        resourceId: this.resourceId,\n        resultFn: (result) => (result ? result.Documents : []),\n        diagnosticNode,\n        query: undefined,\n        options: feedOptions,\n        partitionKey: this.partitionKey,\n      }) as Promise<any>);\n      return new ChangeFeedIteratorResponse(\n        response.result,\n        response.result ? response.result.length : 0,\n        response.code,\n        response.headers,\n        getEmptyCosmosDiagnostics(),\n      );\n    } catch (err) {\n      // If any errors are encountered, throw the error.\n      const errorResponse = new ErrorResponse(err.message);\n      errorResponse.code = err.code;\n      errorResponse.headers = err.headers;\n      throw errorResponse;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PartitionKey } from \"../../documents\";\nimport type { FeedRange } from \"./FeedRange\";\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from this moment in time.\n */\nexport class ChangeFeedStartFromNow {\n  public cfResource?: PartitionKey | FeedRange;\n\n  constructor(cfResource?: PartitionKey | FeedRange) {\n    this.cfResource = cfResource;\n  }\n\n  public getCfResource(): PartitionKey | FeedRange | undefined {\n    return this.cfResource;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Enum to specify the resource for which change feed is being fetched.\n */\nexport enum ChangeFeedResourceType {\n  FeedRange,\n  PartitionKey,\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\n/**\n * @hidden\n * Class which specifies the ChangeFeedIterator to start reading changes from a saved point.\n */\nexport class ChangeFeedStartFromContinuation {\n  private continuationToken: string;\n\n  constructor(continuation: string) {\n    this.continuationToken = continuation;\n  }\n\n  public getCfResource(): string {\n    return this.continuationToken;\n  }\n  public getCfResourceJson(): any {\n    return JSON.parse(this.continuationToken);\n  }\n\n  public getResourceType(): any {\n    const cToken = this.getCfResourceJson();\n    if (\n      Object.prototype.hasOwnProperty.call(cToken, \"partitionKey\") &&\n      Object.prototype.hasOwnProperty.call(cToken, \"Continuation\") &&\n      typeof cToken.Continuation === \"string\"\n    ) {\n      return ChangeFeedResourceType.PartitionKey;\n    } else if (\n      Object.prototype.hasOwnProperty.call(cToken, \"Continuation\") &&\n      Array.isArray(cToken.Continuation) &&\n      cToken.Continuation.length > 0\n    ) {\n      return ChangeFeedResourceType.FeedRange;\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKey } from \"../../documents\";\nimport type { FeedRange } from \"./FeedRange\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ErrorResponse } from \"../../request/ErrorResponse\";\nimport { isNullOrEmpty } from \"./changeFeedUtils\";\n\n/**\n * Base class for where to start a ChangeFeedIterator.\n */\n/* eslint-disable @typescript-eslint/no-extraneous-class */\nexport abstract class ChangeFeedStartFrom {\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start from the beginning of time.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Beginning(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromBeginning {\n    return new ChangeFeedStartFromBeginning(cfResource);\n  }\n  /**\n   *  Returns an object that tells the ChangeFeedIterator to start reading changes from this moment onward.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   **/\n  public static Now(cfResource?: PartitionKey | FeedRange): ChangeFeedStartFromNow {\n    return new ChangeFeedStartFromNow(cfResource);\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from some point in time onward.\n   * @param startTime - Date object specfiying the time to start reading changes from.\n   * @param cfResource - PartitionKey or FeedRange for which changes are to be fetched. Leave blank for fetching changes for entire container.\n   */\n  public static Time(\n    startTime: Date,\n    cfResource?: PartitionKey | FeedRange,\n  ): ChangeFeedStartFromTime {\n    if (!startTime) {\n      throw new ErrorResponse(\"startTime must be present\");\n    }\n    if (startTime instanceof Date === true) {\n      return new ChangeFeedStartFromTime(startTime, cfResource);\n    } else {\n      throw new ErrorResponse(\"startTime must be a Date object.\");\n    }\n  }\n  /**\n   * Returns an object that tells the ChangeFeedIterator to start reading changes from a save point.\n   * @param continuation - The continuation to resume from.\n   */\n  public static Continuation(continuationToken: string): ChangeFeedStartFromContinuation {\n    if (!continuationToken) {\n      throw new ErrorResponse(\"Argument continuation must be passed.\");\n    }\n    if (isNullOrEmpty(continuationToken)) {\n      throw new ErrorResponse(\"Argument continuationToken must be a non-empty string.\");\n    }\n    return new ChangeFeedStartFromContinuation(continuationToken);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { PartitionKey } from \"../../documents\";\nimport type { PartitionKeyRangeCache } from \"../../routing\";\nimport { QueryRange } from \"../../routing\";\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\nimport { ChangeFeedForPartitionKey } from \"./ChangeFeedForPartitionKey\";\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedForEpkRange } from \"./ChangeFeedForEpkRange\";\nimport { getIdFromLink, getPathFromLink, ResourceType, Constants } from \"../../common\";\nimport {\n  buildInternalChangeFeedOptions,\n  fetchStartTime,\n  isEpkRange,\n  getEPKRangeForPrefixPartitionKey,\n} from \"./changeFeedUtils\";\nimport { isPrefixPartitionKey, isPartitionKey } from \"../../utils/typeChecks\";\nimport type { Container } from \"../Container\";\nimport type { FeedRangeInternal } from \"./FeedRange\";\nimport { PartitionKeyInternal } from \"../../documents/PartitionKeyInternal\";\n\nexport async function buildChangeFeedIterator(\n  cfOptions: ChangeFeedIteratorOptions,\n  clientContext: ClientContext,\n  container: Container,\n  partitionKeyRangeCache: PartitionKeyRangeCache,\n): Promise<any> {\n  const url = container.url;\n  const path = getPathFromLink(url, ResourceType.item);\n  const id = getIdFromLink(url);\n\n  let changeFeedStartFrom = cfOptions.changeFeedStartFrom;\n\n  if (changeFeedStartFrom === undefined) {\n    changeFeedStartFrom = ChangeFeedStartFrom.Now();\n  }\n\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromContinuation) {\n    const continuationToken = changeFeedStartFrom.getCfResourceJson();\n    const resourceType = changeFeedStartFrom.getResourceType();\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      changeFeedStartFrom.getCfResource(),\n    );\n\n    if (\n      resourceType === ChangeFeedResourceType.PartitionKey &&\n      isPartitionKey(continuationToken.partitionKey)\n    ) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        continuationToken.partitionKey,\n        internalCfOptions,\n      );\n    } else if (resourceType === ChangeFeedResourceType.FeedRange) {\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        undefined,\n      );\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  } else if (\n    changeFeedStartFrom instanceof ChangeFeedStartFromNow ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromTime ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromBeginning\n  ) {\n    const startFromNow = changeFeedStartFrom instanceof ChangeFeedStartFromNow ? true : false;\n    const startTime = startFromNow ? undefined : fetchStartTime(changeFeedStartFrom);\n\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      undefined,\n      startTime,\n      startFromNow,\n    );\n    const cfResource = changeFeedStartFrom.getCfResource();\n    if (isPartitionKey(cfResource)) {\n      const partitionKey = cfResource as PartitionKey;\n      const partitionKeyDefinition = await container.getPartitionKeyDefinition();\n\n      if (\n        partitionKeyDefinition !== undefined &&\n        isPrefixPartitionKey(partitionKey, partitionKeyDefinition.resource)\n      ) {\n        const effectiveEPKRange = await getEPKRangeForPrefixPartitionKey(\n          partitionKey as PartitionKeyInternal,\n        );\n        return new ChangeFeedForEpkRange(\n          clientContext,\n          container,\n          partitionKeyRangeCache,\n          id,\n          path,\n          url,\n          internalCfOptions,\n          effectiveEPKRange,\n        );\n      }\n\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        cfResource as PartitionKey,\n        internalCfOptions,\n      );\n    } else {\n      let internalCfResource: QueryRange;\n      if (cfResource === undefined) {\n        internalCfResource = new QueryRange(\n          Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey,\n          Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey,\n          true,\n          false,\n        );\n      } else if (isEpkRange(cfResource)) {\n        internalCfResource = new QueryRange(\n          (cfResource as FeedRangeInternal).minInclusive,\n          (cfResource as FeedRangeInternal).maxExclusive,\n          true,\n          false,\n        );\n      } else {\n        throw new ErrorResponse(\"Invalid feed range.\");\n      }\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        internalCfResource,\n      );\n    }\n  } else {\n    throw new ErrorResponse(\"Invalid change feed start location.\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ErrorResponse } from \"../../request\";\n\n/*\n * Represents the change feed policy configuration for a container in the Azure Cosmos DB service.\n */\nexport class ChangeFeedRetentionTimeSpan {\n  private retentionInMinutes: number;\n  /**\n   * @internal\n   */\n  constructor(minutes: number) {\n    if (typeof minutes !== \"number\") {\n      throw new ErrorResponse(\"ChangeFeedRetentionTimeSpan must be a number.\");\n    }\n    if (minutes < 0) {\n      throw new ErrorResponse(\"ChangeFeedRetentionTimeSpan must be a positive number.\");\n    }\n    if (minutes % 1 !== 0) {\n      throw new ErrorResponse(\"Retention's granularity is minutes.\");\n    }\n    this.retentionInMinutes = minutes;\n  }\n  /**\n   * Specifies the retention window in minutes for which processing the change feed with allVersionsAndDeletes mode will be available.\n   */\n  static fromMinutes(minutes: number): ChangeFeedRetentionTimeSpan {\n    return new ChangeFeedRetentionTimeSpan(minutes);\n  }\n  /**\n   * @internal\n   */\n  public getRetentionInMinutes(): number {\n    return this.retentionInMinutes;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ChangeFeedRetentionTimeSpan } from \"./ChangeFeedRetentionTimeSpan\";\n/**\n * Represents the change feed policy configuration for a container in the Azure Cosmos DB service.\n */\nexport class ChangeFeedPolicy {\n  public retentionDuration: number;\n\n  constructor(retentionDuration: ChangeFeedRetentionTimeSpan) {\n    this.retentionDuration = retentionDuration.getRetentionInMinutes();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport type { Container, Resource } from \"../../client\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport type { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { buildChangeFeedIterator } from \"./buildChangeFeedIterator\";\nimport type { PartitionKeyRangeCache } from \"../../routing\";\nimport { ErrorResponse } from \"../../request\";\n\n/**\n * @hidden\n * Provides iterator for change feed.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\n\nexport class ChangeFeedIteratorBuilder<T> implements ChangeFeedPullModelIterator<T> {\n  private iterator: ChangeFeedPullModelIterator<T>;\n  private isInitialized: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private cfOptions: ChangeFeedIteratorOptions,\n    private clientContext: ClientContext,\n    private container: Container,\n    private partitionKeyRangeCache: PartitionKeyRangeCache,\n  ) {\n    this.isInitialized = false;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    await this.initializeIterator();\n    do {\n      const result = await this.iterator.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    await this.initializeIterator();\n    return this.iterator.readNext();\n  }\n\n  private async initializeIterator(): Promise<void> {\n    if (!this.isInitialized) {\n      try {\n        const iterator = await buildChangeFeedIterator(\n          this.cfOptions,\n          this.clientContext,\n          this.container,\n          this.partitionKeyRangeCache,\n        );\n        this.isInitialized = true;\n        this.iterator = iterator;\n      } catch (err) {\n        throw new ErrorResponse(err.message);\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { setAuthorizationHeader } from \"../auth\";\nimport {\n  Constants,\n  HTTPMethod,\n  jsonStringifyAndEscapeNonASCII,\n  ResourceType,\n  SDKSupportedCapabilities,\n} from \"../common\";\nimport type { CosmosClientOptions } from \"../CosmosClientOptions\";\nimport type { PartitionKeyInternal } from \"../documents\";\nimport type { CosmosHeaders } from \"../queryExecutionContext\";\nimport type { FeedOptions, RequestOptions } from \"./index\";\nimport { defaultLogger } from \"../common/logger\";\nimport { ChangeFeedMode } from \"../client/ChangeFeed\";\n// ----------------------------------------------------------------------------\n// Utility methods\n//\n\n/** @hidden */\nfunction javaScriptFriendlyJSONStringify(s: unknown): string {\n  // two line terminators (Line separator and Paragraph separator) are not needed to be escaped in JSON\n  // but are needed to be escaped in JavaScript.\n  return JSON.stringify(s)\n    .replace(/\\u2028/g, \"\\\\u2028\")\n    .replace(/\\u2029/g, \"\\\\u2029\");\n}\n\n/** @hidden */\nexport function bodyFromData(data: Buffer | string | Record<string, unknown>): string {\n  if (typeof data === \"object\") {\n    return javaScriptFriendlyJSONStringify(data);\n  }\n  return data;\n}\n\n/**\n * @hidden\n */\ninterface GetHeadersOptions {\n  clientOptions: CosmosClientOptions;\n  defaultHeaders: CosmosHeaders;\n  verb: HTTPMethod;\n  path: string;\n  resourceId: string;\n  resourceType: ResourceType;\n  options: RequestOptions & FeedOptions;\n  partitionKeyRangeId?: string;\n  useMultipleWriteLocations?: boolean;\n  partitionKey?: PartitionKeyInternal;\n}\n\nconst JsonContentType = \"application/json\";\n\n/**\n * @hidden\n */\nexport async function getHeaders({\n  clientOptions,\n  defaultHeaders,\n  verb,\n  path,\n  resourceId,\n  resourceType,\n  options = {},\n  partitionKeyRangeId,\n  useMultipleWriteLocations,\n  partitionKey,\n}: GetHeadersOptions): Promise<CosmosHeaders> {\n  const headers: CosmosHeaders = {\n    [Constants.HttpHeaders.ResponseContinuationTokenLimitInKB]: 1,\n    [Constants.HttpHeaders.EnableCrossPartitionQuery]: true,\n    ...defaultHeaders,\n  };\n\n  // Adding SDKSupportedCapabilities header to hint that SDK supports partition merge\n  headers[Constants.HttpHeaders.SDKSupportedCapabilities] = SDKSupportedCapabilities.PartitionMerge;\n\n  if (useMultipleWriteLocations) {\n    headers[Constants.HttpHeaders.ALLOW_MULTIPLE_WRITES] = true;\n  }\n\n  if (options.continuationTokenLimitInKB) {\n    headers[Constants.HttpHeaders.ResponseContinuationTokenLimitInKB] =\n      options.continuationTokenLimitInKB;\n  }\n  if (options.continuationToken) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuationToken;\n  } else if (options.continuation) {\n    headers[Constants.HttpHeaders.Continuation] = options.continuation;\n  }\n\n  if (options.preTriggerInclude) {\n    headers[Constants.HttpHeaders.PreTriggerInclude] =\n      options.preTriggerInclude.constructor === Array\n        ? (options.preTriggerInclude as string[]).join(\",\")\n        : (options.preTriggerInclude as string);\n  }\n\n  if (options.postTriggerInclude) {\n    headers[Constants.HttpHeaders.PostTriggerInclude] =\n      options.postTriggerInclude.constructor === Array\n        ? (options.postTriggerInclude as string[]).join(\",\")\n        : (options.postTriggerInclude as string);\n  }\n\n  if (options.offerType) {\n    headers[Constants.HttpHeaders.OfferType] = options.offerType;\n  }\n\n  if (options.offerThroughput) {\n    headers[Constants.HttpHeaders.OfferThroughput] = options.offerThroughput;\n  }\n\n  if (options.maxItemCount) {\n    headers[Constants.HttpHeaders.PageSize] = options.maxItemCount;\n  }\n\n  if (options.accessCondition) {\n    if (options.accessCondition.type === \"IfMatch\") {\n      headers[Constants.HttpHeaders.IfMatch] = options.accessCondition.condition;\n    } else {\n      headers[Constants.HttpHeaders.IfNoneMatch] = options.accessCondition.condition;\n    }\n  }\n\n  if (options.useAllVersionsAndDeletesFeed) {\n    // headers required for reading feed in allVersionsAndDeletes mode\n    headers[Constants.HttpHeaders.A_IM] = ChangeFeedMode.AllVersionsAndDeletes;\n    headers[Constants.HttpHeaders.ChangeFeedWireFormatVersion] =\n      Constants.AllVersionsAndDeletesChangeFeedWireFormatVersion;\n  }\n\n  if (options.useIncrementalFeed || options.useLatestVersionFeed) {\n    headers[Constants.HttpHeaders.A_IM] = ChangeFeedMode.LatestVersion;\n  }\n\n  if (options.indexingDirective) {\n    headers[Constants.HttpHeaders.IndexingDirective] = options.indexingDirective;\n  }\n\n  if (options.consistencyLevel) {\n    headers[Constants.HttpHeaders.ConsistencyLevel] = options.consistencyLevel;\n  }\n\n  if (options.priorityLevel) {\n    headers[Constants.HttpHeaders.PriorityLevel] = options.priorityLevel;\n  }\n\n  if (options.throughputBucket) {\n    headers[Constants.HttpHeaders.ThroughputBucket] = options.throughputBucket;\n  }\n\n  if (options.maxIntegratedCacheStalenessInMs && resourceType === ResourceType.item) {\n    if (typeof options.maxIntegratedCacheStalenessInMs === \"number\") {\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] =\n        options.maxIntegratedCacheStalenessInMs.toString();\n    } else {\n      defaultLogger.error(\n        `RangeError: maxIntegratedCacheStalenessInMs \"${options.maxIntegratedCacheStalenessInMs}\" is not a valid parameter.`,\n      );\n      headers[Constants.HttpHeaders.DedicatedGatewayPerRequestCacheStaleness] = \"null\";\n    }\n  }\n\n  if (options.bypassIntegratedCache) {\n    headers[Constants.HttpHeaders.DedicatedGatewayPerRequestBypassCache] =\n      options.bypassIntegratedCache.toString();\n  }\n\n  if (options.resourceTokenExpirySeconds) {\n    headers[Constants.HttpHeaders.ResourceTokenExpiry] = options.resourceTokenExpirySeconds;\n  }\n\n  if (options.sessionToken) {\n    headers[Constants.HttpHeaders.SessionToken] = options.sessionToken;\n  }\n\n  if (options.enableScanInQuery) {\n    headers[Constants.HttpHeaders.EnableScanInQuery] = options.enableScanInQuery;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = options.populateQuotaInfo;\n  }\n\n  if (options.populateQueryMetrics) {\n    headers[Constants.HttpHeaders.PopulateQueryMetrics] = options.populateQueryMetrics;\n  }\n\n  if (\n    options.maxDegreeOfParallelism !== undefined &&\n    options.maxDegreeOfParallelism !== 0 &&\n    options.maxDegreeOfParallelism !== 1\n  ) {\n    headers[Constants.HttpHeaders.ParallelizeCrossPartitionQuery] = true;\n  }\n\n  if (options.populateQuotaInfo) {\n    headers[Constants.HttpHeaders.PopulateQuotaInfo] = true;\n  }\n\n  if (partitionKey !== undefined && !headers[Constants.HttpHeaders.PartitionKey]) {\n    headers[Constants.HttpHeaders.PartitionKey] = jsonStringifyAndEscapeNonASCII(partitionKey);\n  }\n\n  if (clientOptions.key || clientOptions.tokenProvider) {\n    headers[Constants.HttpHeaders.XDate] = new Date().toUTCString();\n  }\n\n  if (verb === HTTPMethod.post || verb === HTTPMethod.put) {\n    if (!headers[Constants.HttpHeaders.ContentType]) {\n      headers[Constants.HttpHeaders.ContentType] = JsonContentType;\n    }\n  }\n\n  if (!headers[Constants.HttpHeaders.Accept]) {\n    headers[Constants.HttpHeaders.Accept] = JsonContentType;\n  }\n\n  if (partitionKeyRangeId !== undefined) {\n    headers[Constants.HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n  }\n\n  if (options.enableScriptLogging) {\n    headers[Constants.HttpHeaders.EnableScriptLogging] = options.enableScriptLogging;\n  }\n\n  if (options.disableRUPerMinuteUsage) {\n    headers[Constants.HttpHeaders.DisableRUPerMinuteUsage] = true;\n  }\n\n  if (options.populateIndexMetrics) {\n    headers[Constants.HttpHeaders.PopulateIndexMetrics] = options.populateIndexMetrics;\n  }\n\n  if (clientOptions.clientEncryptionOptions) {\n    headers[Constants.HttpHeaders.IsClientEncryptedHeader] = true;\n    if (options.containerRid) {\n      headers[Constants.HttpHeaders.IntendedCollectionHeader] = options.containerRid;\n    }\n  }\n\n  if (\n    clientOptions.key ||\n    clientOptions.resourceTokens ||\n    clientOptions.tokenProvider ||\n    clientOptions.permissionFeed\n  ) {\n    await setAuthorizationHeader(clientOptions, verb, path, resourceId, resourceType, headers);\n  }\n  return headers;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { JSONObject } from \"../queryExecutionContext\";\nimport { extractPartitionKeys, undefinedPartitionKey } from \"../extractPartitionKey\";\nimport type { CosmosDiagnostics, RequestOptions } from \"..\";\nimport type {\n  PartitionKey,\n  PartitionKeyDefinition,\n  PrimitivePartitionKeyValue,\n} from \"../documents\";\nimport { NonePartitionKeyLiteral, convertToInternalPartitionKey } from \"../documents\";\nimport type { PatchRequestBody } from \"./patch\";\nimport { assertNotUndefined } from \"./typeChecks\";\nimport { bodyFromData } from \"../request/request\";\nimport { Constants } from \"../common/constants\";\nimport { randomUUID } from \"@azure/core-util\";\n\nexport type Operation =\n  | CreateOperation\n  | UpsertOperation\n  | ReadOperation\n  | DeleteOperation\n  | ReplaceOperation\n  | BulkPatchOperation;\n\nexport interface Batch {\n  min: string;\n  max: string;\n  rangeId: string;\n  indexes: number[];\n  operations: Operation[];\n}\n\nexport type BulkOperationResponse = OperationResponse[] & { diagnostics: CosmosDiagnostics };\n\nexport interface OperationResponse {\n  statusCode: number;\n  requestCharge: number;\n  eTag?: string;\n  resourceBody?: JSONObject;\n}\n\n/**\n * Options object used to modify bulk execution.\n * continueOnError (Default value: false) - Continues bulk execution when an operation fails ** NOTE THIS WILL DEFAULT TO TRUE IN the 4.0 RELEASE\n */\nexport interface BulkOptions {\n  continueOnError?: boolean;\n}\n\nexport function isKeyInRange(min: string, max: string, key: string): boolean {\n  const isAfterMinInclusive = key.localeCompare(min) >= 0;\n  const isBeforeMax = key.localeCompare(max) < 0;\n  return isAfterMinInclusive && isBeforeMax;\n}\n\nexport interface OperationBase {\n  partitionKey?: string;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n}\n\nexport const BulkOperationType = {\n  Create: \"Create\",\n  Upsert: \"Upsert\",\n  Read: \"Read\",\n  Delete: \"Delete\",\n  Replace: \"Replace\",\n  Patch: \"Patch\",\n} as const;\n\nexport type OperationInput =\n  | CreateOperationInput\n  | UpsertOperationInput\n  | ReadOperationInput\n  | DeleteOperationInput\n  | ReplaceOperationInput\n  | PatchOperationInput;\n\nexport interface CreateOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Create;\n  resourceBody: JSONObject;\n}\n\nexport interface UpsertOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Upsert;\n  resourceBody: JSONObject;\n}\n\nexport interface ReadOperationInput {\n  partitionKey?: PartitionKey;\n  operationType: typeof BulkOperationType.Read;\n  id: string;\n}\n\nexport interface DeleteOperationInput {\n  partitionKey?: PartitionKey;\n  operationType: typeof BulkOperationType.Delete;\n  id: string;\n}\n\nexport interface ReplaceOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Replace;\n  resourceBody: JSONObject;\n  id: string;\n}\n\nexport interface PatchOperationInput {\n  partitionKey?: PartitionKey;\n  ifMatch?: string;\n  ifNoneMatch?: string;\n  operationType: typeof BulkOperationType.Patch;\n  resourceBody: PatchRequestBody;\n  id: string;\n}\n\nexport type OperationWithItem = OperationBase & {\n  resourceBody: JSONObject;\n};\n\nexport type CreateOperation = OperationWithItem & {\n  operationType: typeof BulkOperationType.Create;\n};\n\nexport type UpsertOperation = OperationWithItem & {\n  operationType: typeof BulkOperationType.Upsert;\n};\n\nexport type ReadOperation = OperationBase & {\n  operationType: typeof BulkOperationType.Read;\n  id: string;\n};\n\nexport type DeleteOperation = OperationBase & {\n  operationType: typeof BulkOperationType.Delete;\n  id: string;\n};\n\nexport type ReplaceOperation = OperationWithItem & {\n  operationType: typeof BulkOperationType.Replace;\n  id: string;\n};\n\nexport type BulkPatchOperation = OperationBase & {\n  operationType: typeof BulkOperationType.Patch;\n  id: string;\n};\n\nexport function hasResource(\n  operation: Operation,\n): operation is CreateOperation | UpsertOperation | ReplaceOperation {\n  return (\n    operation.operationType !== \"Patch\" &&\n    (operation as OperationWithItem).resourceBody !== undefined\n  );\n}\n/**\n * Maps OperationInput to Operation by\n * - generating Ids if needed.\n * - choosing partitionKey which can be used to choose which batch this\n * operation should be part of. The order is -\n *   1. If the operationInput itself has partitionKey field set it is used.\n *   2. Other wise for create/replace/upsert it is extracted from resource body.\n *   3. For read/delete/patch type operations undefined partitionKey is used.\n * - Here one nuance is that, the partitionKey field inside Operation needs to\n *  be serialized as a JSON string.\n * @param operationInput - OperationInput\n * @param definition - PartitionKeyDefinition\n * @param options - RequestOptions\n * @returns\n */\nexport function prepareOperations(\n  operationInput: OperationInput,\n  definition: PartitionKeyDefinition,\n  options: RequestOptions = {},\n): {\n  operation: Operation;\n  partitionKey: PrimitivePartitionKeyValue[];\n} {\n  populateIdsIfNeeded(operationInput, options);\n\n  let partitionKey: PrimitivePartitionKeyValue[];\n  if (Object.prototype.hasOwnProperty.call(operationInput, \"partitionKey\")) {\n    if (operationInput.partitionKey === undefined) {\n      partitionKey = definition.paths.map(() => NonePartitionKeyLiteral);\n    } else {\n      partitionKey = convertToInternalPartitionKey(operationInput.partitionKey);\n    }\n  } else {\n    switch (operationInput.operationType) {\n      case BulkOperationType.Create:\n      case BulkOperationType.Replace:\n      case BulkOperationType.Upsert:\n        partitionKey = assertNotUndefined(\n          extractPartitionKeys(operationInput.resourceBody, definition),\n          \"Unexpected undefined Partition Key Found.\",\n        );\n        break;\n      case BulkOperationType.Read:\n      case BulkOperationType.Delete:\n      case BulkOperationType.Patch:\n        partitionKey = undefinedPartitionKey(definition);\n        break;\n    }\n  }\n  return {\n    operation: { ...operationInput, partitionKey: JSON.stringify(partitionKey) } as Operation,\n    partitionKey,\n  };\n}\n\n/**\n * For operations requiring Id genrate random uuids.\n * @param operationInput - OperationInput to be checked.\n * @param options - RequestOptions\n */\nfunction populateIdsIfNeeded(operationInput: OperationInput, options: RequestOptions) {\n  if (\n    operationInput.operationType === BulkOperationType.Create ||\n    operationInput.operationType === BulkOperationType.Upsert\n  ) {\n    if (\n      (operationInput.resourceBody.id === undefined || operationInput.resourceBody.id === \"\") &&\n      !options.disableAutomaticIdGeneration\n    ) {\n      operationInput.resourceBody.id = randomUUID();\n    }\n  }\n}\n\n/**\n * Splits a batch into array of batches based on cumulative size of its operations by making sure\n * cumulative size of an individual batch is not larger than {@link Constants.DefaultMaxBulkRequestBodySizeInBytes}.\n * If a single operation itself is larger than {@link Constants.DefaultMaxBulkRequestBodySizeInBytes}, that\n * operation would be moved into a batch containing only that operation.\n * @param originalBatch - A batch of operations needed to be checked.\n * @returns\n * @hidden\n */\nexport function splitBatchBasedOnBodySize(originalBatch: Batch): Batch[] {\n  if (originalBatch?.operations === undefined || originalBatch.operations.length < 1) return [];\n  let currentBatchSize = calculateObjectSizeInBytes(originalBatch.operations[0]);\n  let currentBatch: Batch = {\n    ...originalBatch,\n    operations: [originalBatch.operations[0]],\n    indexes: [originalBatch.indexes[0]],\n  };\n  const processedBatches: Batch[] = [];\n  processedBatches.push(currentBatch);\n\n  for (let index = 1; index < originalBatch.operations.length; index++) {\n    const operation = originalBatch.operations[index];\n    const currentOpSize = calculateObjectSizeInBytes(operation);\n    if (currentBatchSize + currentOpSize > Constants.DefaultMaxBulkRequestBodySizeInBytes) {\n      currentBatch = {\n        ...originalBatch,\n        operations: [],\n        indexes: [],\n      };\n      processedBatches.push(currentBatch);\n      currentBatchSize = 0;\n    }\n    currentBatch.operations.push(operation);\n    currentBatch.indexes.push(originalBatch.indexes[index]);\n    currentBatchSize += currentOpSize;\n  }\n  return processedBatches;\n}\n\n/**\n * Calculates size of an JSON object in bytes with utf-8 encoding.\n * @hidden\n */\nexport function calculateObjectSizeInBytes(obj: unknown): number {\n  return new TextEncoder().encode(bodyFromData(obj as any)).length;\n}\n\nexport function decorateBatchOperation(\n  operation: OperationInput,\n  options: RequestOptions = {},\n): Operation {\n  if (\n    operation.operationType === BulkOperationType.Create ||\n    operation.operationType === BulkOperationType.Upsert\n  ) {\n    if (\n      (operation.resourceBody.id === undefined || operation.resourceBody.id === \"\") &&\n      !options.disableAutomaticIdGeneration\n    ) {\n      operation.resourceBody.id = randomUUID();\n    }\n  }\n  return operation as Operation;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport type PatchOperation = ExistingKeyOperation | RemoveOperation;\n\nexport const PatchOperationType = {\n  add: \"add\",\n  replace: \"replace\",\n  remove: \"remove\",\n  set: \"set\",\n  incr: \"incr\",\n} as const;\n\nexport type ExistingKeyOperation = {\n  op: keyof typeof PatchOperationType;\n  value: any;\n  path: string;\n};\n\nexport type RemoveOperation = {\n  op: \"remove\";\n  path: string;\n};\n\nexport type PatchRequestBody =\n  | {\n      operations: PatchOperation[];\n      condition?: string;\n    }\n  | PatchOperation[];\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { Constants } from \"../common\";\nimport { ClientSideMetrics, QueryMetrics } from \"../queryMetrics\";\nimport type { FeedOptions, Response } from \"../request\";\nimport { getInitialHeader } from \"./headerUtils\";\nimport type { ExecutionContext } from \"./index\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { CosmosDbDiagnosticLevel } from \"../diagnostics/CosmosDbDiagnosticLevel\";\n\nconst logger: AzureLogger = createClientLogger(\"ClientContext\");\n/** @hidden */\nexport type FetchFunctionCallback = (\n  diagnosticNode: DiagnosticNodeInternal,\n  options: FeedOptions,\n  correlatedActivityId: string,\n) => Promise<Response<any>>;\n\n/** @hidden */\nenum STATES {\n  start = \"start\",\n  inProgress = \"inProgress\",\n  ended = \"ended\",\n}\n\n/** @hidden */\nexport class DefaultQueryExecutionContext implements ExecutionContext {\n  private static readonly STATES = STATES;\n  private resources: any[]; // TODO: any resources\n  private currentIndex: number;\n  private currentPartitionIndex: number;\n  private fetchFunctions: FetchFunctionCallback[];\n  private options: FeedOptions; // TODO: any options\n  public continuationToken: string; // TODO: any continuation\n  public get continuation(): string {\n    return this.continuationToken;\n  }\n  private state: STATES;\n  private nextFetchFunction: Promise<Response<any>>;\n  private correlatedActivityId: string;\n  /**\n   * Provides the basic Query Execution Context.\n   * This wraps the internal logic query execution using provided fetch functions\n   *\n   * @param clientContext  - Is used to read the partitionKeyRanges for split proofing\n   * @param query          - A SQL query.\n   * @param options        - Represents the feed options.\n   * @param fetchFunctions - A function to retrieve each page of data.\n   *                          An array of functions may be used to query more than one partition.\n   * @hidden\n   */\n  constructor(\n    options: FeedOptions,\n    fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[],\n    correlatedActivityId: string,\n  ) {\n    this.resources = [];\n    this.currentIndex = 0;\n    this.currentPartitionIndex = 0;\n    this.fetchFunctions = Array.isArray(fetchFunctions) ? fetchFunctions : [fetchFunctions];\n    this.options = options || {};\n    this.continuationToken = this.options.continuationToken || this.options.continuation || null;\n    this.state = DefaultQueryExecutionContext.STATES.start;\n    this.correlatedActivityId = correlatedActivityId;\n  }\n\n  /**\n   * Execute a provided callback on the next element in the execution context.\n   */\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    ++this.currentIndex;\n    const response = await this.current(diagnosticNode);\n    return response;\n  }\n\n  /**\n   * Retrieve the current element on the execution context.\n   */\n  public async current(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.currentIndex < this.resources.length) {\n      return {\n        result: this.resources[this.currentIndex],\n        headers: getInitialHeader(),\n      };\n    }\n\n    if (this._canFetchMore()) {\n      const { result: resources, headers } = await this.fetchMore(diagnosticNode);\n      this.resources = resources;\n      if (this.resources.length === 0) {\n        if (!this.continuationToken && this.currentPartitionIndex >= this.fetchFunctions.length) {\n          this.state = DefaultQueryExecutionContext.STATES.ended;\n          return { result: undefined, headers };\n        } else {\n          return this.current(diagnosticNode);\n        }\n      }\n      return { result: this.resources[this.currentIndex], headers };\n    } else {\n      this.state = DefaultQueryExecutionContext.STATES.ended;\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs based on\n   * the value of the continuation token or the elements remaining on the current batch in the execution context.\n   *\n   * @returns true if there is other elements to process in the DefaultQueryExecutionContext.\n   */\n  public hasMoreResults(): boolean {\n    return (\n      this.state === DefaultQueryExecutionContext.STATES.start ||\n      this.continuationToken !== undefined ||\n      this.currentIndex < this.resources.length - 1 ||\n      this.currentPartitionIndex < this.fetchFunctions.length\n    );\n  }\n\n  /**\n   * Fetches the next batch of the feed and pass them as an array to a callback\n   */\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    return addDignosticChild(\n      async (childDiagnosticNode: DiagnosticNodeInternal) => {\n        if (this.currentPartitionIndex >= this.fetchFunctions.length) {\n          return {\n            headers: getInitialHeader(),\n            result: undefined,\n          };\n        }\n\n        // Keep to the original continuation and to restore the value after fetchFunction call\n        const originalContinuation = this.options.continuationToken || this.options.continuation;\n        this.options.continuationToken = this.continuationToken;\n\n        // Return undefined if there is no more results\n        if (this.currentPartitionIndex >= this.fetchFunctions.length) {\n          return {\n            headers: getInitialHeader(),\n            result: undefined,\n          };\n        }\n\n        let resources;\n        let responseHeaders;\n        try {\n          let p: Promise<Response<any>>;\n          if (this.nextFetchFunction !== undefined) {\n            logger.verbose(\"using prefetch\");\n            p = this.nextFetchFunction;\n            this.nextFetchFunction = undefined;\n          } else {\n            logger.verbose(\"using fresh fetch\");\n            p = this.fetchFunctions[this.currentPartitionIndex](\n              childDiagnosticNode,\n              this.options,\n              this.correlatedActivityId,\n            );\n          }\n          const response = await p;\n          resources = response.result;\n          childDiagnosticNode.recordQueryResult(resources, CosmosDbDiagnosticLevel.debugUnsafe);\n          responseHeaders = response.headers;\n          this.continuationToken = responseHeaders[Constants.HttpHeaders.Continuation];\n          if (!this.continuationToken) {\n            ++this.currentPartitionIndex;\n          }\n\n          if (this.options && this.options.bufferItems === true) {\n            const fetchFunction = this.fetchFunctions[this.currentPartitionIndex];\n            this.nextFetchFunction = fetchFunction\n              ? fetchFunction(\n                  childDiagnosticNode,\n                  {\n                    ...this.options,\n                    continuationToken: this.continuationToken,\n                  },\n                  this.correlatedActivityId,\n                )\n              : undefined;\n          }\n        } catch (err: any) {\n          this.state = DefaultQueryExecutionContext.STATES.ended;\n          // return callback(err, undefined, responseHeaders);\n          // TODO: Error and data being returned is an antipattern, this might broken\n          throw err;\n        }\n\n        this.state = DefaultQueryExecutionContext.STATES.inProgress;\n        this.currentIndex = 0;\n        this.options.continuationToken = originalContinuation;\n        this.options.continuation = originalContinuation;\n\n        // deserializing query metrics so that we aren't working with delimited strings in the rest of the code base\n        if (Constants.HttpHeaders.QueryMetrics in responseHeaders) {\n          const delimitedString = responseHeaders[Constants.HttpHeaders.QueryMetrics];\n          let queryMetrics = QueryMetrics.createFromDelimitedString(delimitedString);\n\n          // Add the request charge to the query metrics so that we can have per partition request charge.\n          if (Constants.HttpHeaders.RequestCharge in responseHeaders) {\n            const requestCharge = Number(responseHeaders[Constants.HttpHeaders.RequestCharge]) || 0;\n            queryMetrics = new QueryMetrics(\n              queryMetrics.retrievedDocumentCount,\n              queryMetrics.retrievedDocumentSize,\n              queryMetrics.outputDocumentCount,\n              queryMetrics.outputDocumentSize,\n              queryMetrics.indexHitDocumentCount,\n              queryMetrics.totalQueryExecutionTime,\n              queryMetrics.queryPreparationTimes,\n              queryMetrics.indexLookupTime,\n              queryMetrics.documentLoadTime,\n              queryMetrics.vmExecutionTime,\n              queryMetrics.runtimeExecutionTimes,\n              queryMetrics.documentWriteTime,\n              new ClientSideMetrics(requestCharge),\n            );\n          }\n\n          // Wraping query metrics in a object where the key is '0' just so single partition\n          // and partition queries have the same response schema\n          responseHeaders[Constants.HttpHeaders.QueryMetrics] = {};\n          responseHeaders[Constants.HttpHeaders.QueryMetrics][\"0\"] = queryMetrics;\n        }\n\n        return { result: resources, headers: responseHeaders };\n      },\n      diagnosticNode,\n      DiagnosticNodeType.DEFAULT_QUERY_NODE,\n      {\n        queryMethodIdentifier: \"fetchMore\",\n      },\n    );\n  }\n\n  private _canFetchMore(): boolean {\n    const res =\n      this.state === DefaultQueryExecutionContext.STATES.start ||\n      (this.continuationToken && this.state === DefaultQueryExecutionContext.STATES.inProgress) ||\n      (this.currentPartitionIndex < this.fetchFunctions.length &&\n        this.state === DefaultQueryExecutionContext.STATES.inProgress);\n    return res;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport interface AverageAggregateResult {\n  sum: number;\n  count: number;\n}\n\n/** @hidden */\nexport class AverageAggregator implements Aggregator {\n  public sum: number;\n  public count: number;\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: AverageAggregateResult): void {\n    if (other == null || other.sum == null) {\n      return;\n    }\n    if (this.sum == null) {\n      this.sum = 0.0;\n      this.count = 0;\n    }\n    this.sum += other.sum;\n    this.count += other.count;\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    if (this.sum == null || this.count <= 0) {\n      return undefined;\n    }\n    return this.sum / this.count;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class CountAggregator implements Aggregator {\n  public value: number;\n  /**\n   * Represents an aggregator for COUNT operator.\n   * @hidden\n   */\n  constructor() {\n    this.value = 0;\n  }\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: number): void {\n    this.value += other;\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.value;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DocumentProducer } from \"./documentProducer\";\n\n// TODO: this smells funny\n/** @hidden */\nconst TYPEORDCOMPARATOR: {\n  [type: string]: { ord: number; compFunc?: (a: any, b: any) => number };\n} = Object.freeze({\n  NoValue: {\n    ord: 0,\n  },\n  undefined: {\n    ord: 1,\n  },\n  boolean: {\n    ord: 2,\n    compFunc: (a: boolean, b: boolean) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  number: {\n    ord: 4,\n    compFunc: (a: number, b: number) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  string: {\n    ord: 5,\n    compFunc: (a: string, b: string) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n});\n\n/** @hidden */\nexport class OrderByDocumentProducerComparator {\n  constructor(public sortOrder: string[]) {} // TODO: This should be an enum\n\n  private targetPartitionKeyRangeDocProdComparator(\n    docProd1: DocumentProducer,\n    docProd2: DocumentProducer,\n  ): 0 | 1 | -1 {\n    const a = docProd1.getTargetParitionKeyRange()[\"minInclusive\"];\n    const b = docProd2.getTargetParitionKeyRange()[\"minInclusive\"];\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  public compare(docProd1: DocumentProducer, docProd2: DocumentProducer): number {\n    // Need to check for split, since we don't want to dereference \"item\" of undefined / exception\n    if (docProd1.gotSplit()) {\n      return -1;\n    }\n    if (docProd2.gotSplit()) {\n      return 1;\n    }\n\n    const orderByItemsRes1 = this.getOrderByItems(docProd1.peekBufferedItems()[0]);\n    const orderByItemsRes2 = this.getOrderByItems(docProd2.peekBufferedItems()[0]);\n\n    // validate order by items and types\n    // TODO: once V1 order by on different types is fixed this need to change\n    this.validateOrderByItems(orderByItemsRes1, orderByItemsRes2);\n\n    // no async call in the for loop\n    for (let i = 0; i < orderByItemsRes1.length; i++) {\n      // compares the orderby items one by one\n      const compRes = this.compareOrderByItem(orderByItemsRes1[i], orderByItemsRes2[i]);\n      if (compRes !== 0) {\n        if (this.sortOrder[i] === \"Ascending\") {\n          return compRes;\n        } else if (this.sortOrder[i] === \"Descending\") {\n          return -compRes;\n        }\n      }\n    }\n\n    return this.targetPartitionKeyRangeDocProdComparator(docProd1, docProd2);\n  }\n\n  // TODO: This smells funny\n  public compareValue(item1: unknown, type1: string, item2: unknown, type2: string): number {\n    if (type1 === \"object\" || type2 === \"object\") {\n      throw new Error(\"Tried to compare an object type\");\n    }\n    const type1Ord = TYPEORDCOMPARATOR[type1].ord;\n    const type2Ord = TYPEORDCOMPARATOR[type2].ord;\n    const typeCmp = type1Ord - type2Ord;\n\n    if (typeCmp !== 0) {\n      // if the types are different, use type ordinal\n      return typeCmp;\n    }\n\n    // both are of the same type\n    if (\n      type1Ord === TYPEORDCOMPARATOR[\"undefined\"].ord ||\n      type1Ord === TYPEORDCOMPARATOR[\"NoValue\"].ord\n    ) {\n      // if both types are undefined or Null they are equal\n      return 0;\n    }\n\n    const compFunc = TYPEORDCOMPARATOR[type1].compFunc;\n    if (typeof compFunc === \"undefined\") {\n      throw new Error(\"Cannot find the comparison function\");\n    }\n    // same type and type is defined compare the items\n    return compFunc(item1, item2);\n  }\n\n  private compareOrderByItem(orderByItem1: any, orderByItem2: any): number {\n    const type1 = this.getType(orderByItem1);\n    const type2 = this.getType(orderByItem2);\n    return this.compareValue(orderByItem1[\"item\"], type1, orderByItem2[\"item\"], type2);\n  }\n\n  private validateOrderByItems(res1: string[], res2: string[]): void {\n    if (res1.length !== res2.length) {\n      throw new Error(`Expected ${res1.length}, but got ${res2.length}.`);\n    }\n    if (res1.length !== this.sortOrder.length) {\n      throw new Error(\"orderByItems cannot have a different size than sort orders.\");\n    }\n\n    for (let i = 0; i < this.sortOrder.length; i++) {\n      const type1 = this.getType(res1[i]);\n      const type2 = this.getType(res2[i]);\n      if (type1 !== type2) {\n        throw new Error(\n          `Expected ${type1}, but got ${type2}. Cannot execute cross partition order-by queries on mixed types. Consider filtering your query using IS_STRING or IS_NUMBER to get around this exception.`,\n        );\n      }\n    }\n  }\n\n  private getType(\n    orderByItem: any,\n  ):\n    | \"string\"\n    | \"number\"\n    | \"bigint\"\n    | \"boolean\"\n    | \"symbol\"\n    | \"undefined\"\n    | \"object\"\n    | \"function\"\n    | \"NoValue\" {\n    // TODO: any item?\n    if (orderByItem === undefined || orderByItem.item === undefined) {\n      return \"NoValue\";\n    }\n    const type = typeof orderByItem.item;\n    if (TYPEORDCOMPARATOR[type] === undefined) {\n      throw new Error(`unrecognizable type ${type}`);\n    }\n    return type;\n  }\n\n  private getOrderByItems(res: any): any {\n    // TODO: any res?\n    return res[\"orderByItems\"];\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\nimport type { Aggregator } from \"./Aggregator\";\n\ninterface MaxAggregateResult {\n  count: number;\n  max?: number;\n}\n\n/** @hidden */\nexport class MaxAggregator implements Aggregator {\n  private value: number;\n  private comparer: OrderByDocumentProducerComparator;\n  /**\n   * Represents an aggregator for MAX operator.\n   * @hidden\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: MaxAggregateResult): void {\n    if (this.value === undefined) {\n      this.value = other.max;\n    } else if (\n      this.comparer.compareValue(other.max, typeof other.max, this.value, typeof this.value) > 0\n    ) {\n      this.value = other.max;\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.value;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { OrderByDocumentProducerComparator } from \"../orderByDocumentProducerComparator\";\nimport type { Aggregator } from \"./Aggregator\";\n\nexport interface MinAggregateResult {\n  min: number;\n  count: number;\n}\n\n/** @hidden */\nexport class MinAggregator implements Aggregator {\n  private value: number;\n  private comparer: OrderByDocumentProducerComparator;\n  /**\n   * Represents an aggregator for MIN operator.\n   * @hidden\n   */\n  constructor() {\n    this.value = undefined;\n    this.comparer = new OrderByDocumentProducerComparator([\"Ascending\"]);\n  }\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: MinAggregateResult): void {\n    if (this.value === undefined) {\n      // || typeof this.value === \"object\"\n      this.value = other.min;\n    } else {\n      const otherType = other.min === null ? \"NoValue\" : typeof other.min; // || typeof other === \"object\"\n      const thisType = this.value === null ? \"NoValue\" : typeof this.value;\n      if (this.comparer.compareValue(other.min, otherType, this.value, thisType) < 0) {\n        this.value = other.min;\n      }\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.value;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class SumAggregator implements Aggregator {\n  public sum: number;\n  /**\n   * Add the provided item to aggregation result.\n   */\n  public aggregate(other: number): void {\n    if (other === undefined) {\n      return;\n    }\n    if (this.sum === undefined) {\n      this.sum = other;\n    } else {\n      this.sum += other;\n    }\n  }\n\n  /**\n   * Get the aggregation result.\n   */\n  public getResult(): number {\n    return this.sum;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class StaticValueAggregator implements Aggregator {\n  public value: any;\n  public aggregate(other: unknown): void {\n    if (this.value === undefined) {\n      this.value = other;\n    }\n  }\n\n  public getResult(): any {\n    return this.value;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\nexport class MakeListAggregator implements Aggregator {\n  value: any[];\n\n  constructor() {\n    this.value = [];\n  }\n  public aggregate(other: any[]): void {\n    if (Array.isArray(other)) {\n      this.value.push(...other);\n    }\n  }\n  public getResult(): any[] {\n    const result = [...this.value];\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Aggregator } from \"./Aggregator\";\n\n/** @hidden */\n/**\n * Represents an aggregator that collects unique values into a set.\n */\nexport class MakeSetAggregator implements Aggregator {\n  value: Set<any>;\n\n  constructor() {\n    this.value = new Set();\n  }\n\n  /**\n   * Aggregates the values from another set into the current set.\n   * @param other - The set to aggregate.\n   */\n  public aggregate(other: any[]): void {\n    other.forEach((item) => {\n      this.value.add(item);\n    });\n  }\n\n  /**\n   * Gets the result of the MakeSetAggregator.\n   * @returns A Set containing the unique values collected by the aggregator.\n   */\n  public getResult(): any {\n    return Array.from(this.value);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AverageAggregator } from \"./AverageAggregator\";\nimport { CountAggregator } from \"./CountAggregator\";\nimport { MaxAggregator } from \"./MaxAggregator\";\nimport { MinAggregator } from \"./MinAggregator\";\nimport { SumAggregator } from \"./SumAggregator\";\nimport { StaticValueAggregator } from \"./StaticValueAggregator\";\nimport type { AggregateType } from \"../../request/ErrorResponse\";\nimport { MakeListAggregator } from \"./MakeListAggregator\";\nimport { MakeSetAggregator } from \"./MakeSetAggregator\";\n\nexport function createAggregator(\n  aggregateType: AggregateType,\n):\n  | AverageAggregator\n  | CountAggregator\n  | MaxAggregator\n  | MinAggregator\n  | SumAggregator\n  | StaticValueAggregator {\n  switch (aggregateType) {\n    case \"Average\":\n      return new AverageAggregator();\n    case \"Count\":\n      return new CountAggregator();\n    case \"Max\":\n      return new MaxAggregator();\n    case \"Min\":\n      return new MinAggregator();\n    case \"Sum\":\n      return new SumAggregator();\n    case \"MakeList\":\n      return new MakeListAggregator();\n    case \"MakeSet\":\n      return new MakeSetAggregator();\n    default:\n      return new StaticValueAggregator();\n  }\n}\n\nexport { AverageAggregator, CountAggregator, MaxAggregator, MinAggregator, SumAggregator };\nexport { Aggregator } from \"./Aggregator\";\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @hidden */\nexport enum FetchResultType {\n  \"Done\" = 0,\n  \"Exception\" = 1,\n  \"Result\" = 2,\n}\n\n/** @hidden */\nexport class FetchResult {\n  public feedResponse: any;\n  public headers: any;\n  public fetchResultType: FetchResultType;\n  public error: any;\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   *\n   * @param feedReponse - The response the document producer got back on a successful fetch\n   * @param error - The exception meant to be buffered on an unsuccessful fetch\n   * @hidden\n   */\n  constructor(feedResponse: unknown, error: unknown, headers?: unknown) {\n    // TODO: feedResponse/error\n    if (feedResponse !== undefined) {\n      this.feedResponse = feedResponse;\n      this.headers = headers;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PartitionKeyRange, Resource } from \"../client\";\nimport type { ClientContext } from \"../ClientContext\";\nimport {\n  Constants,\n  getIdFromLink,\n  getPathFromLink,\n  ResourceType,\n  StatusCodes,\n  SubStatusCodes,\n} from \"../common\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { FeedOptions } from \"../request\";\nimport type { Response } from \"../request\";\nimport { DefaultQueryExecutionContext } from \"./defaultQueryExecutionContext\";\nimport type { FetchFunctionCallback } from \"./defaultQueryExecutionContext\";\nimport { FetchResult, FetchResultType } from \"./FetchResult\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport type { CosmosHeaders } from \"./headerUtils\";\nimport type { SqlQuerySpec } from \"./index\";\n\n/** @hidden */\nexport class DocumentProducer {\n  private collectionLink: string;\n  private query: string | SqlQuerySpec;\n  public targetPartitionKeyRange: PartitionKeyRange;\n  public fetchResults: FetchResult[];\n  public allFetched: boolean;\n  private err: Error;\n  public previousContinuationToken: string;\n  public continuationToken: string;\n  public generation: number = 0;\n  private respHeaders: CosmosHeaders;\n  private internalExecutionContext: DefaultQueryExecutionContext;\n  public startEpk: string;\n  public endEpk: string;\n  public populateEpkRangeHeaders: boolean;\n\n  /**\n   * Provides the Target Partition Range Query Execution Context.\n   * @param clientContext  - The service endpoint to use to create the client.\n   * @param collectionLink - Represents collection link\n   * @param query          - A SQL query.\n   * @param targetPartitionKeyRange - Query Target Partition key Range\n   * @hidden\n   */\n  constructor(\n    private clientContext: ClientContext,\n    collectionLink: string,\n    query: SqlQuerySpec,\n    targetPartitionKeyRange: PartitionKeyRange,\n    options: FeedOptions,\n    correlatedActivityId: string,\n    startEpk?: string,\n    endEpk?: string,\n    populateEpkRangeHeaders: boolean = false,\n  ) {\n    // TODO: any options\n    this.collectionLink = collectionLink;\n    this.query = query;\n    this.targetPartitionKeyRange = targetPartitionKeyRange;\n    this.fetchResults = [];\n\n    this.allFetched = false;\n    this.err = undefined;\n\n    this.previousContinuationToken = undefined;\n    this.continuationToken = undefined;\n    this.respHeaders = getInitialHeader();\n\n    this.internalExecutionContext = new DefaultQueryExecutionContext(\n      options,\n      this.fetchFunction,\n      correlatedActivityId,\n    );\n    this.startEpk = startEpk;\n    this.endEpk = endEpk;\n    this.populateEpkRangeHeaders = populateEpkRangeHeaders;\n  }\n  public peekBufferedItems(): any[] {\n    const bufferedResults = [];\n    for (let i = 0, done = false; i < this.fetchResults.length && !done; i++) {\n      const fetchResult = this.fetchResults[i];\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          done = true;\n          break;\n        case FetchResultType.Exception:\n          done = true;\n          break;\n        case FetchResultType.Result:\n          bufferedResults.push(fetchResult.feedResponse);\n          break;\n      }\n    }\n    return bufferedResults;\n  }\n\n  public fetchFunction: FetchFunctionCallback = async (\n    diagnosticNode: DiagnosticNodeInternal,\n    options: FeedOptions,\n    correlatedActivityId: string,\n  ): Promise<Response<Resource>> => {\n    const path = getPathFromLink(this.collectionLink, ResourceType.item);\n    diagnosticNode.addData({ partitionKeyRangeId: this.targetPartitionKeyRange.id });\n    const id = getIdFromLink(this.collectionLink);\n    const startEpk = this.populateEpkRangeHeaders ? this.startEpk : undefined;\n    const endEpk = this.populateEpkRangeHeaders ? this.endEpk : undefined;\n\n    return this.clientContext.queryFeed({\n      path,\n      resourceType: ResourceType.item,\n      resourceId: id,\n      resultFn: (result: any) => result.Documents,\n      query: this.query,\n      options,\n      diagnosticNode,\n      partitionKeyRangeId: this.targetPartitionKeyRange[\"id\"],\n      correlatedActivityId: correlatedActivityId,\n      startEpk: startEpk,\n      endEpk: endEpk,\n    });\n  };\n\n  public hasMoreResults(): boolean {\n    return this.internalExecutionContext.hasMoreResults() || this.fetchResults.length !== 0;\n  }\n\n  public gotSplit(): boolean {\n    if (this.fetchResults.length !== 0) {\n      const fetchResult = this.fetchResults[0];\n      if (fetchResult.fetchResultType === FetchResultType.Exception) {\n        if (DocumentProducer._needPartitionKeyRangeCacheRefresh(fetchResult.error)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private _getAndResetActiveResponseHeaders(): CosmosHeaders {\n    const ret = this.respHeaders;\n    this.respHeaders = getInitialHeader();\n    return ret;\n  }\n\n  private _updateStates(err: any, allFetched: boolean): void {\n    if (err) {\n      this.err = err;\n      return;\n    }\n    if (allFetched) {\n      this.allFetched = true;\n    }\n    if (this.internalExecutionContext.continuationToken === this.continuationToken) {\n      // nothing changed\n      return;\n    }\n    this.previousContinuationToken = this.continuationToken;\n    this.continuationToken = this.internalExecutionContext.continuationToken;\n  }\n\n  private static _needPartitionKeyRangeCacheRefresh(error: any): boolean {\n    // TODO: error\n    return (\n      error.code === StatusCodes.Gone &&\n      \"substatus\" in error &&\n      error[\"substatus\"] === SubStatusCodes.PartitionKeyRangeGone\n    );\n  }\n\n  /**\n   * Fetches and bufferes the next page of results in internal buffer\n   */\n  public async bufferMore(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (this.err) {\n      throw this.err;\n    }\n\n    try {\n      const { result: resources, headers: headerResponse } =\n        await this.internalExecutionContext.fetchMore(diagnosticNode);\n      ++this.generation;\n      this._updateStates(undefined, resources === undefined);\n      if (resources !== undefined) {\n        // add fetched header to the 1st element in the buffer\n        let addHeaderToFetchResult = true;\n        resources.forEach((element: any) => {\n          this.fetchResults.push(\n            new FetchResult(\n              element,\n              undefined,\n              addHeaderToFetchResult ? headerResponse : getInitialHeader(),\n            ),\n          );\n          addHeaderToFetchResult = false;\n        });\n      }\n\n      // need to modify the header response so that the query metrics are per partition\n      if (headerResponse != null && Constants.HttpHeaders.QueryMetrics in headerResponse) {\n        // \"0\" is the default partition before one is actually assigned.\n        const queryMetrics = headerResponse[Constants.HttpHeaders.QueryMetrics][\"0\"];\n\n        // Wraping query metrics in a object where the keys are the partition key range.\n        headerResponse[Constants.HttpHeaders.QueryMetrics] = {};\n        headerResponse[Constants.HttpHeaders.QueryMetrics][this.targetPartitionKeyRange.id] =\n          queryMetrics;\n      }\n      mergeHeaders(this.respHeaders, headerResponse);\n    } catch (err: any) {\n      if (DocumentProducer._needPartitionKeyRangeCacheRefresh(err)) {\n        // Split just happend\n        // Buffer the error so the execution context can still get the feedResponses in the itemBuffer\n        const bufferedError = new FetchResult(undefined, err);\n        this.fetchResults.push(bufferedError);\n        mergeHeaders(this.respHeaders, err.headers);\n      } else {\n        this._updateStates(err, err.resources === undefined);\n        throw err;\n      }\n    }\n  }\n\n  public getTargetParitionKeyRange(): PartitionKeyRange {\n    return this.targetPartitionKeyRange;\n  }\n  /**\n   * Peak the next item in the buffer\n   */\n  public peakNextItem(): any {\n    if (this.err) {\n      throw this.err;\n    }\n    if (this.allFetched || this.fetchResults.length === 0) {\n      return undefined;\n    }\n    const fetchResult = this.fetchResults[0];\n\n    switch (fetchResult.fetchResultType) {\n      case FetchResultType.Done:\n        return undefined;\n\n      case FetchResultType.Exception: // do not throw this error\n        return undefined;\n\n      case FetchResultType.Result:\n        return fetchResult.feedResponse;\n    }\n  }\n\n  /**\n   * Returns the first item in the buffered results if any, or [] otherwise.\n   */\n  public async fetchNextItem(): Promise<Response<any>> {\n    if (this.err) {\n      this._updateStates(this.err, undefined);\n      throw this.err;\n    }\n    if (this.allFetched) {\n      return { result: undefined, headers: this._getAndResetActiveResponseHeaders() };\n    }\n    try {\n      const { result, headers } = this.current();\n      this._updateStates(undefined, result === undefined);\n      if (result === undefined || result.length === 0) {\n        return { result: undefined, headers };\n      }\n      return { result, headers }; //\n    } catch (err: any) {\n      this._updateStates(err, err.item === undefined);\n      throw err;\n    }\n  }\n  /**\n   * Fetches all the buffered results\n   */\n  public async fetchBufferedItems(): Promise<Response<any[]>> {\n    if (this.err) {\n      this._updateStates(this.err, undefined);\n      throw this.err;\n    }\n    if (this.allFetched) {\n      return { result: undefined, headers: this._getAndResetActiveResponseHeaders() };\n    }\n    const resources: any[] = [];\n    const resHeaders: CosmosHeaders = getInitialHeader();\n    try {\n      while (this.fetchResults.length > 0) {\n        const { result, headers } = this.current();\n        this._updateStates(undefined, result === undefined);\n        mergeHeaders(resHeaders, headers);\n        if (result === undefined) {\n          return { result: resources.length > 0 ? resources : undefined, headers: resHeaders };\n        } else {\n          resources.push(result);\n        }\n      }\n      return { result: resources, headers: resHeaders };\n    } catch (err: any) {\n      this._updateStates(err, err.item === undefined);\n      throw err;\n    }\n  }\n\n  /**\n   * Retrieve the current element on the DocumentProducer.\n   */\n  private current(): Response<any> {\n    // If something is buffered just give that\n    if (this.fetchResults.length > 0) {\n      const fetchResult = this.fetchResults.shift();\n      // Need to unwrap fetch results\n      switch (fetchResult.fetchResultType) {\n        case FetchResultType.Done:\n          return {\n            result: undefined,\n            headers: this._getAndResetActiveResponseHeaders(),\n          };\n        case FetchResultType.Exception:\n          fetchResult.error.headers = this._getAndResetActiveResponseHeaders();\n          throw fetchResult.error;\n        case FetchResultType.Result:\n          return {\n            result: fetchResult.feedResponse,\n            headers: this._getAndResetActiveResponseHeaders(),\n          };\n      }\n    }\n\n    // If there isn't anymore items left to fetch then let the user know.\n    if (this.allFetched) {\n      return {\n        result: undefined,\n        headers: this._getAndResetActiveResponseHeaders(),\n      };\n    }\n\n    // If the internal buffer is empty, return empty result\n    return { result: [], headers: this._getAndResetActiveResponseHeaders() };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport PriorityQueue from \"priorityqueuejs\";\nimport semaphore from \"semaphore\";\nimport type { ClientContext } from \"../ClientContext\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes\";\nimport type { FeedOptions, Response } from \"../request\";\nimport type { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport { QueryRange } from \"../routing/QueryRange\";\nimport { SmartRoutingMapProvider } from \"../routing/smartRoutingMapProvider\";\nimport type { CosmosHeaders } from \"./CosmosHeaders\";\nimport { DocumentProducer } from \"./documentProducer\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport type { SqlQuerySpec } from \"./SqlQuerySpec\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\n\n/** @hidden */\nconst logger: AzureLogger = createClientLogger(\"parallelQueryExecutionContextBase\");\n\n/** @hidden */\nexport enum ParallelQueryExecutionContextBaseStates {\n  started = \"started\",\n  inProgress = \"inProgress\",\n  ended = \"ended\",\n}\n\n/** @hidden */\nexport abstract class ParallelQueryExecutionContextBase implements ExecutionContext {\n  private err: any;\n  private state: any;\n  private static STATES = ParallelQueryExecutionContextBaseStates;\n  private routingProvider: SmartRoutingMapProvider;\n  protected sortOrders: any;\n  private requestContinuation: any;\n  private respHeaders: CosmosHeaders;\n  private unfilledDocumentProducersQueue: PriorityQueue<DocumentProducer>;\n  private bufferedDocumentProducersQueue: PriorityQueue<DocumentProducer>;\n  // TODO: update type of buffer from any --> generic can be used here\n  private buffer: any[];\n  private sem: any;\n  private diagnosticNodeWrapper: {\n    consumed: boolean;\n    diagnosticNode: DiagnosticNodeInternal;\n  };\n  /**\n   * Provides the ParallelQueryExecutionContextBase.\n   * This is the base class that ParallelQueryExecutionContext and OrderByQueryExecutionContext will derive from.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private collectionLink: string,\n    private query: string | SqlQuerySpec,\n    private options: FeedOptions,\n    private partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    private correlatedActivityId: string,\n  ) {\n    this.clientContext = clientContext;\n    this.collectionLink = collectionLink;\n    this.query = query;\n    this.options = options;\n    this.partitionedQueryExecutionInfo = partitionedQueryExecutionInfo;\n    this.correlatedActivityId = correlatedActivityId;\n    this.diagnosticNodeWrapper = {\n      consumed: false,\n      diagnosticNode: new DiagnosticNodeInternal(\n        clientContext.diagnosticLevel,\n        DiagnosticNodeType.PARALLEL_QUERY_NODE,\n        null,\n      ),\n    };\n    this.diagnosticNodeWrapper.diagnosticNode.addData({ stateful: true });\n    this.err = undefined;\n    this.state = ParallelQueryExecutionContextBase.STATES.started;\n    this.routingProvider = new SmartRoutingMapProvider(this.clientContext);\n    this.sortOrders = this.partitionedQueryExecutionInfo.queryInfo.orderBy;\n    this.buffer = [];\n\n    this.requestContinuation = options ? options.continuationToken || options.continuation : null;\n    // response headers of undergoing operation\n    this.respHeaders = getInitialHeader();\n    // Make priority queue for documentProducers\n    this.unfilledDocumentProducersQueue = new PriorityQueue<DocumentProducer>(\n      (a: DocumentProducer, b: DocumentProducer) => a.generation - b.generation,\n    );\n    // The comparator is supplied by the derived class\n    this.bufferedDocumentProducersQueue = new PriorityQueue<DocumentProducer>(\n      (a: DocumentProducer, b: DocumentProducer) => this.documentProducerComparator(b, a),\n    );\n    // Creating the documentProducers\n    this.sem = semaphore(1);\n    const createDocumentProducersAndFillUpPriorityQueueFunc = async (): Promise<void> => {\n      // ensure the lock is released after finishing up\n      try {\n        const targetPartitionRanges = await this._onTargetPartitionRanges();\n\n        const maxDegreeOfParallelism =\n          options.maxDegreeOfParallelism === undefined || options.maxDegreeOfParallelism < 1\n            ? targetPartitionRanges.length\n            : Math.min(options.maxDegreeOfParallelism, targetPartitionRanges.length);\n\n        logger.info(\n          \"Query starting against \" +\n            targetPartitionRanges.length +\n            \" ranges with parallelism of \" +\n            maxDegreeOfParallelism,\n        );\n\n        let filteredPartitionKeyRanges = [];\n        // The document producers generated from filteredPartitionKeyRanges\n        const targetPartitionQueryExecutionContextList: DocumentProducer[] = [];\n\n        if (this.requestContinuation) {\n          throw new Error(\"Continuation tokens are not yet supported for cross partition queries\");\n        } else {\n          filteredPartitionKeyRanges = targetPartitionRanges;\n        }\n        // Create one documentProducer for each partitionTargetRange\n        filteredPartitionKeyRanges.forEach((partitionTargetRange: any) => {\n          // TODO: any partitionTargetRange\n          // no async callback\n          targetPartitionQueryExecutionContextList.push(\n            this._createTargetPartitionQueryExecutionContext(partitionTargetRange, undefined),\n          );\n        });\n\n        // Fill up our priority queue with documentProducers\n        targetPartitionQueryExecutionContextList.forEach((documentProducer): void => {\n          // has async callback\n          try {\n            this.unfilledDocumentProducersQueue.enq(documentProducer);\n          } catch (e: any) {\n            this.err = e;\n          }\n        });\n\n        this.sem.leave();\n      } catch (err: any) {\n        this.err = err;\n        // release the lock\n        this.sem.leave();\n        return;\n      }\n    };\n    this.sem.take(createDocumentProducersAndFillUpPriorityQueueFunc);\n  }\n\n  protected abstract documentProducerComparator(\n    dp1: DocumentProducer,\n    dp2: DocumentProducer,\n  ): number;\n\n  private _mergeWithActiveResponseHeaders(headers: CosmosHeaders): void {\n    mergeHeaders(this.respHeaders, headers);\n  }\n\n  private _getAndResetActiveResponseHeaders(): CosmosHeaders {\n    const ret = this.respHeaders;\n    this.respHeaders = getInitialHeader();\n    return ret;\n  }\n\n  private getDiagnosticNode(): DiagnosticNodeInternal {\n    return this.diagnosticNodeWrapper.diagnosticNode;\n  }\n\n  private async _onTargetPartitionRanges(): Promise<any[]> {\n    // invokes the callback when the target partition ranges are ready\n    const parsedRanges = this.partitionedQueryExecutionInfo.queryRanges;\n    const queryRanges = parsedRanges.map((item) => QueryRange.parseFromDict(item));\n    return this.routingProvider.getOverlappingRanges(\n      this.collectionLink,\n      queryRanges,\n      this.getDiagnosticNode(),\n    );\n  }\n\n  /**\n   * Gets the replacement ranges for a partitionkeyrange that has been split\n   */\n  private async _getReplacementPartitionKeyRanges(\n    documentProducer: DocumentProducer,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<any[]> {\n    const partitionKeyRange = documentProducer.targetPartitionKeyRange;\n    // Download the new routing map\n    this.routingProvider = new SmartRoutingMapProvider(this.clientContext);\n    // Get the queryRange that relates to this partitionKeyRange\n    const queryRange = QueryRange.parsePartitionKeyRange(partitionKeyRange);\n    return this.routingProvider.getOverlappingRanges(\n      this.collectionLink,\n      [queryRange],\n      diagnosticNode,\n    );\n  }\n\n  private async _enqueueReplacementDocumentProducers(\n    error: any,\n    diagnosticNode: DiagnosticNodeInternal,\n    documentProducer: DocumentProducer,\n  ): Promise<void> {\n    // Get the replacement ranges\n    const replacementPartitionKeyRanges = await this._getReplacementPartitionKeyRanges(\n      documentProducer,\n      diagnosticNode,\n    );\n\n    if (replacementPartitionKeyRanges.length === 0) {\n      throw error;\n    } else if (replacementPartitionKeyRanges.length === 1) {\n      // Partition is gone due to Merge\n      // Create the replacement documentProducer with populateEpkRangeHeaders Flag set to true to set startEpk and endEpk headers\n      const replacementDocumentProducer = this._createTargetPartitionQueryExecutionContext(\n        replacementPartitionKeyRanges[0],\n        documentProducer.continuationToken,\n        documentProducer.startEpk,\n        documentProducer.endEpk,\n        true,\n      );\n\n      this.unfilledDocumentProducersQueue.enq(replacementDocumentProducer);\n    } else {\n      // Create the replacement documentProducers\n      const replacementDocumentProducers: DocumentProducer[] = [];\n      replacementPartitionKeyRanges.forEach((partitionKeyRange) => {\n        const queryRange = QueryRange.parsePartitionKeyRange(partitionKeyRange);\n        // Create replacment document producers with the parent's continuationToken\n        const replacementDocumentProducer = this._createTargetPartitionQueryExecutionContext(\n          partitionKeyRange,\n          documentProducer.continuationToken,\n          queryRange.min,\n          queryRange.max,\n          false,\n        );\n        replacementDocumentProducers.push(replacementDocumentProducer);\n      });\n\n      // add document producers to the queue\n      replacementDocumentProducers.forEach((replacementDocumentProducer) => {\n        if (replacementDocumentProducer.hasMoreResults()) {\n          this.unfilledDocumentProducersQueue.enq(replacementDocumentProducer);\n        }\n      });\n    }\n  }\n\n  private static _needPartitionKeyRangeCacheRefresh(error: any): boolean {\n    // TODO: any error\n    return (\n      error.code === StatusCodes.Gone &&\n      \"substatus\" in error &&\n      error[\"substatus\"] === SubStatusCodes.PartitionKeyRangeGone\n    );\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs based on the value of the continuation\n   * token or the elements remaining on the current batch in the QueryIterator.\n   * @returns true if there is other elements to process in the ParallelQueryExecutionContextBase.\n   */\n  public hasMoreResults(): boolean {\n    return (\n      !this.err &&\n      (this.buffer.length > 0 || this.state !== ParallelQueryExecutionContextBase.STATES.ended)\n    );\n  }\n\n  /**\n   * Creates target partition range Query Execution Context\n   */\n  private _createTargetPartitionQueryExecutionContext(\n    partitionKeyTargetRange: any,\n    continuationToken?: any,\n    startEpk?: string,\n    endEpk?: string,\n    populateEpkRangeHeaders?: boolean,\n  ): DocumentProducer {\n    let rewrittenQuery = this.partitionedQueryExecutionInfo.queryInfo.rewrittenQuery;\n    let sqlQuerySpec: SqlQuerySpec;\n    const query = this.query;\n    if (typeof query === \"string\") {\n      sqlQuerySpec = { query };\n    } else {\n      sqlQuerySpec = query;\n    }\n\n    const formatPlaceHolder = \"{documentdb-formattableorderbyquery-filter}\";\n    if (rewrittenQuery) {\n      sqlQuerySpec = JSON.parse(JSON.stringify(sqlQuerySpec));\n      // We hardcode the formattable filter to true for now\n      rewrittenQuery = rewrittenQuery.replace(formatPlaceHolder, \"true\");\n      sqlQuerySpec[\"query\"] = rewrittenQuery;\n    }\n\n    const options = { ...this.options };\n    options.continuationToken = continuationToken;\n\n    return new DocumentProducer(\n      this.clientContext,\n      this.collectionLink,\n      sqlQuerySpec,\n      partitionKeyTargetRange,\n      options,\n      this.correlatedActivityId,\n      startEpk,\n      endEpk,\n      populateEpkRangeHeaders,\n    );\n  }\n  protected async drainBufferedItems(): Promise<Response<any>> {\n    return new Promise<Response<any>>((resolve, reject) => {\n      this.sem.take(() => {\n        if (this.err) {\n          // if there is a prior error return error\n          this.sem.leave();\n          this.err.headers = this._getAndResetActiveResponseHeaders();\n          reject(this.err);\n          return;\n        }\n\n        // return undefined if there is no more results\n        if (this.buffer.length === 0) {\n          this.sem.leave();\n          return resolve({\n            result: this.state === ParallelQueryExecutionContextBase.STATES.ended ? undefined : [],\n            headers: this._getAndResetActiveResponseHeaders(),\n          });\n        }\n        // draing the entire buffer object and return that in result of return object\n        const bufferedResults = this.buffer;\n        this.buffer = [];\n\n        // release the lock before returning\n        this.sem.leave();\n        // invoke the callback on the item\n        return resolve({\n          result: bufferedResults,\n          headers: this._getAndResetActiveResponseHeaders(),\n        });\n      });\n    });\n  }\n\n  /**\n   * Buffers document producers based on the maximum degree of parallelism.\n   * Moves document producers from the unfilled queue to the buffered queue.\n   * @param diagnosticNode - The diagnostic node for logging and tracing.\n   * @returns A promise that resolves when buffering is complete.\n   */\n  protected async bufferDocumentProducers(diagnosticNode?: DiagnosticNodeInternal): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.sem.take(async () => {\n        if (this.err) {\n          this.sem.leave();\n          reject(this.err);\n          return;\n        }\n        this.updateStates(this.err);\n\n        if (this.state === ParallelQueryExecutionContextBase.STATES.ended) {\n          this.sem.leave();\n          resolve();\n          return;\n        }\n\n        if (this.unfilledDocumentProducersQueue.size() === 0) {\n          this.sem.leave();\n          resolve();\n          return;\n        }\n\n        try {\n          const maxDegreeOfParallelism =\n            this.options.maxDegreeOfParallelism === undefined ||\n            this.options.maxDegreeOfParallelism < 1\n              ? this.unfilledDocumentProducersQueue.size()\n              : Math.min(\n                  this.options.maxDegreeOfParallelism,\n                  this.unfilledDocumentProducersQueue.size(),\n                );\n\n          const documentProducers: DocumentProducer[] = [];\n          while (\n            documentProducers.length < maxDegreeOfParallelism &&\n            this.unfilledDocumentProducersQueue.size() > 0\n          ) {\n            let documentProducer: DocumentProducer;\n            try {\n              documentProducer = this.unfilledDocumentProducersQueue.deq();\n            } catch (e: any) {\n              this.err = e;\n              this.err.headers = this._getAndResetActiveResponseHeaders();\n              reject(this.err);\n              return;\n            }\n            documentProducers.push(documentProducer);\n          }\n\n          const bufferDocumentProducer = async (\n            documentProducer: DocumentProducer,\n          ): Promise<void> => {\n            try {\n              await documentProducer.bufferMore(diagnosticNode);\n              // if buffer of document producer is filled, add it to the buffered document producers queue\n              const nextItem = documentProducer.peakNextItem();\n              if (nextItem !== undefined) {\n                this.bufferedDocumentProducersQueue.enq(documentProducer);\n              } else if (documentProducer.hasMoreResults()) {\n                this.unfilledDocumentProducersQueue.enq(documentProducer);\n              }\n            } catch (err) {\n              if (ParallelQueryExecutionContextBase._needPartitionKeyRangeCacheRefresh(err)) {\n                // We want the document producer enqueued\n                // So that later parts of the code can repair the execution context\n                // refresh the partition key ranges and ctreate new document producers and add it to the queue\n                await this._enqueueReplacementDocumentProducers(\n                  err,\n                  diagnosticNode,\n                  documentProducer,\n                );\n                resolve();\n              } else {\n                this.err = err;\n                this.err.headers = this._getAndResetActiveResponseHeaders();\n                reject(err);\n              }\n            }\n          };\n\n          try {\n            await Promise.all(\n              documentProducers.map((producer) => bufferDocumentProducer(producer)),\n            );\n          } catch (err) {\n            this.err = err;\n            this.err.headers = this._getAndResetActiveResponseHeaders();\n            reject(err);\n            return;\n          }\n          resolve();\n        } catch (err) {\n          this.err = err;\n          this.err.headers = this._getAndResetActiveResponseHeaders();\n          reject(err);\n        } finally {\n          this.sem.leave();\n        }\n      });\n    });\n  }\n  /**\n   * Drains the buffer of filled document producers and appends their items to the main buffer.\n   * @param isOrderBy - Indicates if the query is an order by query.\n   * @returns A promise that resolves when the buffer is filled.\n   */\n  protected async fillBufferFromBufferQueue(isOrderBy: boolean = false): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.sem.take(async () => {\n        if (this.err) {\n          // if there is a prior error return error\n          this.sem.leave();\n          this.err.headers = this._getAndResetActiveResponseHeaders();\n          reject(this.err);\n          return;\n        }\n\n        if (\n          this.state === ParallelQueryExecutionContextBase.STATES.ended ||\n          this.bufferedDocumentProducersQueue.size() === 0\n        ) {\n          this.sem.leave();\n          resolve();\n          return;\n        }\n\n        try {\n          if (isOrderBy) {\n            while (\n              this.unfilledDocumentProducersQueue.isEmpty() &&\n              this.bufferedDocumentProducersQueue.size() > 0\n            ) {\n              const documentProducer = this.bufferedDocumentProducersQueue.deq();\n              const { result, headers } = await documentProducer.fetchNextItem();\n              this._mergeWithActiveResponseHeaders(headers);\n              if (result) {\n                this.buffer.push(result);\n              }\n              if (documentProducer.peakNextItem() !== undefined) {\n                this.bufferedDocumentProducersQueue.enq(documentProducer);\n              } else if (documentProducer.hasMoreResults()) {\n                this.unfilledDocumentProducersQueue.enq(documentProducer);\n              } else {\n                // no more results in document producer\n              }\n            }\n          } else {\n            while (this.bufferedDocumentProducersQueue.size() > 0) {\n              const documentProducer = this.bufferedDocumentProducersQueue.deq();\n              const { result, headers } = await documentProducer.fetchBufferedItems();\n              this._mergeWithActiveResponseHeaders(headers);\n              if (result) {\n                this.buffer.push(...result);\n              }\n              if (documentProducer.hasMoreResults()) {\n                this.unfilledDocumentProducersQueue.enq(documentProducer);\n              }\n            }\n          }\n          this.updateStates(this.err);\n        } catch (err) {\n          this.err = err;\n          this.err.headers = this._getAndResetActiveResponseHeaders();\n          reject(this.err);\n          return;\n        } finally {\n          // release the lock before returning\n          this.sem.leave();\n        }\n        resolve();\n        return;\n      });\n    });\n  }\n\n  private updateStates(error: any): void {\n    if (error) {\n      this.err = error;\n      this.state = ParallelQueryExecutionContextBase.STATES.ended;\n      return;\n    }\n\n    if (this.state === ParallelQueryExecutionContextBase.STATES.started) {\n      this.state = ParallelQueryExecutionContextBase.STATES.inProgress;\n    }\n\n    const hasNoActiveProducers =\n      this.unfilledDocumentProducersQueue.size() === 0 &&\n      this.bufferedDocumentProducersQueue.size() === 0;\n\n    if (hasNoActiveProducers) {\n      this.state = ParallelQueryExecutionContextBase.STATES.ended;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DocumentProducer } from \"./documentProducer\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\nimport { Response } from \"../request\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\n\n/**\n * Provides the ParallelQueryExecutionContext.\n * This class is capable of handling parallelized queries and derives from ParallelQueryExecutionContextBase.\n * @hidden\n */\nexport class ParallelQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for ParallelQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers using the min value of the corresponding target partition.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(\n    docProd1: DocumentProducer,\n    docProd2: DocumentProducer,\n  ): number {\n    return docProd1.generation - docProd2.generation;\n  }\n\n  /**\n   * Fetches more results from the query execution context.\n   * @param diagnosticNode - Optional diagnostic node for tracing.\n   * @returns A promise that resolves to the fetched results.\n   * @hidden\n   */\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    try {\n      // Buffer document producers and fill buffer from the queue\n      await this.bufferDocumentProducers(diagnosticNode);\n      await this.fillBufferFromBufferQueue();\n\n      // Drain buffered items\n      return this.drainBufferedItems();\n    } catch (error) {\n      // Handle any errors that occur during fetching\n      console.error(\"Error fetching more documents:\", error);\n      throw error;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../ClientContext\";\nimport type { PartitionedQueryExecutionInfo } from \"../request/ErrorResponse\";\nimport type { FeedOptions } from \"../request/FeedOptions\";\nimport type { DocumentProducer } from \"./documentProducer\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { OrderByDocumentProducerComparator } from \"./orderByDocumentProducerComparator\";\nimport { ParallelQueryExecutionContextBase } from \"./parallelQueryExecutionContextBase\";\nimport type { SqlQuerySpec } from \"./SqlQuerySpec\";\n\n/** @hidden */\nexport class OrderByQueryExecutionContext\n  extends ParallelQueryExecutionContextBase\n  implements ExecutionContext\n{\n  private orderByComparator: any;\n  /**\n   * Provides the OrderByQueryExecutionContext.\n   * This class is capable of handling orderby queries and dervives from ParallelQueryExecutionContextBase.\n   *\n   * When handling a parallelized query, it instantiates one instance of\n   * DocumentProcuder per target partition key range and aggregates the result of each.\n   *\n   * @param clientContext - The service endpoint to use to create the client.\n   * @param collectionLink - The Collection Link\n   * @param options - Represents the feed options.\n   * @param partitionedQueryExecutionInfo - PartitionedQueryExecutionInfo\n   * @hidden\n   */\n  constructor(\n    clientContext: ClientContext,\n    collectionLink: string,\n    query: string | SqlQuerySpec,\n    options: FeedOptions,\n    partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    correlatedActivityId: string,\n  ) {\n    // Calling on base class constructor\n    super(\n      clientContext,\n      collectionLink,\n      query,\n      options,\n      partitionedQueryExecutionInfo,\n      correlatedActivityId,\n    );\n    this.orderByComparator = new OrderByDocumentProducerComparator(this.sortOrders);\n  }\n  // Instance members are inherited\n\n  // Overriding documentProducerComparator for OrderByQueryExecutionContexts\n  /**\n   * Provides a Comparator for document producers which respects orderby sort order.\n   * @returns Comparator Function\n   * @hidden\n   */\n  public documentProducerComparator(docProd1: DocumentProducer, docProd2: DocumentProducer): any {\n    return this.orderByComparator.compare(docProd1, docProd2);\n  }\n\n  /**\n   * Fetches more results from the query execution context.\n   * @param diagnosticNode - Optional diagnostic node for tracing.\n   * @returns A promise that resolves to the fetched results.\n   * @hidden\n   */\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<any> {\n    try {\n      await this.bufferDocumentProducers(diagnosticNode);\n      await this.fillBufferFromBufferQueue(true);\n      return this.drainBufferedItems();\n    } catch (error) {\n      console.error(\"Error fetching more results:\", error);\n      throw error;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\n\n/** @hidden */\nexport class OffsetLimitEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private offset: number,\n    private limit: number,\n  ) {}\n\n  public hasMoreResults(): boolean {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const aggregateHeaders = getInitialHeader();\n    const buffer: any[] = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n    if (response === undefined || response.result === undefined) {\n      return { result: undefined, headers: response.headers };\n    }\n\n    for (const item of response.result) {\n      if (this.offset > 0) {\n        this.offset--;\n      } else if (this.limit > 0) {\n        buffer.push(item);\n        this.limit--;\n      }\n    }\n    return { result: buffer, headers: aggregateHeaders };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\n\n/** @hidden */\nexport class OrderByEndpointComponent implements ExecutionContext {\n  /**\n   * Represents an endpoint in handling an order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(\n    private executionContext: ExecutionContext,\n    private emitRawOrderByPayload: boolean = false,\n  ) {}\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the OrderByEndpointComponent.\n   */\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const buffer: any[] = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    if (response === undefined || response.result === undefined) {\n      return { result: undefined, headers: response.headers };\n    }\n    for (const item of response.result) {\n      if (this.emitRawOrderByPayload) {\n        buffer.push(item);\n      } else {\n        buffer.push(item.payload);\n      }\n    }\n\n    return { result: buffer, headers: response.headers };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createHash } from \"crypto\";\n\nexport async function digest(str: string): Promise<string> {\n  const hash = createHash(\"sha256\");\n  hash.update(str, \"utf8\");\n  return hash.digest(\"hex\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { digest } from \"./digest\";\nimport stableStringify from \"fast-json-stable-stringify\";\n\nexport async function hashObject(object: unknown): Promise<string> {\n  const stringifiedObject = stableStringify(object);\n  return digest(stringifiedObject);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\n/** @hidden */\nexport class OrderedDistinctEndpointComponent implements ExecutionContext {\n  private hashedLastResult: string;\n  constructor(private executionContext: ExecutionContext) {}\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const buffer: any[] = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    if (response === undefined || response.result === undefined) {\n      return { result: undefined, headers: response.headers };\n    }\n    for (const item of response.result) {\n      if (item) {\n        const hashedResult = await hashObject(item);\n        if (hashedResult !== this.hashedLastResult) {\n          buffer.push(item);\n          this.hashedLastResult = hashedResult;\n        }\n      }\n    }\n    return { result: buffer, headers: response.headers };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\n/** @hidden */\nexport class UnorderedDistinctEndpointComponent implements ExecutionContext {\n  private hashedResults: Set<string>;\n  constructor(private executionContext: ExecutionContext) {\n    this.hashedResults = new Set();\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const buffer: any[] = [];\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    if (response === undefined || response.result === undefined) {\n      return { result: undefined, headers: response.headers };\n    }\n    for (const item of response.result) {\n      if (item) {\n        const hashedResult = await hashObject(item);\n        if (!this.hashedResults.has(hashedResult)) {\n          buffer.push(item);\n          this.hashedResults.add(hashedResult);\n        }\n      }\n    }\n    return { result: buffer, headers: response.headers };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// All aggregates are effectively a group by operation\n// The empty group is used for aggregates without a GROUP BY clause\nexport const emptyGroup = \"__empty__\";\n\n// Newer API versions rewrite the query to return `item2`. It fixes some legacy issues with the original `item` result\n// Aggregator code should use item2 when available\nexport const extractAggregateResult = (payload: { item2?: unknown; item: unknown }): any =>\n  Object.keys(payload).length > 0 ? (payload.item2 ? payload.item2 : payload.item) : null;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport type { CosmosHeaders } from \"../CosmosHeaders\";\nimport type { QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { Aggregator } from \"../Aggregators\";\nimport { createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private queryInfo: QueryInfo,\n  ) {}\n\n  private readonly groupings: Map<string, Map<string, Aggregator>> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private completed: boolean = false;\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n    const aggregateHeaders = getInitialHeader();\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n\n    if (response === undefined || response.result === undefined) {\n      // If there are any groupings, consolidate and return them\n      if (this.groupings.size > 0) {\n        return this.consolidateGroupResults(aggregateHeaders);\n      }\n      return { result: undefined, headers: aggregateHeaders };\n    }\n\n    for (const item of response.result as GroupByResult[]) {\n      // If it exists, process it via aggregators\n      if (item) {\n        const group = item.groupByItems ? await hashObject(item.groupByItems) : emptyGroup;\n        const aggregators = this.groupings.get(group);\n        const payload = item.payload;\n        if (aggregators) {\n          // Iterator over all results in the payload\n          for (const key of Object.keys(payload)) {\n            // in case the value of a group is null make sure we create a dummy payload with item2==null\n            const effectiveGroupByValue = payload[key]\n              ? payload[key]\n              : new Map().set(\"item2\", null);\n            const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n            aggregators.get(key).aggregate(aggregateResult);\n          }\n        } else {\n          // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n          const grouping = new Map();\n          this.groupings.set(group, grouping);\n          // Iterator over all results in the payload\n          for (const key of Object.keys(payload)) {\n            const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n            // Create a new aggregator for this specific aggregate field\n            const aggregator = createAggregator(aggregateType);\n            grouping.set(key, aggregator);\n            if (aggregateType) {\n              const aggregateResult = extractAggregateResult(payload[key]);\n              aggregator.aggregate(aggregateResult);\n            } else {\n              aggregator.aggregate(payload[key]);\n            }\n          }\n        }\n      }\n    }\n\n    if (this.executionContext.hasMoreResults()) {\n      return {\n        result: [],\n        headers: aggregateHeaders,\n      };\n    } else {\n      return this.consolidateGroupResults(aggregateHeaders);\n    }\n  }\n\n  private consolidateGroupResults(aggregateHeaders: CosmosHeaders): Response<any> {\n    for (const grouping of this.groupings.values()) {\n      const groupResult: any = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return { result: this.aggregateResultArray, headers: aggregateHeaders };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport type { CosmosHeaders } from \"../CosmosHeaders\";\nimport type { AggregateType, QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { Aggregator } from \"../Aggregators\";\nimport { createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByValueEndpointComponent implements ExecutionContext {\n  private readonly aggregators: Map<string, Aggregator> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private aggregateType: AggregateType;\n  private completed: boolean = false;\n\n  constructor(\n    private executionContext: ExecutionContext,\n    private queryInfo: QueryInfo,\n  ) {\n    // VALUE queries will only every have a single grouping\n    this.aggregateType = this.queryInfo.aggregates[0];\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n    const aggregateHeaders = getInitialHeader();\n    const response = await this.executionContext.fetchMore(diagnosticNode);\n    mergeHeaders(aggregateHeaders, response.headers);\n\n    if (response === undefined || response.result === undefined) {\n      if (this.aggregators.size > 0) {\n        return this.generateAggregateResponse(aggregateHeaders);\n      }\n      return { result: undefined, headers: aggregateHeaders };\n    }\n\n    for (const item of response.result as GroupByResult[]) {\n      if (item) {\n        let grouping: string = emptyGroup;\n        let payload: any = item;\n        if (item.groupByItems) {\n          // If the query contains a GROUP BY clause, it will have a payload property and groupByItems\n          payload = item.payload;\n          grouping = await hashObject(item.groupByItems);\n        }\n\n        const aggregator = this.aggregators.get(grouping);\n        if (!aggregator) {\n          // This is the first time we have seen a grouping so create a new aggregator\n          this.aggregators.set(grouping, createAggregator(this.aggregateType));\n        }\n\n        if (this.aggregateType) {\n          const aggregateResult = extractAggregateResult(payload[0]);\n          // if aggregate result is null, we need to short circuit aggregation and return undefined\n          if (aggregateResult === null) {\n            this.completed = true;\n          }\n          this.aggregators.get(grouping).aggregate(aggregateResult);\n        } else {\n          // Queries with no aggregates pass the payload directly to the aggregator\n          // Example: SELECT VALUE c.team FROM c GROUP BY c.team\n          this.aggregators.get(grouping).aggregate(payload);\n        }\n      }\n    }\n\n    // We bail early since we got an undefined result back `[{}]`\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: aggregateHeaders,\n      };\n    }\n\n    if (this.executionContext.hasMoreResults()) {\n      return { result: [], headers: aggregateHeaders };\n    } else {\n      // If no results are left in the underlying execution context, convert our aggregate results to an array\n      return this.generateAggregateResponse(aggregateHeaders);\n    }\n  }\n\n  private generateAggregateResponse(aggregateHeaders: CosmosHeaders): Response<any> {\n    for (const aggregator of this.aggregators.values()) {\n      const result = aggregator.getResult();\n      if (result !== undefined) {\n        this.aggregateResultArray.push(result);\n      }\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray,\n      headers: aggregateHeaders,\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport PriorityQueue from \"priorityqueuejs\";\n\nexport class FixedSizePriorityQueue<T> {\n  private pq: PriorityQueue<T>;\n  // The compare function should return a positive number if a is greater than b, a negative number if a is less than b, and 0 if a is equal to b.\n  private compareFn: (a: T, b: T) => number;\n  private pqMaxSize: number;\n\n  constructor(compareFn: (a: T, b: T) => number, pqMaxSize: number) {\n    this.compareFn = compareFn;\n    this.pq = new PriorityQueue<T>(this.compareFn);\n    this.pqMaxSize = pqMaxSize;\n  }\n\n  public enqueue(item: T): void {\n    if (this.pq.size() < this.pqMaxSize) {\n      this.pq.enq(item);\n    } else {\n      const topItem = this.pq.peek();\n      if (this.compareFn(topItem, item) > 0) {\n        this.pq.deq();\n        this.pq.enq(item);\n      }\n    }\n  }\n\n  public dequeue(): T {\n    return this.pq.deq();\n  }\n\n  public size(): number {\n    return this.pq.size();\n  }\n\n  public isEmpty(): boolean {\n    return this.pq.isEmpty();\n  }\n\n  public peek(): T {\n    return this.pq.peek();\n  }\n\n  public getTopElements(): T[] {\n    const elements: T[] = [];\n    while (!this.pq.isEmpty()) {\n      elements.unshift(this.pq.deq());\n    }\n    return elements;\n  }\n\n  // Create a new instance of FixedSizePriorityQueue with a reversed compare function and the same maximum size.\n  // Enqueue all elements from the current priority queue into the reverse priority queue.\n  public reverse(): FixedSizePriorityQueue<T> {\n    const reversePQ = new FixedSizePriorityQueue<T>(\n      (a: T, b: T) => -this.compareFn(a, b),\n      this.pqMaxSize,\n    );\n    while (!this.pq.isEmpty()) {\n      reversePQ.enqueue(this.pq.deq());\n    }\n    return reversePQ;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Stores the most favourable distinct result from a set of nonStreamingOrderBy results.\n */\nexport class NonStreamingOrderByMap<T> {\n  private map: Map<string, T>;\n  private compareFn: (a: T | undefined, b: T | undefined) => number;\n\n  constructor(compareFn: (a: T | undefined, b: T | undefined) => number) {\n    this.compareFn = compareFn;\n    this.map = new Map<string, T>();\n  }\n\n  public set(key: string, value: T): void {\n    if (!this.map.has(key)) {\n      // If the key is not present in the map, add it.\n      this.map.set(key, value);\n    } else {\n      // If the key is present in the map, compare the similarity score of the new value with the old value. Keep the more favourable one.\n      const oldValue = this.map.get(key);\n      if (this.replaceResults(oldValue, value)) {\n        this.map.set(key, value);\n      }\n    }\n  }\n\n  public get(key: string): T | undefined {\n    if (!this.map.has(key)) return undefined;\n\n    return this.map.get(key);\n  }\n  /**\n   * Returns all the values in the map and resets the map.\n   */\n  public getAllValuesAndReset(): T[] {\n    const res: T[] = [];\n    for (const [key, value] of this.map) {\n      res.push(value);\n      this.map.delete(key);\n    }\n    return res;\n  }\n\n  private replaceResults(res1: T | undefined, res2: T | undefined): boolean {\n    const res = this.compareFn(res1, res2);\n    if (res < 0) return true;\n\n    return false;\n  }\n\n  public size(): number {\n    return this.map.size;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { NonStreamingOrderByResult } from \"./nonStreamingOrderByResult\";\n\n/**\n *  @hidden\n * ord is used to compare different types. Eg. in ascending order, for cross type comparison, boolean will come first, then number and, then string.\n * compFunc is used to compare the same type comparison.\n */\nconst TYPEORDCOMPARATOR: {\n  [type: string]: { ord: number; compFunc?: (a: any, b: any) => number };\n} = Object.freeze({\n  NoValue: {\n    ord: 0,\n  },\n  undefined: {\n    ord: 1,\n  },\n  boolean: {\n    ord: 2,\n    compFunc: (a: boolean, b: boolean) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  number: {\n    ord: 4,\n    compFunc: (a: number, b: number) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n  string: {\n    ord: 5,\n    compFunc: (a: string, b: string) => {\n      return a === b ? 0 : a > b ? 1 : -1;\n    },\n  },\n});\n\n/** @hidden */\nexport class OrderByComparator {\n  constructor(public sortOrder: string[]) {}\n\n  public compareItems(item1: NonStreamingOrderByResult, item2: NonStreamingOrderByResult): number {\n    const orderByItemsRes1 = this.getOrderByItems(item1);\n    const orderByItemsRes2 = this.getOrderByItems(item2);\n\n    for (let i = 0; i < orderByItemsRes1.length; i++) {\n      // compares the orderby items one by one\n      const compRes = this.compareOrderByItem(orderByItemsRes1[i], orderByItemsRes2[i]);\n      if (compRes !== 0) {\n        if (this.sortOrder[i] === \"Descending\") {\n          return compRes;\n        } else if (this.sortOrder[i] === \"Ascending\") {\n          return -compRes;\n        }\n      }\n    }\n  }\n\n  private getOrderByItems(res: any): any {\n    return res[\"orderByItems\"];\n  }\n\n  private compareOrderByItem(orderByItem1: any, orderByItem2: any): number {\n    const type1 = this.getType(orderByItem1);\n    const type2 = this.getType(orderByItem2);\n    return this.compareValue(orderByItem1[\"item\"], type1, orderByItem2[\"item\"], type2);\n  }\n\n  private getType(\n    orderByItem: any,\n  ):\n    | \"string\"\n    | \"number\"\n    | \"bigint\"\n    | \"boolean\"\n    | \"symbol\"\n    | \"undefined\"\n    | \"object\"\n    | \"function\"\n    | \"NoValue\" {\n    // TODO: any item?\n    if (orderByItem === undefined || orderByItem.item === undefined) {\n      return \"NoValue\";\n    }\n    const type = typeof orderByItem.item;\n    if (TYPEORDCOMPARATOR[type] === undefined) {\n      throw new Error(`unrecognizable type ${type}`);\n    }\n    return type;\n  }\n\n  private compareValue(item1: unknown, type1: string, item2: unknown, type2: string): number {\n    // TODO: https://github.com/Azure/azure-sdk-for-js/issues/30122\n    // currently we do not support same type and cross type comparision for object and arrays.\n\n    if (type1 === \"object\" || type2 === \"object\") {\n      throw new Error(\"Tried to compare an object type\");\n    }\n    const type1Ord = TYPEORDCOMPARATOR[type1].ord;\n    const type2Ord = TYPEORDCOMPARATOR[type2].ord;\n\n    // Validate if the two item are of same type or not based on the type ordinal.\n    const typeCmp = type1Ord - type2Ord;\n\n    // if not same type, compare based on the type ordinal. Lower ordinal takes precedence over higher ordinal.\n    if (typeCmp !== 0) {\n      return typeCmp;\n    }\n\n    // both are of the same type\n    if (\n      type1Ord === TYPEORDCOMPARATOR[\"undefined\"].ord ||\n      type1Ord === TYPEORDCOMPARATOR[\"NoValue\"].ord\n    ) {\n      // if both types are undefined or Null they are equal\n      return 0;\n    }\n\n    const compFunc = TYPEORDCOMPARATOR[type1].compFunc;\n    if (typeof compFunc === \"undefined\") {\n      throw new Error(\"Cannot find the comparison function\");\n    }\n    // same type and type is defined compare the items\n    return compFunc(item1, item2);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { QueryInfo, Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader } from \"../headerUtils\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport type { NonStreamingOrderByResult } from \"../nonStreamingOrderByResult\";\nimport { FixedSizePriorityQueue } from \"../../utils/fixedSizePriorityQueue\";\nimport { NonStreamingOrderByMap } from \"../../utils/nonStreamingOrderByMap\";\nimport { OrderByComparator } from \"../orderByComparator\";\n\n/**\n * @hidden\n * Represents an endpoint in handling an non-streaming order by distinct query.\n */\nexport class NonStreamingOrderByDistinctEndpointComponent implements ExecutionContext {\n  /**\n   * A Map that holds the distinct values of the items before storing in priority queue.\n   */\n  private aggregateMap: NonStreamingOrderByMap<NonStreamingOrderByResult>;\n  /**\n   * A priority queue to compute the final sorted results.\n   */\n  private nonStreamingOrderByPQ: FixedSizePriorityQueue<NonStreamingOrderByResult>;\n  /**\n   * Array to store the final sorted results.\n   */\n  private finalResultArray: NonStreamingOrderByResult[];\n\n  private sortOrders: string[];\n  /**\n   * Flag to determine if all results are fetched from backend and results can be returned.\n   */\n  private isCompleted: boolean = false;\n\n  constructor(\n    private executionContext: ExecutionContext,\n    private queryInfo: QueryInfo,\n    private priorityQueueBufferSize: number,\n    private emitRawOrderByPayload: boolean = false,\n  ) {\n    this.sortOrders = this.queryInfo.orderBy;\n    const comparator = new OrderByComparator(this.sortOrders);\n    this.aggregateMap = new NonStreamingOrderByMap<NonStreamingOrderByResult>(\n      (a: NonStreamingOrderByResult, b: NonStreamingOrderByResult) => {\n        return comparator.compareItems(a, b);\n      },\n    );\n    this.nonStreamingOrderByPQ = new FixedSizePriorityQueue<NonStreamingOrderByResult>(\n      (a: NonStreamingOrderByResult, b: NonStreamingOrderByResult) => {\n        return comparator.compareItems(b, a);\n      },\n      this.priorityQueueBufferSize,\n    );\n  }\n\n  /**\n   * Build final sorted result array from which responses will be served.\n   */\n  private async buildFinalResultArray(): Promise<void> {\n    // Fetch all distinct values from the map and store in priority queue.\n    const allValues = this.aggregateMap.getAllValuesAndReset();\n    for (const value of allValues) {\n      this.nonStreamingOrderByPQ.enqueue(value);\n    }\n\n    // Compute the final result array size based on offset and limit.\n    const offSet = this.queryInfo.offset ? this.queryInfo.offset : 0;\n    const queueSize = this.nonStreamingOrderByPQ.size();\n    const finalArraySize = queueSize - offSet;\n\n    if (finalArraySize <= 0) {\n      this.finalResultArray = [];\n    } else {\n      this.finalResultArray = new Array(finalArraySize);\n      // Only keep the final result array size number of items in the final result array and discard the rest.\n      for (let count = finalArraySize - 1; count >= 0; count--) {\n        if (this.emitRawOrderByPayload) {\n          this.finalResultArray[count] = this.nonStreamingOrderByPQ.dequeue();\n        } else {\n          this.finalResultArray[count] = this.nonStreamingOrderByPQ.dequeue()?.payload;\n        }\n      }\n    }\n  }\n\n  public hasMoreResults(): boolean {\n    if (this.priorityQueueBufferSize === 0) return false;\n    return this.executionContext.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.isCompleted) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n    let resHeaders = getInitialHeader();\n    // if size is 0, just return undefined to signal to more results. Valid if query is TOP 0 or LIMIT 0\n    if (this.priorityQueueBufferSize <= 0) {\n      return {\n        result: undefined,\n        headers: resHeaders,\n      };\n    }\n\n    // If there are more results in backend, keep filling map.\n    if (this.executionContext.hasMoreResults()) {\n      // Grab the next result\n      const response = await this.executionContext.fetchMore(diagnosticNode);\n      if (response === undefined || response.result === undefined) {\n        this.isCompleted = true;\n        if (this.aggregateMap.size() > 0) {\n          await this.buildFinalResultArray();\n          return {\n            result: this.finalResultArray,\n            headers: response.headers,\n          };\n        }\n        return { result: undefined, headers: response.headers };\n      }\n      resHeaders = response.headers;\n      for (const item of response.result) {\n        if (item) {\n          const key = await hashObject(item?.payload);\n          this.aggregateMap.set(key, item);\n        }\n      }\n\n      // return [] to signal that there are more results to fetch.\n      if (this.executionContext.hasMoreResults()) {\n        return {\n          result: [],\n          headers: resHeaders,\n        };\n      }\n    }\n\n    // If all results are fetched from backend, prepare final results\n    if (!this.executionContext.hasMoreResults() && !this.isCompleted) {\n      this.isCompleted = true;\n      await this.buildFinalResultArray();\n      return {\n        result: this.finalResultArray,\n        headers: resHeaders,\n      };\n    }\n    // Signal that there are no more results.\n    return {\n      result: undefined,\n      headers: resHeaders,\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../../request\";\nimport type { ExecutionContext } from \"../ExecutionContext\";\nimport { OrderByComparator } from \"../orderByComparator\";\nimport type { NonStreamingOrderByResult } from \"../nonStreamingOrderByResult\";\nimport { FixedSizePriorityQueue } from \"../../utils/fixedSizePriorityQueue\";\nimport type { CosmosHeaders } from \"../headerUtils\";\nimport { getInitialHeader } from \"../headerUtils\";\n\n/**\n * @hidden\n * Represents an endpoint in handling an non-streaming order by query.\n */\nexport class NonStreamingOrderByEndpointComponent implements ExecutionContext {\n  /**\n   * A priority queue to store the final sorted results.\n   */\n  private nonStreamingOrderByPQ: FixedSizePriorityQueue<NonStreamingOrderByResult>;\n  /**\n   * Flag to determine if all results are fetched from backend and results can be returned from priority queue.\n   */\n  private isCompleted: boolean = false;\n  /**\n   * Represents an endpoint in handling an non-streaming order by query. For each processed orderby\n   * result it returns 'payload' item of the result\n   *\n   * @param executionContext - Underlying Execution Context\n   * @hidden\n   */\n  constructor(\n    private executionContext: ExecutionContext,\n    private sortOrders: any[],\n    private priorityQueueBufferSize: number,\n    private offset: number = 0,\n    private emitRawOrderByPayload: boolean = false,\n  ) {\n    const comparator = new OrderByComparator(this.sortOrders);\n    this.nonStreamingOrderByPQ = new FixedSizePriorityQueue<NonStreamingOrderByResult>(\n      (a: NonStreamingOrderByResult, b: NonStreamingOrderByResult) => {\n        return comparator.compareItems(b, a);\n      },\n      this.priorityQueueBufferSize,\n    );\n  }\n\n  /**\n   * Determine if there are still remaining resources to processs.\n   * @returns true if there is other elements to process in the NonStreamingOrderByEndpointComponent.\n   */\n  public hasMoreResults(): boolean {\n    return this.priorityQueueBufferSize > 0 && this.executionContext.hasMoreResults();\n  }\n\n  /**\n   * Fetches the next batch of the result from the target container.\n   * @param diagnosticNode - The diagnostic information for the request.\n   */\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    if (this.isCompleted) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n    let resHeaders = getInitialHeader();\n    // if size is 0, just return undefined to signal to more results. Valid if query is TOP 0 or LIMIT 0\n    if (this.priorityQueueBufferSize <= 0) {\n      return {\n        result: undefined,\n        headers: resHeaders,\n      };\n    }\n    // If there are more results in backend, keep filling pq.\n    if (this.executionContext.hasMoreResults()) {\n      const response = await this.executionContext.fetchMore(diagnosticNode);\n      resHeaders = response.headers;\n      if (response === undefined || response.result === undefined) {\n        this.isCompleted = true;\n        if (!this.nonStreamingOrderByPQ.isEmpty()) {\n          return this.buildFinalResultArray(resHeaders);\n        }\n        return { result: undefined, headers: resHeaders };\n      }\n\n      for (const item of response.result) {\n        if (item !== undefined) {\n          this.nonStreamingOrderByPQ.enqueue(item);\n        }\n      }\n    }\n\n    // If the backend has more results to fetch, return [] to signal that there are more results to fetch.\n    if (this.executionContext.hasMoreResults()) {\n      return {\n        result: [],\n        headers: resHeaders,\n      };\n    }\n\n    // If all results are fetched from backend, prepare final results\n    if (!this.executionContext.hasMoreResults() && !this.isCompleted) {\n      this.isCompleted = true;\n      return this.buildFinalResultArray(resHeaders);\n    }\n\n    // If pq is empty, return undefined to signal that there are no more results.\n    return {\n      result: undefined,\n      headers: resHeaders,\n    };\n  }\n\n  private async buildFinalResultArray(resHeaders: CosmosHeaders): Promise<Response<any>> {\n    // Set isCompleted to true.\n    this.isCompleted = true;\n    // Reverse the priority queue to get the results in the correct order\n    this.nonStreamingOrderByPQ = this.nonStreamingOrderByPQ.reverse();\n    // For offset limit case we set the size of priority queue to offset + limit\n    // and we drain offset number of items from the priority queue\n    while (\n      this.offset < this.priorityQueueBufferSize &&\n      this.offset > 0 &&\n      !this.nonStreamingOrderByPQ.isEmpty()\n    ) {\n      this.nonStreamingOrderByPQ.dequeue();\n      this.offset--;\n    }\n\n    // If pq is not empty, return the result from pq.\n    if (!this.nonStreamingOrderByPQ.isEmpty()) {\n      const buffer: any[] = [];\n      if (this.emitRawOrderByPayload) {\n        while (!this.nonStreamingOrderByPQ.isEmpty()) {\n          buffer.push(this.nonStreamingOrderByPQ.dequeue());\n        }\n      } else {\n        while (!this.nonStreamingOrderByPQ.isEmpty()) {\n          buffer.push(this.nonStreamingOrderByPQ.dequeue()?.payload);\n        }\n      }\n      return {\n        result: buffer,\n        headers: resHeaders,\n      };\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../ClientContext\";\nimport type { Response, FeedOptions } from \"../request\";\nimport type { PartitionedQueryExecutionInfo, QueryInfo } from \"../request/ErrorResponse\";\nimport { ErrorResponse } from \"../request/ErrorResponse\";\nimport type { CosmosHeaders } from \"./CosmosHeaders\";\nimport { OffsetLimitEndpointComponent } from \"./EndpointComponent/OffsetLimitEndpointComponent\";\nimport { OrderByEndpointComponent } from \"./EndpointComponent/OrderByEndpointComponent\";\nimport { OrderedDistinctEndpointComponent } from \"./EndpointComponent/OrderedDistinctEndpointComponent\";\nimport { UnorderedDistinctEndpointComponent } from \"./EndpointComponent/UnorderedDistinctEndpointComponent\";\nimport { GroupByEndpointComponent } from \"./EndpointComponent/GroupByEndpointComponent\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { OrderByQueryExecutionContext } from \"./orderByQueryExecutionContext\";\nimport { ParallelQueryExecutionContext } from \"./parallelQueryExecutionContext\";\nimport { GroupByValueEndpointComponent } from \"./EndpointComponent/GroupByValueEndpointComponent\";\nimport type { SqlQuerySpec } from \"./SqlQuerySpec\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { NonStreamingOrderByDistinctEndpointComponent } from \"./EndpointComponent/NonStreamingOrderByDistinctEndpointComponent\";\nimport { NonStreamingOrderByEndpointComponent } from \"./EndpointComponent/NonStreamingOrderByEndpointComponent\";\n\n/** @hidden */\nexport class PipelinedQueryExecutionContext implements ExecutionContext {\n  private fetchBuffer: any[];\n  private fetchMoreRespHeaders: CosmosHeaders;\n  private endpoint: ExecutionContext;\n  private pageSize: number;\n  private vectorSearchBufferSize: number = 0;\n  private static DEFAULT_PAGE_SIZE = 10;\n  private static DEFAULT_MAX_VECTOR_SEARCH_BUFFER_SIZE = 50000;\n  private nonStreamingOrderBy = false;\n\n  constructor(\n    private clientContext: ClientContext,\n    private collectionLink: string,\n    private query: string | SqlQuerySpec,\n    private options: FeedOptions,\n    private partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    correlatedActivityId: string,\n    private emitRawOrderByPayload: boolean = false,\n  ) {\n    this.endpoint = null;\n    this.pageSize = options[\"maxItemCount\"];\n    if (this.pageSize === undefined) {\n      this.pageSize = PipelinedQueryExecutionContext.DEFAULT_PAGE_SIZE;\n    }\n    // Pick between Nonstreaming and streaming endpoints\n    this.nonStreamingOrderBy = partitionedQueryExecutionInfo.queryInfo.hasNonStreamingOrderBy;\n\n    // Pick between parallel vs order by execution context\n    const sortOrders = partitionedQueryExecutionInfo.queryInfo.orderBy;\n    // TODO: Currently we don't get any field from backend to determine streaming queries\n    if (this.nonStreamingOrderBy) {\n      if (!options.allowUnboundedNonStreamingQueries) {\n        this.checkQueryConstraints(partitionedQueryExecutionInfo.queryInfo);\n      }\n\n      this.vectorSearchBufferSize = this.calculateVectorSearchBufferSize(\n        partitionedQueryExecutionInfo.queryInfo,\n        options,\n      );\n      const maxBufferSize = options[\"vectorSearchBufferSize\"]\n        ? options[\"vectorSearchBufferSize\"]\n        : PipelinedQueryExecutionContext.DEFAULT_MAX_VECTOR_SEARCH_BUFFER_SIZE;\n\n      if (this.vectorSearchBufferSize > maxBufferSize) {\n        throw new ErrorResponse(\n          `Executing a vector search query with TOP or OFFSET + LIMIT value ${this.vectorSearchBufferSize} larger than the vectorSearchBufferSize ${maxBufferSize} ` +\n            `is not allowed`,\n        );\n      }\n\n      const distinctType = partitionedQueryExecutionInfo.queryInfo.distinctType;\n      const context: ExecutionContext = new ParallelQueryExecutionContext(\n        this.clientContext,\n        this.collectionLink,\n        this.query,\n        this.options,\n        this.partitionedQueryExecutionInfo,\n        correlatedActivityId,\n      );\n\n      if (distinctType === \"None\") {\n        this.endpoint = new NonStreamingOrderByEndpointComponent(\n          context,\n          sortOrders,\n          this.vectorSearchBufferSize,\n          partitionedQueryExecutionInfo.queryInfo.offset,\n          this.emitRawOrderByPayload,\n        );\n      } else {\n        this.endpoint = new NonStreamingOrderByDistinctEndpointComponent(\n          context,\n          partitionedQueryExecutionInfo.queryInfo,\n          this.vectorSearchBufferSize,\n          this.emitRawOrderByPayload,\n        );\n      }\n    } else {\n      if (Array.isArray(sortOrders) && sortOrders.length > 0) {\n        // Need to wrap orderby execution context in endpoint component, since the data is nested as a \\\n        //      \"payload\" property.\n        this.endpoint = new OrderByEndpointComponent(\n          new OrderByQueryExecutionContext(\n            this.clientContext,\n            this.collectionLink,\n            this.query,\n            this.options,\n            this.partitionedQueryExecutionInfo,\n            correlatedActivityId,\n          ),\n          this.emitRawOrderByPayload,\n        );\n      } else {\n        this.endpoint = new ParallelQueryExecutionContext(\n          this.clientContext,\n          this.collectionLink,\n          this.query,\n          this.options,\n          this.partitionedQueryExecutionInfo,\n          correlatedActivityId,\n        );\n      }\n      if (\n        Object.keys(partitionedQueryExecutionInfo.queryInfo.groupByAliasToAggregateType).length >\n          0 ||\n        partitionedQueryExecutionInfo.queryInfo.aggregates.length > 0 ||\n        partitionedQueryExecutionInfo.queryInfo.groupByExpressions.length > 0\n      ) {\n        if (partitionedQueryExecutionInfo.queryInfo.hasSelectValue) {\n          this.endpoint = new GroupByValueEndpointComponent(\n            this.endpoint,\n            partitionedQueryExecutionInfo.queryInfo,\n          );\n        } else {\n          this.endpoint = new GroupByEndpointComponent(\n            this.endpoint,\n            partitionedQueryExecutionInfo.queryInfo,\n          );\n        }\n      }\n\n      // If distinct then add that to the pipeline\n      const distinctType = partitionedQueryExecutionInfo.queryInfo.distinctType;\n      if (distinctType === \"Ordered\") {\n        this.endpoint = new OrderedDistinctEndpointComponent(this.endpoint);\n      }\n      if (distinctType === \"Unordered\") {\n        this.endpoint = new UnorderedDistinctEndpointComponent(this.endpoint);\n      }\n\n      // If top then add that to the pipeline. TOP N is effectively OFFSET 0 LIMIT N\n      const top = partitionedQueryExecutionInfo.queryInfo.top;\n      if (typeof top === \"number\") {\n        this.endpoint = new OffsetLimitEndpointComponent(this.endpoint, 0, top);\n      }\n\n      // If offset+limit then add that to the pipeline\n      const limit = partitionedQueryExecutionInfo.queryInfo.limit;\n      const offset = partitionedQueryExecutionInfo.queryInfo.offset;\n      if (typeof limit === \"number\" && typeof offset === \"number\") {\n        this.endpoint = new OffsetLimitEndpointComponent(this.endpoint, offset, limit);\n      }\n    }\n    this.fetchBuffer = [];\n  }\n\n  public hasMoreResults(): boolean {\n    return this.fetchBuffer.length !== 0 || this.endpoint.hasMoreResults();\n  }\n\n  public async fetchMore(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    this.fetchMoreRespHeaders = getInitialHeader();\n    return this._fetchMoreImplementation(diagnosticNode);\n  }\n\n  private async _fetchMoreImplementation(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<Response<any>> {\n    try {\n      if (this.fetchBuffer.length >= this.pageSize) {\n        const temp = this.fetchBuffer.slice(0, this.pageSize);\n        this.fetchBuffer = this.fetchBuffer.slice(this.pageSize);\n        return { result: temp, headers: this.fetchMoreRespHeaders };\n      } else {\n        const response = await this.endpoint.fetchMore(diagnosticNode);\n        mergeHeaders(this.fetchMoreRespHeaders, response.headers);\n        if (response === undefined || response.result === undefined) {\n          if (this.fetchBuffer.length > 0) {\n            const temp = this.fetchBuffer;\n            this.fetchBuffer = [];\n            return { result: temp, headers: this.fetchMoreRespHeaders };\n          } else {\n            return { result: undefined, headers: this.fetchMoreRespHeaders };\n          }\n        }\n        this.fetchBuffer.push(...response.result);\n\n        if (this.options.enableQueryControl) {\n          if (this.fetchBuffer.length >= this.pageSize) {\n            const temp = this.fetchBuffer.slice(0, this.pageSize);\n            this.fetchBuffer = this.fetchBuffer.slice(this.pageSize);\n            return { result: temp, headers: this.fetchMoreRespHeaders };\n          } else {\n            const temp = this.fetchBuffer;\n            this.fetchBuffer = [];\n            return { result: temp, headers: this.fetchMoreRespHeaders };\n          }\n        }\n        // Recursively fetch more results to ensure the pageSize number of results are returned\n        // to maintain compatibility with the previous implementation\n        return this._fetchMoreImplementation(diagnosticNode);\n      }\n    } catch (err: any) {\n      mergeHeaders(this.fetchMoreRespHeaders, err.headers);\n      err.headers = this.fetchMoreRespHeaders;\n      if (err) {\n        throw err;\n      }\n    }\n  }\n\n  private calculateVectorSearchBufferSize(queryInfo: QueryInfo, options: FeedOptions): number {\n    if (queryInfo.top === 0 || queryInfo.limit === 0) return 0;\n    return queryInfo.top\n      ? queryInfo.top\n      : queryInfo.limit\n        ? queryInfo.offset + queryInfo.limit\n        : options[\"vectorSearchBufferSize\"] && options[\"vectorSearchBufferSize\"] > 0\n          ? options[\"vectorSearchBufferSize\"]\n          : PipelinedQueryExecutionContext.DEFAULT_MAX_VECTOR_SEARCH_BUFFER_SIZE;\n  }\n\n  private checkQueryConstraints(queryInfo: QueryInfo): void {\n    const hasTop = queryInfo.top || queryInfo.top === 0;\n    const hasLimit = queryInfo.limit || queryInfo.limit === 0;\n    if (!hasTop && !hasLimit) {\n      throw new ErrorResponse(\n        \"Executing a non-streaming search query without TOP or LIMIT can consume a large number of RUs \" +\n          \"very fast and have long runtimes. Please ensure you are using one of the above two filters \" +\n          \"with your vector search query.\",\n      );\n    }\n    return;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ItemDefinition } from \"../client\";\n\nconst FieldNames = {\n  Rid: \"_rid\",\n  Payload: \"payload\",\n  ComponentScores: \"componentScores\",\n};\n\nexport class HybridSearchQueryResult {\n  rid: string;\n  componentScores: number[];\n  data: any;\n  score: number;\n  ranks: number[];\n\n  constructor(rid: string, componentScores: number[], data: Record<string, unknown>) {\n    this.rid = rid;\n    this.componentScores = componentScores;\n    this.data = data;\n  }\n\n  public static create<T extends ItemDefinition>(document: T): HybridSearchQueryResult {\n    const rid = document[FieldNames.Rid];\n    if (!rid) {\n      throw new Error(`${FieldNames.Rid} must exist.`);\n    }\n\n    const outerPayload = document[FieldNames.Payload];\n    if (!outerPayload || typeof outerPayload !== \"object\") {\n      throw new Error(`${FieldNames.Payload} must exist.`);\n    }\n\n    const innerPayload = outerPayload[FieldNames.Payload];\n    if (!innerPayload || typeof innerPayload !== \"object\") {\n      throw new Error(`${FieldNames.Payload} must exist nested within the outer payload field.`);\n    }\n\n    const componentScores = outerPayload[FieldNames.ComponentScores];\n    if (!Array.isArray(componentScores)) {\n      throw new Error(`${FieldNames.ComponentScores} must exist.`);\n    }\n\n    return new HybridSearchQueryResult(rid, componentScores, innerPayload);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { GlobalStatistics } from \"../../request/globalStatistics\";\nimport type { Aggregator } from \"./Aggregator\";\n\nexport class GlobalStatisticsAggregator implements Aggregator {\n  private globalStatistics: GlobalStatistics;\n\n  constructor() {\n    this.globalStatistics = {\n      documentCount: 0,\n      fullTextStatistics: [],\n    };\n  }\n\n  public aggregate(other: GlobalStatistics): void {\n    if (!other) {\n      return;\n    }\n    // Aggregate document count\n    this.globalStatistics.documentCount += other.documentCount;\n    // Ensure `fullTextStatistics` is initialized\n    if (!other.fullTextStatistics || other.fullTextStatistics.length === 0) {\n      return;\n    }\n\n    // Initialize `this.globalStatistics.fullTextStatistics` if it's empty\n    if (this.globalStatistics.fullTextStatistics.length === 0) {\n      this.globalStatistics.fullTextStatistics = other.fullTextStatistics.map((stat) => ({\n        totalWordCount: stat.totalWordCount,\n        hitCounts: [...stat.hitCounts],\n      }));\n    } else {\n      // Loop through `other.fullTextStatistics` to add values to `this.globalStatistics.fullTextStatistics`\n      for (let i = 0; i < other.fullTextStatistics.length; i++) {\n        const otherStat = other.fullTextStatistics[i];\n\n        // Ensure the index `i` is initialized\n        if (!this.globalStatistics.fullTextStatistics[i]) {\n          this.globalStatistics.fullTextStatistics[i] = {\n            totalWordCount: 0,\n            hitCounts: [],\n          };\n        }\n\n        // Add totalWordCount\n        this.globalStatistics.fullTextStatistics[i].totalWordCount += otherStat.totalWordCount;\n\n        // Aggregate `hitCounts`\n        for (let j = 0; j < otherStat.hitCounts.length; j++) {\n          // Initialize hit count if necessary\n          if (this.globalStatistics.fullTextStatistics[i].hitCounts.length <= j) {\n            this.globalStatistics.fullTextStatistics[i].hitCounts.push(0);\n          }\n          this.globalStatistics.fullTextStatistics[i].hitCounts[j] += otherStat.hitCounts[j];\n        }\n      }\n    }\n  }\n\n  public getResult(): GlobalStatistics {\n    return this.globalStatistics;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport type { ClientContext } from \"../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type {\n  FeedOptions,\n  GlobalStatistics,\n  PartitionedQueryExecutionInfo,\n  QueryInfo,\n  QueryRange,\n  Response,\n} from \"../request\";\nimport { HybridSearchQueryResult } from \"../request/hybridSearchQueryResult\";\nimport { GlobalStatisticsAggregator } from \"./Aggregators/GlobalStatisticsAggregator\";\nimport type { CosmosHeaders } from \"./CosmosHeaders\";\nimport type { ExecutionContext } from \"./ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"./headerUtils\";\nimport { ParallelQueryExecutionContext } from \"./parallelQueryExecutionContext\";\nimport { PipelinedQueryExecutionContext } from \"./pipelinedQueryExecutionContext\";\n\n/** @hidden */\nexport enum HybridQueryExecutionContextBaseStates {\n  uninitialized = \"uninitialized\",\n  initialized = \"initialized\",\n  draining = \"draining\",\n  done = \"done\",\n}\nexport class HybridQueryExecutionContext implements ExecutionContext {\n  private globalStatisticsExecutionContext: ExecutionContext;\n  private componentsExecutionContext: ExecutionContext[] = [];\n  private pageSize: number;\n  private state: HybridQueryExecutionContextBaseStates;\n  private globalStatisticsAggregator: GlobalStatisticsAggregator;\n  private emitRawOrderByPayload: boolean = true;\n  private buffer: HybridSearchQueryResult[] = [];\n  private DEFAULT_PAGE_SIZE = 10;\n  private TOTAL_WORD_COUNT_PLACEHOLDER = \"documentdb-formattablehybridsearchquery-totalwordcount\";\n  private HIT_COUNTS_ARRAY_PLACEHOLDER = \"documentdb-formattablehybridsearchquery-hitcountsarray\";\n  private TOTAL_DOCUMENT_COUNT_PLACEHOLDER =\n    \"documentdb-formattablehybridsearchquery-totaldocumentcount\";\n  private RRF_CONSTANT = 60; // Constant for RRF score calculation\n  private logger: AzureLogger = createClientLogger(\"HybridQueryExecutionContext\");\n  private hybridSearchResult: HybridSearchQueryResult[] = [];\n  private uniqueItems = new Map<string, HybridSearchQueryResult>();\n  private isSingleComponent: boolean = false;\n\n  constructor(\n    private clientContext: ClientContext,\n    private collectionLink: string,\n    private options: FeedOptions,\n    private partitionedQueryExecutionInfo: PartitionedQueryExecutionInfo,\n    private correlatedActivityId: string,\n    private allPartitionsRanges: QueryRange[],\n  ) {\n    this.state = HybridQueryExecutionContextBaseStates.uninitialized;\n    this.pageSize = this.options.maxItemCount;\n    if (this.pageSize === undefined) {\n      this.pageSize = this.DEFAULT_PAGE_SIZE;\n    }\n    if (partitionedQueryExecutionInfo.hybridSearchQueryInfo.requiresGlobalStatistics) {\n      const globalStaticsQueryOptions: FeedOptions = { maxItemCount: this.pageSize };\n      this.globalStatisticsAggregator = new GlobalStatisticsAggregator();\n\n      const globalStatisticsQuery =\n        this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.globalStatisticsQuery;\n      const globalStatisticsQueryExecutionInfo: PartitionedQueryExecutionInfo = {\n        partitionedQueryExecutionInfoVersion: 1,\n        queryInfo: {\n          distinctType: \"None\",\n          hasSelectValue: false,\n          groupByAliasToAggregateType: {},\n          rewrittenQuery: globalStatisticsQuery,\n          hasNonStreamingOrderBy: false,\n        },\n        queryRanges: this.allPartitionsRanges,\n      };\n\n      this.globalStatisticsExecutionContext = new ParallelQueryExecutionContext(\n        this.clientContext,\n        this.collectionLink,\n        globalStatisticsQuery,\n        globalStaticsQueryOptions,\n        globalStatisticsQueryExecutionInfo,\n        this.correlatedActivityId,\n      );\n    } else {\n      this.createComponentExecutionContexts();\n      this.state = HybridQueryExecutionContextBaseStates.initialized;\n    }\n  }\n  public async nextItem(diagnosticNode: DiagnosticNodeInternal): Promise<Response<any>> {\n    const nextItemRespHeaders = getInitialHeader();\n    while (\n      (this.state === HybridQueryExecutionContextBaseStates.uninitialized ||\n        this.state === HybridQueryExecutionContextBaseStates.initialized) &&\n      this.buffer.length === 0\n    ) {\n      await this.fetchMoreInternal(diagnosticNode, nextItemRespHeaders);\n    }\n\n    if (this.state === HybridQueryExecutionContextBaseStates.draining && this.buffer.length > 0) {\n      return this.drainOne(nextItemRespHeaders);\n    } else {\n      return this.done(nextItemRespHeaders);\n    }\n  }\n\n  public hasMoreResults(): boolean {\n    switch (this.state) {\n      case HybridQueryExecutionContextBaseStates.uninitialized:\n        return true;\n      case HybridQueryExecutionContextBaseStates.initialized:\n        return true;\n      case HybridQueryExecutionContextBaseStates.draining:\n        return this.buffer.length > 0;\n      case HybridQueryExecutionContextBaseStates.done:\n        return false;\n      default:\n        return false;\n    }\n  }\n\n  public async fetchMore(diagnosticNode?: DiagnosticNodeInternal): Promise<Response<any>> {\n    const fetchMoreRespHeaders = getInitialHeader();\n    return this.fetchMoreInternal(diagnosticNode, fetchMoreRespHeaders);\n  }\n\n  private async fetchMoreInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    headers: CosmosHeaders,\n  ): Promise<Response<any>> {\n    switch (this.state) {\n      case HybridQueryExecutionContextBaseStates.uninitialized:\n        await this.initialize(diagnosticNode, headers);\n        return {\n          result: [],\n          headers: headers,\n        };\n\n      case HybridQueryExecutionContextBaseStates.initialized:\n        await this.executeComponentQueries(diagnosticNode, headers);\n        return {\n          result: [],\n          headers: headers,\n        };\n      case HybridQueryExecutionContextBaseStates.draining:\n        return this.drain(headers);\n      case HybridQueryExecutionContextBaseStates.done:\n        return this.done(headers);\n      default:\n        throw new Error(`Invalid state: ${this.state}`);\n    }\n  }\n\n  private async initialize(\n    diagnosticNode: DiagnosticNodeInternal,\n    fetchMoreRespHeaders: CosmosHeaders,\n  ): Promise<void> {\n    try {\n      while (this.globalStatisticsExecutionContext.hasMoreResults()) {\n        const result = await this.globalStatisticsExecutionContext.fetchMore(diagnosticNode);\n        mergeHeaders(fetchMoreRespHeaders, result.headers);\n        if (result && result.result) {\n          for (const item of result.result) {\n            const globalStatistics: GlobalStatistics = item;\n            if (globalStatistics) {\n              // iterate over the components update placeholders from globalStatistics\n              this.globalStatisticsAggregator.aggregate(globalStatistics);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n\n    // create component execution contexts for each component query\n    this.createComponentExecutionContexts();\n    this.state = HybridQueryExecutionContextBaseStates.initialized;\n  }\n\n  private async executeComponentQueries(\n    diagnosticNode: DiagnosticNodeInternal,\n    fetchMoreRespHeaders: CosmosHeaders,\n  ): Promise<void> {\n    if (this.isSingleComponent) {\n      await this.drainSingleComponent(diagnosticNode, fetchMoreRespHeaders);\n      return;\n    }\n    try {\n      if (this.options.enableQueryControl) {\n        // track componentExecutionContexts with remaining results and call them in LIFO order\n        if (this.componentsExecutionContext.length > 0) {\n          const componentExecutionContext = this.componentsExecutionContext.pop();\n          if (componentExecutionContext.hasMoreResults()) {\n            const result = await componentExecutionContext.fetchMore(diagnosticNode);\n            const response = result.result;\n            mergeHeaders(fetchMoreRespHeaders, result.headers);\n            if (response) {\n              response.forEach((item: any) => {\n                const hybridItem = HybridSearchQueryResult.create(item);\n                if (!this.uniqueItems.has(hybridItem.rid)) {\n                  this.uniqueItems.set(hybridItem.rid, hybridItem);\n                }\n              });\n            }\n            if (componentExecutionContext.hasMoreResults()) {\n              this.componentsExecutionContext.push(componentExecutionContext);\n            }\n          }\n        }\n        if (this.componentsExecutionContext.length === 0) {\n          this.processUniqueItems();\n        }\n      } else {\n        for (const componentExecutionContext of this.componentsExecutionContext) {\n          while (componentExecutionContext.hasMoreResults()) {\n            const result = await componentExecutionContext.fetchMore(diagnosticNode);\n            const response = result.result;\n            mergeHeaders(fetchMoreRespHeaders, result.headers);\n            if (response) {\n              response.forEach((item: any) => {\n                const hybridItem = HybridSearchQueryResult.create(item);\n                if (!this.uniqueItems.has(hybridItem.rid)) {\n                  this.uniqueItems.set(hybridItem.rid, hybridItem);\n                }\n              });\n            }\n          }\n        }\n        this.processUniqueItems();\n      }\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private processUniqueItems(): void {\n    this.uniqueItems.forEach((item) => this.hybridSearchResult.push(item));\n    if (this.hybridSearchResult.length === 0 || this.hybridSearchResult.length === 1) {\n      // return the result as no or one element is present\n      this.hybridSearchResult.forEach((item) => this.buffer.push(item.data));\n      this.state = HybridQueryExecutionContextBaseStates.draining;\n      return;\n    }\n\n    // Initialize an array to hold ranks for each document\n    const sortedHybridSearchResult = this.sortHybridSearchResultByRRFScore(this.hybridSearchResult);\n    // store the result to buffer\n    // add only data from the sortedHybridSearchResult in the buffer\n    sortedHybridSearchResult.forEach((item) => this.buffer.push(item.data));\n    this.applySkipAndTakeToBuffer();\n    this.state = HybridQueryExecutionContextBaseStates.draining;\n  }\n\n  private applySkipAndTakeToBuffer(): void {\n    const { skip, take } = this.partitionedQueryExecutionInfo.hybridSearchQueryInfo;\n    if (skip) {\n      this.buffer = skip >= this.buffer.length ? [] : this.buffer.slice(skip);\n    }\n    if (take) {\n      this.buffer = take <= 0 ? [] : this.buffer.slice(0, take);\n    }\n  }\n\n  private async drain(fetchMoreRespHeaders: CosmosHeaders): Promise<Response<any>> {\n    try {\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n        return this.done(fetchMoreRespHeaders);\n      }\n      const result = this.buffer.slice(0, this.pageSize);\n      this.buffer = this.buffer.slice(this.pageSize);\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n      }\n      return {\n        result: result,\n        headers: fetchMoreRespHeaders,\n      };\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private async drainOne(nextItemRespHeaders: CosmosHeaders): Promise<Response<any>> {\n    try {\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n        return this.done(nextItemRespHeaders);\n      }\n      const result = this.buffer.shift();\n      if (this.buffer.length === 0) {\n        this.state = HybridQueryExecutionContextBaseStates.done;\n      }\n      return {\n        result: result,\n        headers: nextItemRespHeaders,\n      };\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private done(fetchMoreRespHeaders: CosmosHeaders): Response<any> {\n    return {\n      result: undefined,\n      headers: fetchMoreRespHeaders,\n    };\n  }\n\n  private sortHybridSearchResultByRRFScore(\n    hybridSearchResult: HybridSearchQueryResult[],\n  ): HybridSearchQueryResult[] {\n    if (hybridSearchResult.length === 0) {\n      return [];\n    }\n    const ranksArray: { rid: string; ranks: number[] }[] = hybridSearchResult.map((item) => ({\n      rid: item.rid,\n      ranks: new Array(item.componentScores.length).fill(0),\n    }));\n    // Compute ranks for each component score\n    for (let i = 0; i < hybridSearchResult[0].componentScores.length; i++) {\n      // Sort based on the i-th component score\n      hybridSearchResult.sort((a, b) => b.componentScores[i] - a.componentScores[i]);\n\n      // Assign ranks\n      let rank = 1;\n      for (let j = 0; j < hybridSearchResult.length; j++) {\n        if (\n          j > 0 &&\n          hybridSearchResult[j].componentScores[i] !== hybridSearchResult[j - 1].componentScores[i]\n        ) {\n          rank = j + 1;\n        }\n        const rankIndex = ranksArray.findIndex(\n          (rankItem) => rankItem.rid === hybridSearchResult[j].rid,\n        );\n        ranksArray[rankIndex].ranks[i] = rank; // 1-based rank\n      }\n    }\n\n    // Function to compute RRF score\n    const computeRRFScore = (ranks: number[], k: number): number => {\n      return ranks.reduce((acc, rank) => acc + 1 / (k + rank), 0);\n    };\n\n    // Compute RRF scores and sort based on them\n    const rrfScores = ranksArray.map((item) => ({\n      rid: item.rid,\n      rrfScore: computeRRFScore(item.ranks, this.RRF_CONSTANT),\n    }));\n\n    // Sort based on RRF scores\n    rrfScores.sort((a, b) => b.rrfScore - a.rrfScore);\n\n    // Map sorted RRF scores back to hybridSearchResult\n    const sortedHybridSearchResult = rrfScores.map((scoreItem) =>\n      hybridSearchResult.find((item) => item.rid === scoreItem.rid),\n    );\n    return sortedHybridSearchResult;\n  }\n\n  private async drainSingleComponent(\n    diagNode: DiagnosticNodeInternal,\n    fetchMoreRespHeaders: CosmosHeaders,\n  ): Promise<void> {\n    if (this.componentsExecutionContext && this.componentsExecutionContext.length !== 1) {\n      this.logger.error(\"drainSingleComponent called on multiple components\");\n      return;\n    }\n    try {\n      if (this.options.enableQueryControl) {\n        const componentExecutionContext = this.componentsExecutionContext[0];\n        if (componentExecutionContext.hasMoreResults()) {\n          const result = await componentExecutionContext.fetchMore(diagNode);\n          const response = result.result;\n          mergeHeaders(fetchMoreRespHeaders, result.headers);\n          if (response) {\n            response.forEach((item: any) => {\n              this.hybridSearchResult.push(HybridSearchQueryResult.create(item));\n            });\n          }\n        }\n        if (!componentExecutionContext.hasMoreResults()) {\n          this.state = HybridQueryExecutionContextBaseStates.draining;\n          this.hybridSearchResult.forEach((item) => this.buffer.push(item.data));\n          this.applySkipAndTakeToBuffer();\n          this.state = HybridQueryExecutionContextBaseStates.draining;\n        }\n        return;\n      } else {\n        const componentExecutionContext = this.componentsExecutionContext[0];\n        const hybridSearchResult: HybridSearchQueryResult[] = [];\n        // add check for enable query control\n        while (componentExecutionContext.hasMoreResults()) {\n          const result = await componentExecutionContext.fetchMore(diagNode);\n          const response = result.result;\n          mergeHeaders(fetchMoreRespHeaders, result.headers);\n          if (response) {\n            response.forEach((item: any) => {\n              hybridSearchResult.push(HybridSearchQueryResult.create(item));\n            });\n          }\n        }\n        hybridSearchResult.forEach((item) => this.buffer.push(item.data));\n        this.applySkipAndTakeToBuffer();\n        this.state = HybridQueryExecutionContextBaseStates.draining;\n      }\n    } catch (error) {\n      this.state = HybridQueryExecutionContextBaseStates.done;\n      throw error;\n    }\n  }\n\n  private createComponentExecutionContexts(): void {\n    // rewrite queries based on global statistics\n    let queryInfos: QueryInfo[] =\n      this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.componentQueryInfos;\n    if (this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.requiresGlobalStatistics) {\n      queryInfos = this.processComponentQueries(\n        this.partitionedQueryExecutionInfo.hybridSearchQueryInfo.componentQueryInfos,\n        this.globalStatisticsAggregator.getResult(),\n      );\n    }\n    // create component execution contexts\n    for (const componentQueryInfo of queryInfos) {\n      const componentPartitionExecutionInfo: PartitionedQueryExecutionInfo = {\n        partitionedQueryExecutionInfoVersion: 1,\n        queryInfo: componentQueryInfo,\n        queryRanges: this.partitionedQueryExecutionInfo.queryRanges,\n      };\n      const executionContext = new PipelinedQueryExecutionContext(\n        this.clientContext,\n        this.collectionLink,\n        componentQueryInfo.rewrittenQuery,\n        this.options,\n        componentPartitionExecutionInfo,\n        this.correlatedActivityId,\n        this.emitRawOrderByPayload,\n      );\n      this.componentsExecutionContext.push(executionContext);\n    }\n    this.isSingleComponent = this.componentsExecutionContext.length === 1;\n  }\n  private processComponentQueries(\n    componentQueryInfos: QueryInfo[],\n    globalStats: GlobalStatistics,\n  ): QueryInfo[] {\n    return componentQueryInfos.map((queryInfo) => {\n      if (!queryInfo.hasNonStreamingOrderBy) {\n        throw new Error(\"The component query must have a non-streaming order by clause.\");\n      }\n      return {\n        ...queryInfo,\n        rewrittenQuery: this.replacePlaceholdersWorkaroud(\n          queryInfo.rewrittenQuery,\n          globalStats,\n          componentQueryInfos.length,\n        ),\n        orderByExpressions: queryInfo.orderByExpressions.map((expr) =>\n          this.replacePlaceholdersWorkaroud(expr, globalStats, componentQueryInfos.length),\n        ),\n      };\n    });\n  }\n  // This method is commented currently, but we will switch back to using this\n  // once the gateway has been redeployed with the fix for placeholder indexes\n  // private replacePlaceholders(query: string, globalStats: GlobalStatistics): string {\n  //   // Replace total document count\n  //   query = query.replace(\n  //     new RegExp(`{${this.TOTAL_DOCUMENT_COUNT_PLACEHOLDER}}`, \"g\"),\n  //     globalStats.documentCount.toString(),\n  //   );\n\n  //   // Replace total word counts and hit counts from fullTextStatistics\n  //   globalStats.fullTextStatistics.forEach((stats, index) => {\n  //     // Replace total word counts\n  //     query = query.replace(\n  //       new RegExp(`{${this.TOTAL_WORD_COUNT_PLACEHOLDER}-${index}}`, \"g\"),\n  //       stats.totalWordCount.toString(),\n  //     );\n  //     // Replace hit counts\n  //     query = query.replace(\n  //       new RegExp(`{${this.HIT_COUNTS_ARRAY_PLACEHOLDER}-${index}}`, \"g\"),\n  //       `[${stats.hitCounts.join(\",\")}]`,\n  //     );\n  //   });\n\n  //   return query;\n  // }\n\n  private replacePlaceholdersWorkaroud(\n    query: string,\n    globalStats: GlobalStatistics,\n    componentCount: number,\n  ): string {\n    if (\n      !globalStats ||\n      !globalStats.documentCount ||\n      !Array.isArray(globalStats.fullTextStatistics)\n    ) {\n      throw new Error(\"GlobalStats validation failed\");\n    }\n    // Replace total document count\n    query = query.replace(\n      new RegExp(`{${this.TOTAL_DOCUMENT_COUNT_PLACEHOLDER}}`, \"g\"),\n      globalStats.documentCount.toString(),\n    );\n    let statisticsIndex: number = 0;\n    for (let i = 0; i < componentCount; i++) {\n      // Replace total word counts and hit counts from fullTextStatistics\n      const wordCountPlaceholder = `{${this.TOTAL_WORD_COUNT_PLACEHOLDER}-${i}}`;\n      const hitCountPlaceholder = `{${this.HIT_COUNTS_ARRAY_PLACEHOLDER}-${i}}`;\n      if (!query.includes(wordCountPlaceholder)) {\n        continue;\n      }\n      const stats = globalStats.fullTextStatistics[statisticsIndex];\n      // Replace total word counts\n      query = query.replace(new RegExp(wordCountPlaceholder, \"g\"), stats.totalWordCount.toString());\n      // Replace hit counts\n      query = query.replace(new RegExp(hitCountPlaceholder, \"g\"), `[${stats.hitCounts.join(\",\")}]`);\n      statisticsIndex++;\n    }\n    return query;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/// <reference lib=\"esnext.asynciterable\" />\nimport type { ClientContext } from \"./ClientContext\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { getPathFromLink, ResourceType, StatusCodes } from \"./common\";\nimport type {\n  CosmosHeaders,\n  ExecutionContext,\n  FetchFunctionCallback,\n  SqlQuerySpec,\n} from \"./queryExecutionContext\";\nimport {\n  DefaultQueryExecutionContext,\n  getInitialHeader,\n  mergeHeaders,\n  PipelinedQueryExecutionContext,\n} from \"./queryExecutionContext\";\nimport type { Response } from \"./request\";\nimport type {\n  ErrorResponse,\n  PartitionedQueryExecutionInfo,\n  QueryRange,\n} from \"./request/ErrorResponse\";\nimport type { FeedOptions } from \"./request/FeedOptions\";\nimport { FeedResponse } from \"./request/FeedResponse\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"./utils/diagnostics\";\nimport { MetadataLookUpType } from \"./CosmosDiagnostics\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { HybridQueryExecutionContext } from \"./queryExecutionContext/hybridQueryExecutionContext\";\nimport { PartitionKeyRangeCache } from \"./routing\";\n\n/**\n * Represents a QueryIterator Object, an implementation of feed or query response that enables\n * traversal and iterating over the response\n * in the Azure Cosmos DB database service.\n */\nexport class QueryIterator<T> {\n  private fetchAllTempResources: T[]; // TODO\n  private fetchAllLastResHeaders: CosmosHeaders;\n  private queryExecutionContext: ExecutionContext;\n  private queryPlanPromise: Promise<Response<PartitionedQueryExecutionInfo>>;\n  private isInitialized: boolean;\n  private correlatedActivityId: string;\n  private partitionKeyRangeCache: PartitionKeyRangeCache;\n  /**\n   * @hidden\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private query: SqlQuerySpec | string,\n    private options: FeedOptions,\n    private fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[],\n    private resourceLink?: string,\n    private resourceType?: ResourceType,\n  ) {\n    this.query = query;\n    this.fetchFunctions = fetchFunctions;\n    this.options = options || {};\n    this.resourceLink = resourceLink;\n    this.fetchAllLastResHeaders = getInitialHeader();\n    this.reset();\n    this.isInitialized = false;\n    this.partitionKeyRangeCache = new PartitionKeyRangeCache(this.clientContext);\n  }\n\n  /**\n   * Gets an async iterator that will yield results until completion.\n   *\n   * NOTE: AsyncIterators are a very new feature and you might need to\n   * use polyfils/etc. in order to use them in your code.\n   *\n   * If you're using TypeScript, you can use the following polyfill as long\n   * as you target ES6 or higher and are running on Node 6 or higher.\n   *\n   * ```typescript\n   * if (!Symbol || !Symbol.asyncIterator) {\n   *   (Symbol as any).asyncIterator = Symbol.for(\"Symbol.asyncIterator\");\n   * }\n   * ```\n   *\n   * @example Iterate over all databases\n   * ```typescript\n   * for await(const { resources: db } of client.databases.readAll().getAsyncIterator()) {\n   *   console.log(`Got ${db} from AsyncIterator`);\n   * }\n   * ```\n   */\n  public async *getAsyncIterator(): AsyncIterable<FeedResponse<T>> {\n    const diagnosticNode = new DiagnosticNodeInternal(\n      this.clientContext.diagnosticLevel,\n      DiagnosticNodeType.CLIENT_REQUEST_NODE,\n      null,\n    );\n    yield* this.getAsyncIteratorInternal(diagnosticNode);\n  }\n  /**\n   * @internal\n   */\n  public async *getAsyncIteratorInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): AsyncIterable<FeedResponse<T>> {\n    this.reset();\n    this.queryPlanPromise = this.fetchQueryPlan(diagnosticNode);\n    while (this.queryExecutionContext.hasMoreResults()) {\n      let response: Response<any>;\n      try {\n        response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n      } catch (error: any) {\n        if (this.needsQueryPlan(error)) {\n          await this.createExecutionContext(diagnosticNode);\n          try {\n            response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n          } catch (queryError: any) {\n            this.handleSplitError(queryError);\n          }\n        } else {\n          throw error;\n        }\n      }\n\n      const feedResponse = new FeedResponse<T>(\n        response.result,\n        response.headers,\n        this.queryExecutionContext.hasMoreResults(),\n        diagnosticNode.toDiagnostic(this.clientContext.getClientConfig()),\n      );\n      diagnosticNode = new DiagnosticNodeInternal(\n        this.clientContext.diagnosticLevel,\n        DiagnosticNodeType.CLIENT_REQUEST_NODE,\n        null,\n      );\n      if (response.result !== undefined) {\n        yield feedResponse;\n      }\n    }\n  }\n\n  /**\n   * Determine if there are still remaining resources to process based on the value of the continuation token or the\n   * elements remaining on the current batch in the QueryIterator.\n   * @returns true if there is other elements to process in the QueryIterator.\n   */\n  public hasMoreResults(): boolean {\n    return this.queryExecutionContext.hasMoreResults();\n  }\n\n  /**\n   * Fetch all pages for the query and return a single FeedResponse.\n   */\n\n  public async fetchAll(): Promise<FeedResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.fetchAllInternal(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async fetchAllInternal(diagnosticNode: DiagnosticNodeInternal): Promise<FeedResponse<T>> {\n    this.reset();\n    let response: FeedResponse<T>;\n    try {\n      response = await this.toArrayImplementation(diagnosticNode);\n    } catch (error: any) {\n      this.handleSplitError(error);\n    }\n    return response;\n  }\n\n  /**\n   * Retrieve the next batch from the feed.\n   *\n   * This may or may not fetch more pages from the backend depending on your settings\n   * and the type of query. Aggregate queries will generally fetch all backend pages\n   * before returning the first batch of responses.\n   */\n  public async fetchNext(): Promise<FeedResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.fetchNextInternal(diagnosticNode);\n    }, this.clientContext);\n  }\n  /**\n   * @internal\n   */\n  public async fetchNextInternal(diagnosticNode: DiagnosticNodeInternal): Promise<FeedResponse<T>> {\n    this.queryPlanPromise = withMetadataDiagnostics(\n      async (metadataNode: DiagnosticNodeInternal) => {\n        return this.fetchQueryPlan(metadataNode);\n      },\n      diagnosticNode,\n      MetadataLookUpType.QueryPlanLookUp,\n    );\n    if (!this.isInitialized) {\n      await this.init(diagnosticNode);\n    }\n    let response: Response<any>;\n    try {\n      response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n    } catch (error: any) {\n      if (this.needsQueryPlan(error)) {\n        await this.createExecutionContext(diagnosticNode);\n        try {\n          response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n        } catch (queryError: any) {\n          this.handleSplitError(queryError);\n        }\n      } else {\n        throw error;\n      }\n    }\n    return new FeedResponse<T>(\n      response.result,\n      response.headers,\n      this.queryExecutionContext.hasMoreResults(),\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /**\n   * Reset the QueryIterator to the beginning and clear all the resources inside it\n   */\n  public reset(): void {\n    this.correlatedActivityId = randomUUID();\n    this.queryPlanPromise = undefined;\n    this.fetchAllLastResHeaders = getInitialHeader();\n    this.fetchAllTempResources = [];\n    this.queryExecutionContext = new DefaultQueryExecutionContext(\n      this.options,\n      this.fetchFunctions,\n      this.correlatedActivityId,\n    );\n  }\n\n  private async toArrayImplementation(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<FeedResponse<T>> {\n    this.queryPlanPromise = withMetadataDiagnostics(\n      async (metadataNode: DiagnosticNodeInternal) => {\n        return this.fetchQueryPlan(metadataNode);\n      },\n      diagnosticNode,\n      MetadataLookUpType.QueryPlanLookUp,\n    );\n    // this.queryPlanPromise = this.fetchQueryPlan(diagnosticNode);\n    if (!this.isInitialized) {\n      await this.init(diagnosticNode);\n    }\n    while (this.queryExecutionContext.hasMoreResults()) {\n      let response: Response<any>;\n      try {\n        response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n      } catch (error: any) {\n        if (this.needsQueryPlan(error)) {\n          await this.createExecutionContext(diagnosticNode);\n          response = await this.queryExecutionContext.fetchMore(diagnosticNode);\n        } else {\n          throw error;\n        }\n      }\n      const { result, headers } = response;\n      // concatenate the results and fetch more\n      mergeHeaders(this.fetchAllLastResHeaders, headers);\n      if (result) {\n        this.fetchAllTempResources.push(...result);\n      }\n    }\n    return new FeedResponse(\n      this.fetchAllTempResources,\n      this.fetchAllLastResHeaders,\n      this.queryExecutionContext.hasMoreResults(),\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  private async createExecutionContext(diagnosticNode?: DiagnosticNodeInternal): Promise<void> {\n    const queryPlanResponse = await this.queryPlanPromise;\n\n    // We always coerce queryPlanPromise to resolved. So if it errored, we need to manually inspect the resolved value\n    if (queryPlanResponse instanceof Error) {\n      throw queryPlanResponse;\n    }\n\n    const queryPlan: PartitionedQueryExecutionInfo = queryPlanResponse.result;\n    if (queryPlan.hybridSearchQueryInfo && queryPlan.hybridSearchQueryInfo !== null) {\n      await this.createHybridQueryExecutionContext(queryPlan, diagnosticNode);\n    } else {\n      await this.createPipelinedExecutionContext(queryPlan);\n    }\n  }\n\n  private async createHybridQueryExecutionContext(\n    queryPlan: PartitionedQueryExecutionInfo,\n    diagnosticNode?: DiagnosticNodeInternal,\n  ): Promise<void> {\n    const allPartitionKeyRanges = (\n      await this.partitionKeyRangeCache.onCollectionRoutingMap(this.resourceLink, diagnosticNode)\n    ).getOrderedParitionKeyRanges();\n\n    // convert allPartitionKeyRanges to QueryRanges\n    const queryRanges: QueryRange[] = allPartitionKeyRanges.map((partitionKeyRange) => {\n      return {\n        min: partitionKeyRange.minInclusive,\n        max: partitionKeyRange.maxExclusive,\n        isMinInclusive: true,\n        isMaxInclusive: false,\n      };\n    });\n\n    this.queryExecutionContext = new HybridQueryExecutionContext(\n      this.clientContext,\n      this.resourceLink,\n      this.options,\n      queryPlan,\n      this.correlatedActivityId,\n      queryRanges,\n    );\n  }\n\n  private async createPipelinedExecutionContext(\n    queryPlan: PartitionedQueryExecutionInfo,\n  ): Promise<void> {\n    const queryInfo = queryPlan.queryInfo;\n    if (queryInfo.aggregates.length > 0 && queryInfo.hasSelectValue === false) {\n      throw new Error(\"Aggregate queries must use the VALUE keyword\");\n    }\n    this.queryExecutionContext = new PipelinedQueryExecutionContext(\n      this.clientContext,\n      this.resourceLink,\n      this.query,\n      this.options,\n      queryPlan,\n      this.correlatedActivityId,\n    );\n  }\n\n  private async fetchQueryPlan(diagnosticNode: DiagnosticNodeInternal): Promise<any> {\n    if (!this.queryPlanPromise && this.resourceType === ResourceType.item) {\n      return this.clientContext\n        .getQueryPlan(\n          getPathFromLink(this.resourceLink) + \"/docs\",\n          ResourceType.item,\n          this.resourceLink,\n          this.query,\n          this.options,\n          diagnosticNode,\n          this.correlatedActivityId,\n        )\n        .catch((error: any) => error); // Without this catch, node reports an unhandled rejection. So we stash the promise as resolved even if it errored.\n    }\n    return this.queryPlanPromise;\n  }\n\n  private needsQueryPlan(error: ErrorResponse): error is ErrorResponse {\n    if (\n      error.body?.additionalErrorInfo ||\n      error.message.includes(\"Cross partition query only supports\")\n    ) {\n      return error.code === StatusCodes.BadRequest && this.resourceType === ResourceType.item;\n    } else {\n      throw error;\n    }\n  }\n\n  private initPromise: Promise<void>;\n  /**\n   * @internal\n   */\n  public async init(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (this.isInitialized === true) {\n      return;\n    }\n    if (this.initPromise === undefined) {\n      this.initPromise = this._init(diagnosticNode);\n    }\n    return this.initPromise;\n  }\n  private async _init(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (this.options.forceQueryPlan === true && this.resourceType === ResourceType.item) {\n      await this.createExecutionContext(diagnosticNode);\n    }\n    this.isInitialized = true;\n  }\n\n  private handleSplitError(err: any): void {\n    if (err.code === 410) {\n      const error = new Error(\n        \"Encountered partition split and could not recover. This request is retryable\",\n      ) as any;\n      error.code = 503;\n      error.originalError = err;\n      throw error;\n    } else {\n      throw err;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { Conflict } from \"./Conflict\";\nimport type { ConflictDefinition } from \"./ConflictDefinition\";\n\nexport class ConflictResponse extends ResourceResponse<ConflictDefinition & Resource> {\n  constructor(\n    resource: ConflictDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    conflict: Conflict,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.conflict = conflict;\n  }\n  /** A reference to the {@link Conflict} corresponding to the returned {@link ConflictDefinition}. */\n  public readonly conflict: Conflict;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { Constants, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { ConflictDefinition } from \"./ConflictDefinition\";\nimport { ConflictResponse } from \"./ConflictResponse\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport type { PartitionKey } from \"../../documents\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to read or delete a given {@link Conflict} by id.\n *\n * @see {@link Conflicts} to query or read all conflicts.\n */\nexport class Conflict {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${this.container.url}/${Constants.Path.ConflictsPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Conflict}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    private partitionKey?: PartitionKey,\n  ) {\n    this.partitionKey = partitionKey;\n  }\n\n  /**\n   * Read the {@link ConflictDefinition} for the given {@link Conflict}.\n   */\n  public async read(options?: RequestOptions): Promise<ConflictResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.conflicts);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<ConflictDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n\n      return new ConflictResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link ConflictDefinition}.\n   */\n  public async delete(options?: RequestOptions): Promise<ConflictResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (this.partitionKey === undefined) {\n        const partitionKeyDefinition = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container,\n        );\n        this.partitionKey = undefinedPartitionKey(partitionKeyDefinition);\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<ConflictDefinition>({\n        path,\n        resourceType: ResourceType.conflicts,\n        resourceId: id,\n        options,\n        partitionKey: this.partitionKey,\n        diagnosticNode,\n      });\n      return new ConflictResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport type { ConflictDefinition } from \"./ConflictDefinition\";\n\n/**\n * Use to query or read all conflicts.\n *\n * @see {@link Conflict} to read or delete a given {@link Conflict} by id.\n */\nexport class Conflicts {\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Queries all conflicts.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all conflicts.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return results in an array or iterate over them one at a time.\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.conflicts);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(\n      this.clientContext,\n      query,\n      options,\n      (diagNode: DiagnosticNodeInternal, innerOptions) => {\n        return this.clientContext.queryFeed({\n          path,\n          resourceType: ResourceType.conflicts,\n          resourceId: id,\n          resultFn: (result) => result.Conflicts,\n          query,\n          options: innerOptions,\n          diagnosticNode: diagNode,\n        });\n      },\n    );\n  }\n\n  /**\n   * Reads all conflicts\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ConflictDefinition & Resource> {\n    return this.query<ConflictDefinition & Resource>(undefined, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nexport enum ConflictResolutionMode {\n  Custom = \"Custom\",\n  LastWriterWins = \"LastWriterWins\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport type { Resource } from \"../Resource\";\nimport type { Item } from \"./Item\";\nimport type { ItemDefinition } from \"./ItemDefinition\";\n\nexport class ItemResponse<T extends ItemDefinition> extends ResourceResponse<T & Resource> {\n  constructor(\n    resource: T & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    subsstatusCode: number,\n    item: Item,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics, subsstatusCode);\n    this.item = item;\n  }\n  /** Reference to the {@link Item} the response corresponds to. */\n  public readonly item: Item;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  Constants,\n  copyObject,\n  createDocumentUri,\n  getIdFromLink,\n  getPathFromLink,\n  isItemResourceValid,\n  ResourceType,\n  StatusCodes,\n} from \"../../common\";\nimport type { PartitionKey, PartitionKeyInternal } from \"../../documents\";\nimport { convertToInternalPartitionKey } from \"../../documents\";\nimport type { RequestOptions, Response } from \"../../request\";\nimport { ErrorResponse } from \"../../request\";\nimport type { PatchRequestBody } from \"../../utils/patch\";\nimport { PatchOperationType } from \"../../utils/patch\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport type { ItemDefinition } from \"./ItemDefinition\";\nimport { ItemResponse } from \"./ItemResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { setPartitionKeyIfUndefined } from \"../../extractPartitionKey\";\n\n/**\n * Used to perform operations on a specific item.\n *\n * @see {@link Items} for operations on all items; see `container.items`.\n */\nexport class Item {\n  private partitionKey: PartitionKeyInternal;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDocumentUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Item}.\n   * @param partitionKey - The primary key of the given {@link Item} (only for partitioned containers).\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    partitionKey?: PartitionKey,\n  ) {\n    this.partitionKey =\n      partitionKey === undefined ? undefined : convertToInternalPartitionKey(partitionKey);\n  }\n\n  /**\n   * Read the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   * If the type, T, is a class, it won't pass `typeof` comparisons, because it won't have a match prototype.\n   * It's recommended to only use interfaces.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Additional options for the request\n   *\n   * @example Using custom type for response\n   * ```typescript\n   * interface TodoItem {\n   *   title: string;\n   *   done: bool;\n   *   id: string;\n   * }\n   *\n   * let item: TodoItem;\n   * ({body: item} = await item.read<TodoItem>());\n   * ```\n   */\n  public async read<T extends ItemDefinition = any>(\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let url = this.url;\n      let partitionKey = this.partitionKey;\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { partitionKeyList: encryptedPartitionKey, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n              this.partitionKey,\n            );\n          partitionKey = encryptedPartitionKey;\n          count += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            count++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n\n        response = await this.clientContext.read<T>({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        if (error.code !== StatusCodes.NotFound) {\n          throw error;\n        }\n        response = error;\n      }\n      if (this.clientContext.enableEncryption) {\n        diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation);\n        const { body, propertiesDecryptedCount } = await this.container.encryptionProcessor.decrypt(\n          response.result,\n        );\n        diagnosticNode.endEncryptionDiagnostics(\n          Constants.Encryption.DiagnosticsDecryptOperation,\n          propertiesDecryptedCount,\n        );\n        response.result = body;\n      }\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the item's definition.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   */\n  public replace(\n    body: ItemDefinition,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Replace the item's definition.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - The definition to replace the existing {@link Item}'s definition with.\n   * @param options - Additional options for the request\n   */\n  public replace<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<T>>;\n  public async replace<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let partitionKey = this.partitionKey;\n      const err = {};\n      if (!isItemResourceValid(body, err)) {\n        throw err;\n      }\n      let url = this.url;\n\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          // returns copy to avoid encryption of original body passed\n          body = copyObject(body);\n          options = options || {};\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { body: encryptedBody, propertiesEncryptedCount } =\n            await this.container.encryptionProcessor.encrypt(body);\n          body = encryptedBody;\n          count += propertiesEncryptedCount;\n          const { partitionKeyList: encryptedPartitionKeyList, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n              this.partitionKey,\n            );\n          partitionKey = encryptedPartitionKeyList;\n          count += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            count++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n\n        response = await this.clientContext.replace<T>({\n          body,\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n      if (this.clientContext.enableEncryption) {\n        try {\n          // try block for decrypting response. This is done so that we can throw special error message in case of decryption failure\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          const { body: result, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(response.result);\n          response.result = result;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            propertiesDecryptedCount,\n          );\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Item replace operation was successful but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  public async delete<T extends ItemDefinition = any>(\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let partitionKey = this.partitionKey;\n      let url = this.url;\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { partitionKeyList, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n              this.partitionKey,\n            );\n          partitionKey = partitionKeyList;\n          count += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            count++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n\n        response = await this.clientContext.delete<T>({\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Perform a JSONPatch on the item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * @param options - Additional options for the request\n   */\n  public async patch<T extends ItemDefinition = any>(\n    body: PatchRequestBody,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      this.partitionKey = await setPartitionKeyIfUndefined(\n        diagnosticNode,\n        this.container,\n        this.partitionKey,\n      );\n      let url = this.url;\n      let partitionKey = this.partitionKey;\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          // returns copy to avoid encryption of original body passed\n          body = copyObject(body);\n          const operations = Array.isArray(body) ? body : body.operations;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          let propertiesEncryptedCount = 0;\n          for (const operation of operations) {\n            if (operation.op === PatchOperationType.remove) {\n              continue;\n            }\n            const isPathEncrypted = await this.container.encryptionProcessor.isPathEncrypted(\n              operation.path,\n            );\n            if (!isPathEncrypted) {\n              continue;\n            }\n            if (operation.op === PatchOperationType.incr) {\n              throw new ErrorResponse(\n                `Increment patch operation is not allowed for encrypted path '${operation.path}'`,\n              );\n            }\n            if (\"value\" in operation) {\n              operation.value = await this.container.encryptionProcessor.encryptProperty(\n                operation.path,\n                operation.value,\n              );\n            }\n            propertiesEncryptedCount++;\n          }\n          const { partitionKeyList, encryptedCount } =\n            await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(partitionKey);\n          partitionKey = partitionKeyList;\n          propertiesEncryptedCount += encryptedCount;\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            url = await this.container.encryptionProcessor.getEncryptedUrl(this.url);\n            propertiesEncryptedCount++;\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            propertiesEncryptedCount,\n          );\n        }\n        const path = getPathFromLink(url);\n        const id = getIdFromLink(url);\n        response = await this.clientContext.patch<T>({\n          body,\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n      if (this.clientContext.enableEncryption) {\n        try {\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          const { body: result, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(response.result);\n          response.result = result;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            propertiesDecryptedCount,\n          );\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Item patch operation was successful but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"./CosmosDiagnostics\";\nimport { Constants } from \"./common\";\nimport type { CosmosHeaders } from \"./queryExecutionContext\";\n\n/**\n * A single response page from the Azure Cosmos DB Change Feed\n */\nexport class ChangeFeedResponse<T> {\n  /**\n   * @internal\n   */\n  constructor(\n    /**\n     * Gets the items returned in the response from Azure Cosmos DB\n     */\n    public readonly result: T,\n    /**\n     * Gets the number of items returned in the response from Azure Cosmos DB\n     */\n    public readonly count: number,\n    /**\n     * Gets the status code of the response from Azure Cosmos DB\n     */\n    public readonly statusCode: number,\n    headers: CosmosHeaders,\n    public readonly diagnostics: CosmosDiagnostics,\n  ) {\n    this.headers = Object.freeze(headers);\n  }\n\n  /**\n   * Gets the request charge for this request from the Azure Cosmos DB service.\n   */\n  public get requestCharge(): number {\n    const rus = this.headers[Constants.HttpHeaders.RequestCharge];\n    return rus ? parseInt(rus, 10) : null;\n  }\n\n  /**\n   * Gets the activity ID for the request from the Azure Cosmos DB service.\n   */\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n\n  /**\n   * Gets the continuation token to be used for continuing enumeration of the Azure Cosmos DB service.\n   *\n   * This is equivalent to the `etag` property.\n   */\n  public get continuation(): string {\n    return this.etag;\n  }\n\n  /**\n   * Gets the session token for use in session consistency reads from the Azure Cosmos DB service.\n   */\n  public get sessionToken(): string {\n    return this.headers[Constants.HttpHeaders.SessionToken];\n  }\n\n  /**\n   * Gets the entity tag associated with last transaction in the Azure Cosmos DB service,\n   * which can be used as If-Non-Match Access condition for ReadFeed REST request or\n   * `continuation` property of `ChangeFeedOptions` parameter for\n   * `Items.changeFeed()`\n   * to get feed changes since the transaction specified by this entity tag.\n   *\n   * This is equivalent to the `continuation` property.\n   */\n  public get etag(): string {\n    return this.headers[Constants.HttpHeaders.ETag];\n  }\n\n  /**\n   * Response headers of the response from Azure Cosmos DB\n   */\n  public headers: CosmosHeaders;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"esnext.asynciterable\" />\nimport type { ChangeFeedOptions } from \"./ChangeFeedOptions\";\nimport { ChangeFeedResponse } from \"./ChangeFeedResponse\";\nimport type { Resource } from \"./client\";\nimport type { ClientContext } from \"./ClientContext\";\nimport { Constants, ResourceType, StatusCodes } from \"./common\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport type { PartitionKey } from \"./documents\";\nimport type { FeedOptions } from \"./request\";\nimport type { Response } from \"./request\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * Provides iterator for change feed.\n *\n * Use `Items.changeFeed()` to get an instance of the iterator.\n */\nexport class ChangeFeedIterator<T> {\n  private static readonly IfNoneMatchAllHeaderValue = \"*\";\n  private nextIfNoneMatch: string;\n  private ifModifiedSince: string;\n  private lastStatusCode: number;\n  private isPartitionSpecified: boolean;\n\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: ChangeFeedOptions,\n  ) {\n    // partition key XOR partition key range id\n    const partitionKeyValid = partitionKey !== undefined;\n    this.isPartitionSpecified = partitionKeyValid;\n\n    let canUseStartFromBeginning = true;\n    if (changeFeedOptions.continuation) {\n      this.nextIfNoneMatch = changeFeedOptions.continuation;\n      canUseStartFromBeginning = false;\n    }\n\n    if (changeFeedOptions.startTime) {\n      // .toUTCString() is platform specific, but most platforms use RFC 1123.\n      // In ECMAScript 2018, this was standardized to RFC 1123.\n      // See for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n      this.ifModifiedSince = changeFeedOptions.startTime.toUTCString();\n      canUseStartFromBeginning = false;\n    }\n\n    if (canUseStartFromBeginning && !changeFeedOptions.startFromBeginning) {\n      this.nextIfNoneMatch = ChangeFeedIterator.IfNoneMatchAllHeaderValue;\n    }\n  }\n\n  /**\n   * Gets a value indicating whether there are potentially additional results that can be retrieved.\n   *\n   * Initially returns true. This value is set based on whether the last execution returned a continuation token.\n   *\n   * @returns Boolean value representing if whether there are potentially additional results that can be retrieved.\n   */\n  get hasMoreResults(): boolean {\n    return this.lastStatusCode !== StatusCodes.NotModified;\n  }\n\n  /**\n   * Gets an async iterator which will yield pages of results from Azure Cosmos DB.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.fetchNext();\n      if (result.count > 0) {\n        yield result;\n      }\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Read feed and retrieves the next page of results in Azure Cosmos DB.\n   */\n  public async fetchNext(): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.getFeedResponse(diagnosticNode);\n      this.lastStatusCode = response.statusCode;\n      this.nextIfNoneMatch = response.headers[Constants.HttpHeaders.ETag];\n      return response;\n    }, this.clientContext);\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedResponse<Array<T & Resource>>> {\n    if (!this.isPartitionSpecified) {\n      throw new Error(\n        \"Container is partitioned, but no partition key or partition key range id was specified.\",\n      );\n    }\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    if (this.nextIfNoneMatch) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: this.nextIfNoneMatch,\n      };\n    }\n\n    if (this.ifModifiedSince) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.ifModifiedSince;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n      diagnosticNode: diagnosticNode,\n    }) as Promise<any>); // TODO: some funky issues with query feed. Probably need to change it up.\n\n    return new ChangeFeedResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { PrimitivePartitionKeyValue } from \"../../documents\";\nimport { hashV2PartitionKey } from \"./v2\";\n\n/**\n * Generate Hash for a `Multi Hash` type partition.\n * @param partitionKey - to be hashed.\n * @returns\n */\nexport function hashMultiHashPartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  return partitionKey.map((keys) => hashV2PartitionKey([keys])).join(\"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { BytePrefix } from \"./prefix\";\n\nexport function writeStringForBinaryEncoding(payload: string): Buffer {\n  let outputStream = Buffer.from(BytePrefix.String, \"hex\");\n  const MAX_STRING_BYTES_TO_APPEND = 100;\n  const byteArray = [...Buffer.from(payload)];\n\n  const isShortString = payload.length <= MAX_STRING_BYTES_TO_APPEND;\n\n  for (\n    let index = 0;\n    index < (isShortString ? byteArray.length : MAX_STRING_BYTES_TO_APPEND + 1);\n    index++\n  ) {\n    let charByte = byteArray[index];\n    if (charByte < 0xff) {\n      charByte++;\n    }\n    outputStream = Buffer.concat([outputStream, Buffer.from(charByte.toString(16), \"hex\")]);\n  }\n\n  if (isShortString) {\n    outputStream = Buffer.concat([outputStream, Buffer.from(BytePrefix.Undefined, \"hex\")]);\n  }\n  return outputStream;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { doubleToByteArrayJSBI, writeNumberForBinaryEncodingJSBI } from \"./encoding/number\";\nimport { writeStringForBinaryEncoding } from \"./encoding/string\";\nimport { BytePrefix } from \"./encoding/prefix\";\nimport MurmurHash from \"./murmurHash\";\nimport type { PrimitivePartitionKeyValue } from \"../../documents\";\n\nconst MAX_STRING_CHARS = 100;\n\nexport function hashV1PartitionKey(partitionKey: PrimitivePartitionKeyValue[]): string {\n  const key = partitionKey[0];\n  const toHash = prefixKeyByType(key);\n  const hash = MurmurHash.x86.hash32(toHash);\n  const encodedJSBI = writeNumberForBinaryEncodingJSBI(hash);\n  const encodedValue = encodeByType(key);\n  const finalHash = Buffer.concat([encodedJSBI, encodedValue]).toString(\"hex\").toUpperCase();\n  return finalHash;\n}\n\nfunction prefixKeyByType(key: PrimitivePartitionKeyValue): Buffer {\n  let bytes: Buffer;\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      bytes = Buffer.concat([\n        Buffer.from(BytePrefix.String, \"hex\"),\n        Buffer.from(truncated),\n        Buffer.from(BytePrefix.Undefined, \"hex\"),\n      ]);\n      return bytes;\n    }\n    case \"number\": {\n      const numberBytes = doubleToByteArrayJSBI(key);\n      bytes = Buffer.concat([Buffer.from(BytePrefix.Number, \"hex\"), numberBytes]);\n      return bytes;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\": {\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    case \"undefined\": {\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    }\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n\nfunction encodeByType(key: PrimitivePartitionKeyValue): Buffer {\n  switch (typeof key) {\n    case \"string\": {\n      const truncated = key.substr(0, MAX_STRING_CHARS);\n      return writeStringForBinaryEncoding(truncated);\n    }\n    case \"number\": {\n      const encodedJSBI = writeNumberForBinaryEncodingJSBI(key);\n      return encodedJSBI;\n    }\n    case \"boolean\": {\n      const prefix = key ? BytePrefix.True : BytePrefix.False;\n      return Buffer.from(prefix, \"hex\");\n    }\n    case \"object\":\n      if (key === null) {\n        return Buffer.from(BytePrefix.Null, \"hex\");\n      }\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    case \"undefined\":\n      return Buffer.from(BytePrefix.Undefined, \"hex\");\n    default:\n      throw new Error(`Unexpected type: ${typeof key}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PartitionKeyDefinition, PrimitivePartitionKeyValue } from \"../../documents\";\nimport { PartitionKeyDefinitionVersion, PartitionKeyKind } from \"../../documents\";\nimport { hashMultiHashPartitionKey } from \"./multiHash\";\nimport { hashV1PartitionKey } from \"./v1\";\nimport { hashV2PartitionKey } from \"./v2\";\n\n/**\n * Generate hash of a PartitonKey based on it PartitionKeyDefinition.\n * @param partitionKey - to be hashed.\n * @param partitionDefinition - container's partitionKey definition\n * @returns\n */\nexport function hashPartitionKey(\n  partitionKey: PrimitivePartitionKeyValue[],\n  partitionDefinition: PartitionKeyDefinition,\n): string {\n  const kind: PartitionKeyKind = partitionDefinition?.kind || PartitionKeyKind.Hash; // Default value.\n  const isV2 =\n    partitionDefinition &&\n    partitionDefinition.version &&\n    partitionDefinition.version === PartitionKeyDefinitionVersion.V2;\n  switch (kind) {\n    case PartitionKeyKind.Hash:\n      return isV2 ? hashV2PartitionKey(partitionKey) : hashV1PartitionKey(partitionKey);\n    case PartitionKeyKind.MultiHash:\n      return hashMultiHashPartitionKey(partitionKey);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Container } from \"../client\";\nimport type { ClientContext } from \"../ClientContext\";\nimport { Constants, ResourceType } from \"../common/constants\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { SqlQuerySpec, FetchFunctionCallback } from \"../queryExecutionContext\";\nimport { QueryIterator } from \"../queryIterator\";\nimport type { FeedOptions, FeedResponse } from \"../request\";\nimport { withDiagnostics } from \"../utils/diagnostics\";\n\n/**\n * @internal\n * Provides the iterator for handling encrypted items in the Azure Cosmos DB database service.\n * extends @see {@link QueryIterator}\n */\nexport class EncryptionItemQueryIterator<Item> extends QueryIterator<Item> {\n  private container: Container;\n  private encryptionClientContext: ClientContext;\n  private encryptionOptions: FeedOptions;\n\n  constructor(\n    clientContext: ClientContext,\n    query: SqlQuerySpec | string,\n    options: FeedOptions,\n    fetchFunctions: FetchFunctionCallback | FetchFunctionCallback[],\n    container: Container,\n  ) {\n    super(clientContext, query, options, fetchFunctions, container.url, ResourceType.item);\n    this.container = container;\n    this.encryptionClientContext = clientContext;\n    this.encryptionOptions = options;\n  }\n\n  /**\n   * Gets an async iterator that will yield results until completion.\n   */\n  public override async *getAsyncIterator(): AsyncIterable<FeedResponse<Item>> {\n    let response: FeedResponse<Item>;\n    const diagnosticNode = new DiagnosticNodeInternal(\n      this.encryptionClientContext.diagnosticLevel,\n      DiagnosticNodeType.CLIENT_REQUEST_NODE,\n      null,\n    );\n    try {\n      response = yield* QueryIterator.prototype.getAsyncIteratorInternal.call(this, diagnosticNode);\n    } catch (error) {\n      await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n    }\n    if (response?.resources?.length > 0) {\n      let count = 0;\n      diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation);\n      for (let resource of response.resources) {\n        const { body, propertiesDecryptedCount } =\n          await this.container.encryptionProcessor.decrypt(resource);\n        resource = body;\n        count += propertiesDecryptedCount;\n      }\n      diagnosticNode.endEncryptionDiagnostics(\n        Constants.Encryption.DiagnosticsDecryptOperation,\n        count,\n      );\n    }\n    yield response;\n  }\n\n  /**\n   * Fetch all pages for the query and return a single FeedResponse.\n   */\n  public override async fetchAll(): Promise<FeedResponse<Item>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      let response: FeedResponse<Item>;\n      try {\n        response = await QueryIterator.prototype.fetchAllInternal.call(this, diagnosticNode);\n      } catch (error) {\n        await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n      }\n      if (response?.resources?.length > 0) {\n        let count = 0;\n        diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation);\n        for (let resource of response.resources) {\n          const { body, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(resource);\n          resource = body;\n          count += propertiesDecryptedCount;\n        }\n        diagnosticNode.endEncryptionDiagnostics(\n          Constants.Encryption.DiagnosticsDecryptOperation,\n          count,\n        );\n      }\n      return response;\n    }, this.encryptionClientContext);\n  }\n\n  /**\n   * Retrieve the next batch from the feed.\n   */\n  public override async fetchNext(): Promise<FeedResponse<Item>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      let response: FeedResponse<Item>;\n      try {\n        response = await QueryIterator.prototype.fetchNextInternal.call(this, diagnosticNode);\n      } catch (error) {\n        await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n      }\n      if (response?.resources?.length > 0) {\n        let count = 0;\n        diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsDecryptOperation);\n        for (let resource of response.resources) {\n          const { body, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(resource);\n          resource = body;\n          count += propertiesDecryptedCount;\n        }\n        diagnosticNode.endEncryptionDiagnostics(\n          Constants.Encryption.DiagnosticsDecryptOperation,\n          count,\n        );\n      }\n      return response;\n    }, this.encryptionClientContext);\n  }\n  /**\n   * @internal\n   */\n  public override async init(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    // Ensure encryption is initialized and set rid in options\n    await this.container.checkAndInitializeEncryption();\n    this.encryptionOptions.containerRid = this.container._rid;\n    await QueryIterator.prototype.init.call(this, diagnosticNode);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ChangeFeedIterator } from \"../../ChangeFeedIterator\";\nimport type { ChangeFeedOptions } from \"../../ChangeFeedOptions\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport {\n  Constants,\n  copyObject,\n  getIdFromLink,\n  getPathFromLink,\n  isItemResourceValid,\n  ResourceType,\n  StatusCodes,\n  SubStatusCodes,\n} from \"../../common\";\nimport { extractPartitionKeys, setPartitionKeyIfUndefined } from \"../../extractPartitionKey\";\nimport type { FetchFunctionCallback, SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions, Response } from \"../../request\";\nimport type { Container, PartitionKeyRange } from \"../Container\";\nimport { Item } from \"./Item\";\nimport type { ItemDefinition } from \"./ItemDefinition\";\nimport { ItemResponse } from \"./ItemResponse\";\nimport type {\n  Batch,\n  OperationResponse,\n  OperationInput,\n  BulkOptions,\n  BulkOperationResponse,\n  Operation,\n} from \"../../utils/batch\";\nimport {\n  isKeyInRange,\n  prepareOperations,\n  decorateBatchOperation,\n  splitBatchBasedOnBodySize,\n  BulkOperationType,\n} from \"../../utils/batch\";\nimport { assertNotUndefined, isPrimitivePartitionKeyValue } from \"../../utils/typeChecks\";\nimport { hashPartitionKey } from \"../../utils/hashing/hash\";\nimport { PartitionKeyRangeCache, QueryRange } from \"../../routing\";\nimport type { PartitionKey, PartitionKeyDefinition } from \"../../documents\";\nimport { convertToInternalPartitionKey } from \"../../documents\";\nimport type {\n  ChangeFeedPullModelIterator,\n  ChangeFeedIteratorOptions,\n} from \"../../client/ChangeFeed\";\nimport { validateChangeFeedIteratorOptions } from \"../../client/ChangeFeed/changeFeedUtils\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { DiagnosticNodeType } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  addDignosticChild,\n} from \"../../utils/diagnostics\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport { ChangeFeedIteratorBuilder } from \"../ChangeFeed/ChangeFeedIteratorBuilder\";\nimport type { EncryptionQueryBuilder } from \"../../encryption\";\nimport type { EncryptionSqlParameter } from \"../../encryption/EncryptionQueryBuilder\";\nimport type { Resource } from \"../Resource\";\nimport { TypeMarker } from \"../../encryption/enums/TypeMarker\";\nimport { EncryptionItemQueryIterator } from \"../../encryption/EncryptionItemQueryIterator\";\nimport { ErrorResponse } from \"../../request\";\n\n/**\n * @hidden\n */\nfunction isChangeFeedOptions(options: unknown): options is ChangeFeedOptions {\n  return options && !(isPrimitivePartitionKeyValue(options) || Array.isArray(options));\n}\n\n/**\n * Operations for creating new items, and reading/querying all items\n *\n * @see {@link Item} for reading, replacing, or deleting an existing container; use `.item(id)`.\n */\nexport class Items {\n  private partitionKeyRangeCache: PartitionKeyRangeCache;\n  /**\n   * Create an instance of {@link Items} linked to the parent {@link Container}.\n   * @param container - The parent container.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {\n    this.partitionKeyRangeCache = new PartitionKeyRangeCache(this.clientContext);\n  }\n\n  /**\n   * Queries all items.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM Families f WHERE f.lastName = @lastName\",\n   *   parameters: [\n   *     {name: \"@lastName\", value: \"Hendricks\"}\n   *   ]\n   * };\n   * const {result: items} = await items.query(querySpec).fetchAll();\n   * ```\n   */\n\n  //\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all items.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT firstname FROM Families f WHERE f.lastName = @lastName\",\n   *   parameters: [\n   *     {name: \"@lastName\", value: \"Hendricks\"}\n   *   ]\n   * };\n   * const {result: items} = await items.query<{firstName: string}>(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options: FeedOptions = {}): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.item);\n    const id = getIdFromLink(this.container.url);\n\n    const fetchFunction: FetchFunctionCallback = async (\n      diagnosticNode: DiagnosticNodeInternal,\n      innerOptions: FeedOptions,\n      correlatedActivityId: string,\n    ) => {\n      const response = await this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.item,\n        resourceId: id,\n        resultFn: (result) => (result ? result.Documents : []),\n        query,\n        options: innerOptions,\n        partitionKey: options.partitionKey,\n        diagnosticNode,\n        correlatedActivityId: correlatedActivityId,\n      });\n      return response;\n    };\n    let iterator: QueryIterator<T>;\n    if (this.clientContext.enableEncryption) {\n      iterator = new EncryptionItemQueryIterator(\n        this.clientContext,\n        query,\n        options,\n        fetchFunction,\n        this.container,\n      );\n    } else {\n      iterator = new QueryIterator<T>(\n        this.clientContext,\n        query,\n        options,\n        fetchFunction,\n        this.container.url,\n        ResourceType.item,\n      );\n    }\n    return iterator;\n  }\n  /**\n   * Queries all items in an encrypted container.\n   * @param queryBuilder - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to build a query on encrypted properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const queryBuilder = new EncryptionQueryBuilder(\"SELECT firstname FROM Families f WHERE f.lastName = @lastName\");\n   * queryBuilder.addStringParameter(\"@lastName\", \"Hendricks\", \"/lastname\");\n   * const queryIterator = await items.getEncryptionQueryIterator<{firstName: string}>(queryBuilder);\n   * const {result: items} = await queryIterator.fetchAll();\n   * ```\n   */\n  public async getEncryptionQueryIterator(\n    queryBuilder: EncryptionQueryBuilder,\n    options: FeedOptions = {},\n  ): Promise<QueryIterator<ItemDefinition>> {\n    const encryptionSqlQuerySpec = queryBuilder.toEncryptionSqlQuerySpec();\n    const sqlQuerySpec = await this.buildSqlQuerySpec(encryptionSqlQuerySpec);\n    const iterator = this.query<ItemDefinition>(sqlQuerySpec, options);\n    return iterator;\n  }\n\n  private async buildSqlQuerySpec(encryptionSqlQuerySpec: SqlQuerySpec): Promise<SqlQuerySpec> {\n    let encryptionParameters = encryptionSqlQuerySpec.parameters as EncryptionSqlParameter[];\n    const sqlQuerySpec: SqlQuerySpec = {\n      query: encryptionSqlQuerySpec.query,\n      parameters: [],\n    };\n    // returns copy to avoid encryption of original parameters passed\n    encryptionParameters = copyObject(encryptionParameters);\n    for (const parameter of encryptionParameters) {\n      let value: any;\n      if (parameter.type !== undefined || parameter.type !== TypeMarker.Null) {\n        value = await this.container.encryptionProcessor.encryptQueryParameter(\n          parameter.path,\n          parameter.value,\n          parameter.path === \"/id\",\n          parameter.type,\n        );\n      }\n      sqlQuerySpec.parameters.push({ name: parameter.name, value: value });\n    }\n    return sqlQuerySpec;\n  }\n\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   *\n   * @deprecated Use `getChangeFeedIterator` instead.\n   *\n   * @example Read from the beginning of the change feed.\n   * ```javascript\n   * const iterator = items.readChangeFeed({ startFromBeginning: true });\n   * const firstPage = await iterator.fetchNext();\n   * const firstPageResults = firstPage.result\n   * const secondPage = await iterator.fetchNext();\n   * ```\n   */\n  public readChangeFeed(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions,\n  ): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   *\n   */\n  public readChangeFeed(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   */\n  public readChangeFeed<T>(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions,\n  ): ChangeFeedIterator<T>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   */\n  public readChangeFeed<T>(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<T>;\n  public readChangeFeed<T>(\n    partitionKeyOrChangeFeedOptions?: PartitionKey | ChangeFeedOptions,\n    changeFeedOptions?: ChangeFeedOptions,\n  ): ChangeFeedIterator<T> {\n    if (isChangeFeedOptions(partitionKeyOrChangeFeedOptions)) {\n      return this.changeFeed(partitionKeyOrChangeFeedOptions);\n    } else {\n      return this.changeFeed(partitionKeyOrChangeFeedOptions, changeFeedOptions);\n    }\n  }\n\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   * @example Read from the beginning of the change feed.\n   * ```javascript\n   * const iterator = items.readChangeFeed({ startFromBeginning: true });\n   * const firstPage = await iterator.fetchNext();\n   * const firstPageResults = firstPage.result\n   * const secondPage = await iterator.fetchNext();\n   * ```\n   */\n  public changeFeed(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions,\n  ): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   */\n  public changeFeed(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<any>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   */\n  public changeFeed<T>(\n    partitionKey: PartitionKey,\n    changeFeedOptions?: ChangeFeedOptions,\n  ): ChangeFeedIterator<T>;\n  /**\n   * Create a `ChangeFeedIterator` to iterate over pages of changes\n   * @deprecated Use `getChangeFeedIterator` instead.\n   */\n  public changeFeed<T>(changeFeedOptions?: ChangeFeedOptions): ChangeFeedIterator<T>;\n  public changeFeed<T>(\n    partitionKeyOrChangeFeedOptions?: PartitionKey | ChangeFeedOptions,\n    changeFeedOptions?: ChangeFeedOptions,\n  ): ChangeFeedIterator<T> {\n    let partitionKey: PartitionKey;\n    if (!changeFeedOptions && isChangeFeedOptions(partitionKeyOrChangeFeedOptions)) {\n      partitionKey = undefined;\n      changeFeedOptions = partitionKeyOrChangeFeedOptions;\n    } else if (\n      partitionKeyOrChangeFeedOptions !== undefined &&\n      !isChangeFeedOptions(partitionKeyOrChangeFeedOptions)\n    ) {\n      partitionKey = partitionKeyOrChangeFeedOptions;\n    }\n\n    if (!changeFeedOptions) {\n      changeFeedOptions = {};\n    }\n\n    const path = getPathFromLink(this.container.url, ResourceType.item);\n    const id = getIdFromLink(this.container.url);\n    return new ChangeFeedIterator<T>(this.clientContext, id, path, partitionKey, changeFeedOptions);\n  }\n\n  /**\n   * Returns an iterator to iterate over pages of changes. The iterator returned can be used to fetch changes for a single partition key, feed range or an entire container.\n   */\n  public getChangeFeedIterator<T>(\n    changeFeedIteratorOptions?: ChangeFeedIteratorOptions,\n  ): ChangeFeedPullModelIterator<T> {\n    const cfOptions = changeFeedIteratorOptions !== undefined ? changeFeedIteratorOptions : {};\n    validateChangeFeedIteratorOptions(cfOptions);\n    const iterator = new ChangeFeedIteratorBuilder<T>(\n      cfOptions,\n      this.clientContext,\n      this.container,\n      this.partitionKeyRangeCache,\n    );\n    return iterator;\n  }\n\n  /**\n   * Read all items.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const {body: containerList} = await items.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ItemDefinition>;\n  /**\n   * Read all items.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   * @example Read all items to array.\n   * ```typescript\n   * const {body: containerList} = await items.readAll().fetchAll();\n   * ```\n   */\n  public readAll<T extends ItemDefinition>(options?: FeedOptions): QueryIterator<T>;\n  public readAll<T extends ItemDefinition>(options?: FeedOptions): QueryIterator<T> {\n    return this.query<T>(\"SELECT * from c\", options);\n  }\n\n  /**\n   * Create an item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - Represents the body of the item. Can contain any number of user defined properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   */\n  public async create<T extends ItemDefinition = any>(\n    body: T,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    // Generate random document id if the id is missing in the payload and\n    // options.disableAutomaticIdGeneration != true\n\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if ((body.id === undefined || body.id === \"\") && !options.disableAutomaticIdGeneration) {\n        body.id = randomUUID();\n      }\n      const partitionKeyDefinition = await readPartitionKeyDefinition(\n        diagnosticNode,\n        this.container,\n      );\n      let partitionKey = extractPartitionKeys(body, partitionKeyDefinition);\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          // returns copy to avoid encryption of original body passed\n          body = copyObject(body);\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { body: encryptedBody, propertiesEncryptedCount } =\n            await this.container.encryptionProcessor.encrypt(body);\n          body = encryptedBody;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            propertiesEncryptedCount,\n          );\n\n          partitionKey = extractPartitionKeys(body, partitionKeyDefinition);\n        }\n        const err = {};\n        if (!isItemResourceValid(body, err)) {\n          throw err;\n        }\n        const path = getPathFromLink(this.container.url, ResourceType.item);\n        const id = getIdFromLink(this.container.url);\n        response = await this.clientContext.create<T>({\n          body,\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          diagnosticNode,\n          options,\n          partitionKey,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          // Todo: internally retry post policy refresh\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n\n      if (this.clientContext.enableEncryption) {\n        // try block for decrypting response. This is done so that we can throw special error message in case of decryption failure\n        try {\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          const { body: decryptedResult, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(response.result);\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            propertiesDecryptedCount,\n          );\n          response.result = decryptedResult;\n          partitionKey = extractPartitionKeys(response.result, partitionKeyDefinition);\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Item creation was successful but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n      const ref = new Item(\n        this.container,\n        (response.result as any).id,\n        this.clientContext,\n        partitionKey,\n      );\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert an item.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - Represents the body of the item. Can contain any number of user defined properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   */\n  public async upsert(\n    body: unknown,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<ItemDefinition>>;\n  /**\n   * Upsert an item.\n   *\n   * Any provided type, T, is not necessarily enforced by the SDK.\n   * You may get more or less properties and it's up to your logic to enforce it.\n   *\n   * There is no set schema for JSON items. They may contain any number of custom properties.\n   *\n   * @param body - Represents the body of the item. Can contain any number of user defined properties.\n   * @param options - Used for modifying the request (for instance, specifying the partition key).\n   */\n  public async upsert<T extends ItemDefinition>(\n    body: T,\n    options?: RequestOptions,\n  ): Promise<ItemResponse<T>>;\n  public async upsert<T extends ItemDefinition>(\n    body: T,\n    options: RequestOptions = {},\n  ): Promise<ItemResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      // Generate random document id if the id is missing in the payload and\n      // options.disableAutomaticIdGeneration != true\n      if ((body.id === undefined || body.id === \"\") && !options.disableAutomaticIdGeneration) {\n        body.id = randomUUID();\n      }\n\n      const partitionKeyDefinition = await readPartitionKeyDefinition(\n        diagnosticNode,\n        this.container,\n      );\n      let partitionKey = extractPartitionKeys(body, partitionKeyDefinition);\n      let response: Response<T & Resource>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          // returns copy to avoid encryption of original body passed\n          body = copyObject(body);\n          options = options || {};\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          const { body: encryptedBody, propertiesEncryptedCount } =\n            await this.container.encryptionProcessor.encrypt(body);\n          body = encryptedBody;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            propertiesEncryptedCount,\n          );\n          partitionKey = extractPartitionKeys(body, partitionKeyDefinition);\n        }\n\n        const err = {};\n        if (!isItemResourceValid(body, err)) {\n          throw err;\n        }\n\n        const path = getPathFromLink(this.container.url, ResourceType.item);\n        const id = getIdFromLink(this.container.url);\n        response = await this.clientContext.upsert<T>({\n          body,\n          path,\n          resourceType: ResourceType.item,\n          resourceId: id,\n          options,\n          partitionKey,\n          diagnosticNode,\n        });\n      } catch (error: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n      if (this.clientContext.enableEncryption) {\n        try {\n          // try block for decrypting response. This is done so that we can throw special error message in case of decryption failure\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          const { body: decryptedResult, propertiesDecryptedCount } =\n            await this.container.encryptionProcessor.decrypt(response.result);\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            propertiesDecryptedCount,\n          );\n          response.result = decryptedResult;\n          partitionKey = extractPartitionKeys(response.result, partitionKeyDefinition);\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Item upsert was successful but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n\n      const ref = new Item(\n        this.container,\n        (response.result as any).id,\n        this.clientContext,\n        partitionKey,\n      );\n      return new ItemResponse(\n        response.result,\n        response.headers,\n        response.code,\n        response.substatus,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Execute bulk operations on items.\n   *\n   * Bulk takes an array of Operations which are typed based on what the operation does.\n   * The choices are: Create, Upsert, Read, Replace, and Delete\n   *\n   * Usage example:\n   * ```typescript\n   * // partitionKey is optional at the top level if present in the resourceBody\n   * const operations: OperationInput[] = [\n   *    {\n   *       operationType: \"Create\",\n   *       resourceBody: { id: \"doc1\", name: \"sample\", key: \"A\" }\n   *    },\n   *    {\n   *       operationType: \"Upsert\",\n   *       partitionKey: 'A',\n   *       resourceBody: { id: \"doc2\", name: \"other\", key: \"A\" }\n   *    }\n   * ]\n   *\n   * await database.container.items.bulk(operations)\n   * ```\n   *\n   * @param operations - List of operations. Limit 100\n   * @param bulkOptions - Optional options object to modify bulk behavior. Pass \\{ continueOnError: false \\} to stop executing operations when one fails. (Defaults to true)\n   * @param options - Used for modifying the request.\n   */\n  public async bulk(\n    operations: OperationInput[],\n    bulkOptions?: BulkOptions,\n    options?: RequestOptions,\n  ): Promise<BulkOperationResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const partitionKeyRanges = (\n        await this.partitionKeyRangeCache.onCollectionRoutingMap(this.container.url, diagnosticNode)\n      ).getOrderedParitionKeyRanges();\n\n      const partitionKeyDefinition = await readPartitionKeyDefinition(\n        diagnosticNode,\n        this.container,\n      );\n\n      if (this.clientContext.enableEncryption) {\n        // returns copy to avoid encryption of original operations body passed\n        operations = copyObject(operations);\n        options = options || {};\n        await this.container.checkAndInitializeEncryption();\n        options.containerRid = this.container._rid;\n        diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsEncryptOperation);\n        const { operations: encryptedOperations, totalPropertiesEncryptedCount } =\n          await this.bulkBatchEncryptionHelper(operations);\n        operations = encryptedOperations;\n        diagnosticNode.endEncryptionDiagnostics(\n          Constants.Encryption.DiagnosticsEncryptOperation,\n          totalPropertiesEncryptedCount,\n        );\n      }\n\n      const batches: Batch[] = partitionKeyRanges.map((keyRange: PartitionKeyRange) => {\n        return {\n          min: keyRange.minInclusive,\n          max: keyRange.maxExclusive,\n          rangeId: keyRange.id,\n          indexes: [] as number[],\n          operations: [] as Operation[],\n        };\n      });\n\n      this.groupOperationsBasedOnPartitionKey(operations, partitionKeyDefinition, options, batches);\n\n      const path = getPathFromLink(this.container.url, ResourceType.item);\n\n      const orderedResponses: OperationResponse[] = [];\n      // split batches based on cumulative size of operations\n      const batchMap = batches\n        .filter((batch: Batch) => batch.operations.length)\n        .flatMap((batch: Batch) => splitBatchBasedOnBodySize(batch));\n\n      await Promise.all(\n        this.executeBatchOperations(\n          batchMap,\n          path,\n          bulkOptions,\n          options,\n          diagnosticNode,\n          orderedResponses,\n          partitionKeyDefinition,\n        ),\n      );\n      const response: any = orderedResponses;\n      response.diagnostics = diagnosticNode.toDiagnostic(this.clientContext.getClientConfig());\n      return response;\n    }, this.clientContext);\n  }\n\n  private executeBatchOperations(\n    batchMap: Batch[],\n    path: string,\n    bulkOptions: BulkOptions,\n    options: RequestOptions,\n    diagnosticNode: DiagnosticNodeInternal,\n    orderedResponses: OperationResponse[],\n    partitionKeyDefinition: PartitionKeyDefinition,\n  ): Promise<void>[] {\n    return batchMap.map(async (batch: Batch) => {\n      if (batch.operations.length > 100) {\n        throw new Error(\"Cannot run bulk request with more than 100 operations per partition\");\n      }\n      let response: Response<OperationResponse[]>;\n      try {\n        response = await addDignosticChild(\n          async (childNode: DiagnosticNodeInternal) =>\n            this.clientContext.bulk({\n              body: batch.operations,\n              partitionKeyRangeId: batch.rangeId,\n              path,\n              resourceId: this.container.url,\n              bulkOptions,\n              options,\n              diagnosticNode: childNode,\n            }),\n          diagnosticNode,\n          DiagnosticNodeType.BATCH_REQUEST,\n        );\n        response.result.forEach((operationResponse: OperationResponse, index: number) => {\n          orderedResponses[batch.indexes[index]] = operationResponse;\n        });\n      } catch (err: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(err);\n        }\n        // In the case of 410 errors, we need to recompute the partition key ranges\n        // and redo the batch request, however, 410 errors occur for unsupported\n        // partition key types as well since we don't support them, so for now we throw\n        if (err.code === StatusCodes.Gone) {\n          const isPartitionSplit =\n            err.substatus === SubStatusCodes.PartitionKeyRangeGone ||\n            err.substatus === SubStatusCodes.CompletingSplit;\n\n          if (isPartitionSplit) {\n            const queryRange = new QueryRange(batch.min, batch.max, true, false);\n            const overlappingRanges = await this.partitionKeyRangeCache.getOverlappingRanges(\n              this.container.url,\n              queryRange,\n              diagnosticNode,\n              true,\n            );\n            if (overlappingRanges.length < 1) {\n              throw new Error(\"Partition split/merge detected but no overlapping ranges found.\");\n            }\n            // Handles both merge (overlappingRanges.length === 1) and split (overlappingRanges.length > 1) cases.\n            if (overlappingRanges.length >= 1) {\n              // const splitBatches: Batch[] = [];\n              const newBatches: Batch[] = this.createNewBatches(\n                overlappingRanges,\n                batch,\n                partitionKeyDefinition,\n              );\n\n              await Promise.all(\n                this.executeBatchOperations(\n                  newBatches,\n                  path,\n                  bulkOptions,\n                  options,\n                  diagnosticNode,\n                  orderedResponses,\n                  partitionKeyDefinition,\n                ),\n              );\n            }\n          } else {\n            throw new Error(\n              \"Partition key error. An operation has an unsupported partitionKey type\" +\n                err.message,\n            );\n          }\n        } else {\n          throw new Error(`Bulk request errored with: ${err.message}`);\n        }\n      }\n      if (response) {\n        try {\n          if (this.clientContext.enableEncryption) {\n            diagnosticNode.beginEncryptionDiagnostics(\n              Constants.Encryption.DiagnosticsDecryptOperation,\n            );\n            let count = 0;\n            for (const result of response.result) {\n              if (result.resourceBody) {\n                const { body, propertiesDecryptedCount } =\n                  await this.container.encryptionProcessor.decrypt(result.resourceBody);\n                result.resourceBody = body;\n                count += propertiesDecryptedCount;\n              }\n            }\n            diagnosticNode.endEncryptionDiagnostics(\n              Constants.Encryption.DiagnosticsDecryptOperation,\n              count,\n            );\n          }\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Batch response was received but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n        response.result.forEach((operationResponse: OperationResponse, index: number) => {\n          orderedResponses[batch.indexes[index]] = operationResponse;\n        });\n      }\n    });\n  }\n\n  /**\n   * Function to create new batches based of partition key Ranges.\n   *\n   * @param overlappingRanges - Overlapping partition key ranges.\n   * @param batch - Batch to be split.\n   * @param partitionKeyDefinition - PartitionKey definition of container.\n   * @returns Array of new batches.\n   */\n  private createNewBatches(\n    overlappingRanges: PartitionKeyRange[],\n    batch: Batch,\n    partitionKeyDefinition: PartitionKeyDefinition,\n  ): Batch[] {\n    const newBatches: Batch[] = overlappingRanges.map((keyRange: PartitionKeyRange) => {\n      return {\n        min: keyRange.minInclusive,\n        max: keyRange.maxExclusive,\n        rangeId: keyRange.id,\n        indexes: [] as number[],\n        operations: [] as Operation[],\n      };\n    });\n    let indexValue = 0;\n    batch.operations.forEach((operation) => {\n      const partitionKey = JSON.parse(operation.partitionKey);\n      const hashed = hashPartitionKey(\n        assertNotUndefined(\n          partitionKey,\n          \"undefined value for PartitionKey is not expected during grouping of bulk operations.\",\n        ),\n        partitionKeyDefinition,\n      );\n      const batchForKey = assertNotUndefined(\n        newBatches.find((newBatch: Batch) => {\n          return isKeyInRange(newBatch.min, newBatch.max, hashed);\n        }),\n        \"No suitable Batch found.\",\n      );\n      batchForKey.operations.push(operation);\n      batchForKey.indexes.push(batch.indexes[indexValue]);\n      indexValue++;\n    });\n    return newBatches;\n  }\n\n  /**\n   * Function to create batches based of partition key Ranges.\n   * @param operations - operations to group\n   * @param partitionDefinition - PartitionKey definition of container.\n   * @param options - Request options for bulk request.\n   * @param batches - Groups to be filled with operations.\n   */\n  private groupOperationsBasedOnPartitionKey(\n    operations: OperationInput[],\n    partitionDefinition: PartitionKeyDefinition,\n    options: RequestOptions | undefined,\n    batches: Batch[],\n  ) {\n    operations.forEach((operationInput, index: number) => {\n      const { operation, partitionKey } = prepareOperations(\n        operationInput,\n        partitionDefinition,\n        options,\n      );\n      const hashed = hashPartitionKey(\n        assertNotUndefined(\n          partitionKey,\n          \"undefined value for PartitionKey is not expected during grouping of bulk operations.\",\n        ),\n        partitionDefinition,\n      );\n      const batchForKey = assertNotUndefined(\n        batches.find((batch: Batch) => {\n          return isKeyInRange(batch.min, batch.max, hashed);\n        }),\n        \"No suitable Batch found.\",\n      );\n      batchForKey.operations.push(operation);\n      batchForKey.indexes.push(index);\n    });\n  }\n\n  /**\n   * Execute transactional batch operations on items.\n   *\n   * Batch takes an array of Operations which are typed based on what the operation does. Batch is transactional and will rollback all operations if one fails.\n   * The choices are: Create, Upsert, Read, Replace, and Delete\n   *\n   * Usage example:\n   * ```typescript\n   * // The partitionKey is a required second argument. If it’s undefined, it defaults to the expected partition key format.\n   * const operations: OperationInput[] = [\n   *    {\n   *       operationType: \"Create\",\n   *       resourceBody: { id: \"doc1\", name: \"sample\", key: \"A\" }\n   *    },\n   *    {\n   *       operationType: \"Upsert\",\n   *       resourceBody: { id: \"doc2\", name: \"other\", key: \"A\" }\n   *    }\n   * ]\n   *\n   * await database.container.items.batch(operations, \"A\")\n   * ```\n   *\n   * @param operations - List of operations. Limit 100\n   * @param options - Used for modifying the request\n   */\n  public async batch(\n    operations: OperationInput[],\n    partitionKey?: PartitionKey,\n    options?: RequestOptions,\n  ): Promise<Response<OperationResponse[]>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      operations.map((operation) => decorateBatchOperation(operation, options));\n      partitionKey = await setPartitionKeyIfUndefined(diagnosticNode, this.container, partitionKey);\n      const path = getPathFromLink(this.container.url, ResourceType.item);\n\n      if (operations.length > 100) {\n        throw new Error(\"Cannot run batch request with more than 100 operations per partition\");\n      }\n      let response: Response<OperationResponse[]>;\n      try {\n        if (this.clientContext.enableEncryption) {\n          // returns copy to avoid encryption of original operations body passed\n          operations = copyObject(operations);\n          options = options || {};\n          await this.container.checkAndInitializeEncryption();\n          options.containerRid = this.container._rid;\n          let count = 0;\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n          );\n          if (partitionKey) {\n            const partitionKeyInternal = convertToInternalPartitionKey(partitionKey);\n            const { partitionKeyList, encryptedCount } =\n              await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n                partitionKeyInternal,\n              );\n            partitionKey = partitionKeyList;\n            count += encryptedCount;\n          }\n          const { operations: encryptedOperations, totalPropertiesEncryptedCount } =\n            await this.bulkBatchEncryptionHelper(operations);\n          operations = encryptedOperations;\n          count += totalPropertiesEncryptedCount;\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsEncryptOperation,\n            count,\n          );\n        }\n\n        response = await this.clientContext.batch({\n          body: operations,\n          partitionKey,\n          path,\n          resourceId: this.container.url,\n          options,\n          diagnosticNode,\n        });\n      } catch (err: any) {\n        if (this.clientContext.enableEncryption) {\n          await this.container.throwIfRequestNeedsARetryPostPolicyRefresh(err);\n        }\n        throw new Error(`Batch request error: ${err.message}`);\n      }\n      if (this.clientContext.enableEncryption) {\n        try {\n          diagnosticNode.beginEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n          );\n          let count = 0;\n          for (const result of response.result) {\n            if (result.resourceBody) {\n              const { body, propertiesDecryptedCount } =\n                await this.container.encryptionProcessor.decrypt(result.resourceBody);\n              result.resourceBody = body;\n              count += propertiesDecryptedCount;\n            }\n          }\n          diagnosticNode.endEncryptionDiagnostics(\n            Constants.Encryption.DiagnosticsDecryptOperation,\n            count,\n          );\n        } catch (error) {\n          const decryptionError = new ErrorResponse(\n            `Batch response was received but response decryption failed: + ${error.message}`,\n          );\n          decryptionError.code = StatusCodes.ServiceUnavailable;\n          throw decryptionError;\n        }\n      }\n      return response;\n    }, this.clientContext);\n  }\n\n  private async bulkBatchEncryptionHelper(\n    operations: OperationInput[],\n  ): Promise<{ operations: OperationInput[]; totalPropertiesEncryptedCount: number }> {\n    let totalPropertiesEncryptedCount = 0;\n    for (const operation of operations) {\n      if (Object.prototype.hasOwnProperty.call(operation, \"partitionKey\")) {\n        const partitionKeyInternal = convertToInternalPartitionKey(operation.partitionKey);\n        const { partitionKeyList, encryptedCount } =\n          await this.container.encryptionProcessor.getEncryptedPartitionKeyValue(\n            partitionKeyInternal,\n          );\n        operation.partitionKey = partitionKeyList;\n        totalPropertiesEncryptedCount += encryptedCount;\n      }\n      switch (operation.operationType) {\n        case BulkOperationType.Create:\n        case BulkOperationType.Upsert: {\n          const { body, propertiesEncryptedCount } =\n            await this.container.encryptionProcessor.encrypt(operation.resourceBody);\n          operation.resourceBody = body;\n          totalPropertiesEncryptedCount += propertiesEncryptedCount;\n          break;\n        }\n        case BulkOperationType.Read:\n        case BulkOperationType.Delete:\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            operation.id = await this.container.encryptionProcessor.getEncryptedId(operation.id);\n            totalPropertiesEncryptedCount++;\n          }\n          break;\n        case BulkOperationType.Replace: {\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            operation.id = await this.container.encryptionProcessor.getEncryptedId(operation.id);\n            totalPropertiesEncryptedCount++;\n          }\n          const { body, propertiesEncryptedCount } =\n            await this.container.encryptionProcessor.encrypt(operation.resourceBody);\n          operation.resourceBody = body;\n          totalPropertiesEncryptedCount += propertiesEncryptedCount;\n          break;\n        }\n        case BulkOperationType.Patch: {\n          if (await this.container.encryptionProcessor.isPathEncrypted(\"/id\")) {\n            operation.id = await this.container.encryptionProcessor.getEncryptedId(operation.id);\n            totalPropertiesEncryptedCount++;\n          }\n          const body = operation.resourceBody;\n          const patchRequestBody = Array.isArray(body) ? body : body.operations;\n          for (const patchOperation of patchRequestBody) {\n            if (\"value\" in patchOperation) {\n              if (this.container.encryptionProcessor.isPathEncrypted(patchOperation.path)) {\n                patchOperation.value = await this.container.encryptionProcessor.encryptProperty(\n                  patchOperation.path,\n                  patchOperation.value,\n                );\n                totalPropertiesEncryptedCount++;\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n    return { operations, totalPropertiesEncryptedCount };\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { StoredProcedure } from \"./StoredProcedure\";\nimport type { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\n\nexport class StoredProcedureResponse extends ResourceResponse<\n  StoredProcedureDefinition & Resource\n> {\n  constructor(\n    resource: StoredProcedureDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    storedProcedure: StoredProcedure,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.storedProcedure = storedProcedure;\n  }\n  /**\n   * A reference to the {@link StoredProcedure} which the {@link StoredProcedureDefinition} corresponds to.\n   */\n  public readonly storedProcedure: StoredProcedure;\n\n  /**\n   * Alias for storedProcedure.\n   *\n   * A reference to the {@link StoredProcedure} which the {@link StoredProcedureDefinition} corresponds to.\n   */\n  public get sproc(): StoredProcedure {\n    return this.storedProcedure;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createStoredProcedureUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { PartitionKey } from \"../../documents/PartitionKey\";\nimport { undefinedPartitionKey } from \"../../extractPartitionKey\";\nimport type { RequestOptions } from \"../../request\";\nimport { ResourceResponse } from \"../../request\";\nimport { readPartitionKeyDefinition } from \"../ClientUtils\";\nimport type { Container } from \"../Container\";\nimport type { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for reading, replacing, deleting, or executing a specific, existing stored procedure by id.\n *\n * For operations to create, read all, or query Stored Procedures,\n */\nexport class StoredProcedure {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createStoredProcedureUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * Creates a new instance of {@link StoredProcedure} linked to the parent {@link Container}.\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link StoredProcedure}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link StoredProcedureDefinition} for the given {@link StoredProcedure}.\n   */\n  public async read(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<StoredProcedureDefinition>({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link StoredProcedure} with the specified {@link StoredProcedureDefinition}.\n   * @param body - The specified {@link StoredProcedureDefinition} to replace the existing definition.\n   */\n  public async replace(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions,\n  ): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<StoredProcedureDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link StoredProcedure}.\n   */\n  public async delete(options?: RequestOptions): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<StoredProcedureDefinition>({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Execute the given {@link StoredProcedure}.\n   *\n   * The specified type, T, is not enforced by the client.\n   * Be sure to validate the response from the stored procedure matches the type, T, you provide.\n   *\n   * @param partitionKey - The partition key to use when executing the stored procedure\n   * @param params - Array of parameters to pass as arguments to the given {@link StoredProcedure}.\n   * @param options - Additional options, such as the partition key to invoke the {@link StoredProcedure} on.\n   */\n  public async execute<T = any>(\n    partitionKey: PartitionKey,\n    params?: any[],\n    options?: RequestOptions,\n  ): Promise<ResourceResponse<T>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (partitionKey === undefined) {\n        const partitionKeyResponse = await readPartitionKeyDefinition(\n          diagnosticNode,\n          this.container,\n        );\n        partitionKey = undefinedPartitionKey(partitionKeyResponse);\n      }\n      const response = await this.clientContext.execute<T>({\n        sprocLink: this.url,\n        params,\n        options,\n        partitionKey,\n        diagnosticNode,\n      });\n      return new ResourceResponse<T>(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport { StoredProcedure } from \"./StoredProcedure\";\nimport type { StoredProcedureDefinition } from \"./StoredProcedureDefinition\";\nimport { StoredProcedureResponse } from \"./StoredProcedureResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations for creating, upserting, or reading/querying all Stored Procedures.\n *\n * For operations to read, replace, delete, or execute a specific, existing stored procedure by id, see `container.storedProcedure()`.\n */\nexport class StoredProcedures {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all Stored Procedures.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @sproc\",\n   *   parameters: [\n   *     {name: \"@sproc\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: sprocList} = await containers.storedProcedures.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all Stored Procedures.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @sproc\",\n   *   parameters: [\n   *     {name: \"@sproc\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: sprocList} = await containers.storedProcedures.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.sproc);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        resultFn: (result) => result.StoredProcedures,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n    });\n  }\n\n  /**\n   * Read all stored procedures.\n   * @example Read all stored procedures to array.\n   * ```typescript\n   * const {body: sprocList} = await containers.storedProcedures.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<StoredProcedureDefinition & Resource> {\n    return this.query<StoredProcedureDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a StoredProcedure.\n   *\n   * Azure Cosmos DB allows stored procedures to be executed in the storage tier,\n   * directly against an item container. The script\n   * gets executed under ACID transactions on the primary storage partition of the\n   * specified container. For additional details,\n   * refer to the server-side JavaScript API documentation.\n   */\n  public async create(\n    body: StoredProcedureDefinition,\n    options?: RequestOptions,\n  ): Promise<StoredProcedureResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.sproc);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<StoredProcedureDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.sproc,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new StoredProcedure(this.container, response.result.id, this.clientContext);\n      return new StoredProcedureResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { Trigger } from \"./index\";\nimport type { TriggerDefinition } from \"./TriggerDefinition\";\n\nexport class TriggerResponse extends ResourceResponse<TriggerDefinition & Resource> {\n  constructor(\n    resource: TriggerDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    trigger: Trigger,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.trigger = trigger;\n  }\n  /** A reference to the {@link Trigger} corresponding to the returned {@link TriggerDefinition}. */\n  public readonly trigger: Trigger;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createTriggerUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { TriggerDefinition } from \"./TriggerDefinition\";\nimport { TriggerResponse } from \"./TriggerResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations to read, replace, or delete a {@link Trigger}.\n *\n * Use `container.triggers` to create, upsert, query, or read all.\n */\nexport class Trigger {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createTriggerUri(this.container.database.id, this.container.id, this.id);\n  }\n\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link Trigger}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link TriggerDefinition} for the given {@link Trigger}.\n   */\n  public async read(options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<TriggerDefinition>({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Trigger} with the specified {@link TriggerDefinition}.\n   * @param body - The specified {@link TriggerDefinition} to replace the existing definition with.\n   */\n  public async replace(\n    body: TriggerDefinition,\n    options?: RequestOptions,\n  ): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<TriggerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link Trigger}.\n   */\n  public async delete(options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<TriggerDefinition>({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport { Trigger } from \"./Trigger\";\nimport type { TriggerDefinition } from \"./TriggerDefinition\";\nimport { TriggerResponse } from \"./TriggerResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Operations to create, upsert, query, and read all triggers.\n *\n * Use `container.triggers` to read, replace, or delete a {@link Trigger}.\n */\nexport class Triggers {\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all Triggers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all Triggers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.trigger);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        resultFn: (result) => result.Triggers,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all Triggers.\n   * @example Read all trigger to array.\n   * ```typescript\n   * const {body: triggerList} = await container.triggers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<TriggerDefinition & Resource> {\n    return this.query<TriggerDefinition & Resource>(undefined, options);\n  }\n  /**\n   * Create a trigger.\n   *\n   * Azure Cosmos DB supports pre and post triggers defined in JavaScript to be executed\n   * on creates, updates and deletes.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   */\n  public async create(body: TriggerDefinition, options?: RequestOptions): Promise<TriggerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.trigger);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<TriggerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.trigger,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new Trigger(this.container, response.result.id, this.clientContext);\n      return new TriggerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport type { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\n\nexport class UserDefinedFunctionResponse extends ResourceResponse<\n  UserDefinedFunctionDefinition & Resource\n> {\n  constructor(\n    resource: UserDefinedFunctionDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    udf: UserDefinedFunction,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.userDefinedFunction = udf;\n  }\n  /** A reference to the {@link UserDefinedFunction} corresponding to the returned {@link UserDefinedFunctionDefinition}. */\n  public readonly userDefinedFunction: UserDefinedFunction;\n  /**\n   * Alias for `userDefinedFunction(id)`.\n   *\n   * A reference to the {@link UserDefinedFunction} corresponding to the returned {@link UserDefinedFunctionDefinition}.\n   */\n  public get udf(): UserDefinedFunction {\n    return this.userDefinedFunction;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createUserDefinedFunctionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to read, replace, or delete a specified User Definied Function by id.\n *\n * @see {@link UserDefinedFunction} to create, upsert, query, read all User Defined Functions.\n */\nexport class UserDefinedFunction {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserDefinedFunctionUri(this.container.database.id, this.container.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   * @param id - The id of the given {@link UserDefinedFunction}.\n   */\n  constructor(\n    public readonly container: Container,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link UserDefinedFunctionDefinition} for the given {@link UserDefinedFunction}.\n   */\n  public async read(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<UserDefinedFunctionDefinition>({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link UserDefinedFunction} with the specified {@link UserDefinedFunctionDefinition}.\n   * @param options -\n   */\n  public async replace(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions,\n  ): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<UserDefinedFunctionDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link UserDefined}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Container } from \"../Container\";\nimport type { Resource } from \"../Resource\";\nimport { UserDefinedFunction } from \"./UserDefinedFunction\";\nimport type { UserDefinedFunctionDefinition } from \"./UserDefinedFunctionDefinition\";\nimport { UserDefinedFunctionResponse } from \"./UserDefinedFunctionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to create, upsert, query, or read all User Defined Functions.\n *\n * @see {@link UserDefinedFunction} to read, replace, or delete a given User Defined Function by id.\n */\nexport class UserDefinedFunctions {\n  /**\n   * @hidden\n   * @param container - The parent {@link Container}.\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all User Defined Functions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all User Defined Functions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.container.url, ResourceType.udf);\n    const id = getIdFromLink(this.container.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        resultFn: (result) => result.UserDefinedFunctions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all User Defined Functions.\n   * @example Read all User Defined Functions to array.\n   * ```typescript\n   * const {body: udfList} = await container.userDefinedFunctions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinedFunctionDefinition & Resource> {\n    return this.query<UserDefinedFunctionDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a UserDefinedFunction.\n   *\n   * Azure Cosmos DB supports JavaScript UDFs which can be used inside queries, stored procedures and triggers.\n   *\n   * For additional details, refer to the server-side JavaScript API documentation.\n   *\n   */\n  public async create(\n    body: UserDefinedFunctionDefinition,\n    options?: RequestOptions,\n  ): Promise<UserDefinedFunctionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (body.body) {\n        body.body = body.body.toString();\n      }\n\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.container.url, ResourceType.udf);\n      const id = getIdFromLink(this.container.url);\n\n      const response = await this.clientContext.create<UserDefinedFunctionDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.udf,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new UserDefinedFunction(this.container, response.result.id, this.clientContext);\n      return new UserDefinedFunctionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { StoredProcedures, StoredProcedure } from \"../StoredProcedure\";\nimport { Trigger, Triggers } from \"../Trigger\";\nimport { UserDefinedFunction, UserDefinedFunctions } from \"../UserDefinedFunction\";\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { Container } from \"../Container/Container\";\n\nexport class Scripts {\n  /**\n   * @param container - The parent {@link Container}.\n   * @hidden\n   */\n  constructor(\n    public readonly container: Container,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link StoredProcedure} by id.\n   *\n   * Use `.storedProcedures` for creating new stored procedures, or querying/reading all stored procedures.\n   * @param id - The id of the {@link StoredProcedure}.\n   */\n  public storedProcedure(id: string): StoredProcedure {\n    return new StoredProcedure(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Trigger} by id.\n   *\n   * Use `.triggers` for creating new triggers, or querying/reading all triggers.\n   * @param id - The id of the {@link Trigger}.\n   */\n  public trigger(id: string): Trigger {\n    return new Trigger(this.container, id, this.clientContext);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link UserDefinedFunction} by id.\n   *\n   * Use `.userDefinedFunctions` for creating new user defined functions, or querying/reading all user defined functions.\n   * @param id - The id of the {@link UserDefinedFunction}.\n   */\n  public userDefinedFunction(id: string): UserDefinedFunction {\n    return new UserDefinedFunction(this.container, id, this.clientContext);\n  }\n\n  private $sprocs: StoredProcedures;\n  /**\n   * Operations for creating new stored procedures, and reading/querying all stored procedures.\n   *\n   * For reading, replacing, or deleting an existing stored procedure, use `.storedProcedure(id)`.\n   */\n  public get storedProcedures(): StoredProcedures {\n    if (!this.$sprocs) {\n      this.$sprocs = new StoredProcedures(this.container, this.clientContext);\n    }\n    return this.$sprocs;\n  }\n\n  private $triggers: Triggers;\n  /**\n   * Operations for creating new triggers, and reading/querying all triggers.\n   *\n   * For reading, replacing, or deleting an existing trigger, use `.trigger(id)`.\n   */\n  public get triggers(): Triggers {\n    if (!this.$triggers) {\n      this.$triggers = new Triggers(this.container, this.clientContext);\n    }\n    return this.$triggers;\n  }\n\n  private $udfs: UserDefinedFunctions;\n  /**\n   * Operations for creating new user defined functions, and reading/querying all user defined functions.\n   *\n   * For reading, replacing, or deleting an existing user defined function, use `.userDefinedFunction(id)`.\n   */\n  public get userDefinedFunctions(): UserDefinedFunctions {\n    if (!this.$udfs) {\n      this.$udfs = new UserDefinedFunctions(this.container, this.clientContext);\n    }\n    return this.$udfs;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport type { Resource } from \"../Resource\";\nimport type { ContainerDefinition } from \"./ContainerDefinition\";\nimport type { Container } from \"./index\";\n\n/** Response object for Container operations */\nexport class ContainerResponse extends ResourceResponse<ContainerDefinition & Resource> {\n  constructor(\n    resource: ContainerDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    container: Container,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.container = container;\n  }\n  /** A reference to the {@link Container} that the returned {@link ContainerDefinition} corresponds to. */\n  public readonly container: Container;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { Offer } from \"./Offer\";\nimport type { OfferDefinition } from \"./OfferDefinition\";\n\nexport class OfferResponse extends ResourceResponse<OfferDefinition & Resource> {\n  constructor(\n    resource: OfferDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    diagnostics: CosmosDiagnostics,\n    offer?: Offer,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.offer = offer;\n  }\n  /** A reference to the {@link Offer} corresponding to the returned {@link OfferDefinition}. */\n  public readonly offer: Offer;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { Constants, isResourceValid, ResourceType } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport type { RequestOptions } from \"../../request\";\nimport type { OfferDefinition } from \"./OfferDefinition\";\nimport { OfferResponse } from \"./OfferResponse\";\n\n/**\n * Use to read or replace an existing {@link Offer} by id.\n *\n * @see {@link Offers} to query or read all offers.\n */\nexport class Offer {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return `/${Constants.Path.OffersPathSegment}/${this.id}`;\n  }\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the Database Account.\n   * @param id - The id of the given {@link Offer}.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link OfferDefinition} for the given {@link Offer}.\n   */\n  public async read(options?: RequestOptions): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const response = await this.clientContext.read<OfferDefinition>({\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode,\n      });\n      return new OfferResponse(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        this,\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Offer} with the specified {@link OfferDefinition}.\n   * @param body - The specified {@link OfferDefinition}\n   */\n  public async replace(body: OfferDefinition, options?: RequestOptions): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const response = await this.clientContext.replace<OfferDefinition>({\n        body,\n        path: this.url,\n        resourceType: ResourceType.offer,\n        resourceId: this.id,\n        options,\n        diagnosticNode,\n      });\n      return new OfferResponse(\n        response.result,\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        this,\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { ResourceType } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { OfferDefinition } from \"./OfferDefinition\";\n\n/**\n * Use to query or read all Offers.\n *\n * @see {@link Offer} to read or replace an existing {@link Offer} by id.\n */\nexport class Offers {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the offers.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all offers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed<T>({\n        path: \"/offers\",\n        resourceType: ResourceType.offer,\n        resourceId: \"\",\n        resultFn: (result) => result.Offers,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all offers.\n   * @example Read all offers to array.\n   * ```typescript\n   * const {body: offerList} = await client.offers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<OfferDefinition & Resource> {\n    return this.query<OfferDefinition & Resource>(undefined, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport { Resource } from \"../../client/Resource\";\nimport { ClientEncryptionKeyProperties } from \"./ClientEncryptionKeyProperties\";\n\n/** Response object for ClientEncryptionKey operations */\nexport class ClientEncryptionKeyResponse extends ResourceResponse<Resource> {\n  constructor(\n    resource: Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.clientEncryptionKeyProperties = clientEncryptionKeyProperties;\n  }\n  /** Properties of the client encryption key */\n  public readonly clientEncryptionKeyProperties: ClientEncryptionKeyProperties;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** Encryption Algorithms supported for data encryption */\nexport enum EncryptionAlgorithm {\n  /**  Represents the authenticated encryption algorithm with associated data as described in\n        http://tools.ietf.org/html/draft-mcgrew-aead-aes-cbc-hmac-sha2-05. */\n  AEAD_AES_256_CBC_HMAC_SHA256 = \"AEAD_AES_256_CBC_HMAC_SHA256\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** Names of implementations of @see {@link EncryptionKeyResolver} */\nexport enum EncryptionKeyResolverName {\n  /** Name of @see {@link AzureKeyVaultEncryptionKeyResolver} implementation for key encryption keys in Azure Key vault*/\n  AzureKeyVault = \"AZURE_KEY_VAULT\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** The algorithms used to wrap/unwrap data encryption key with key encryption key.  */\nexport enum KeyEncryptionAlgorithm {\n  /** name of supported algo */\n  RSA_OAEP = \"RSA-OAEP\",\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { TokenCredential } from \"@azure/core-auth\";\nimport type { EncryptionKeyResolver } from \"./EncryptionKeyResolver\";\nimport type { KeyWrapAlgorithm } from \"@azure/keyvault-keys\";\nimport { KeyClient } from \"@azure/keyvault-keys\";\nimport { ErrorResponse } from \"../../request\";\nimport { EncryptionKeyResolverName } from \"../enums\";\n\n/**\n * Implementation of EncryptionKeyResolver that uses Azure Key Vault for customer managed keys.\n */\nexport class AzureKeyVaultEncryptionKeyResolver implements EncryptionKeyResolver {\n  private credentials: TokenCredential;\n\n  constructor(credentials: TokenCredential) {\n    this.credentials = credentials;\n  }\n  /**\n   * Name of the resolver to use for client side encryption.\n   * Currently only AzureKeyVault implementation is supported.\n   */\n  public encryptionKeyResolverName = EncryptionKeyResolverName.AzureKeyVault;\n  /**\n   * wraps the given key using the specified key encryption key path and algorithm.\n   * @param encryptionKeyId - path to the customer managed key to be used for wrapping. For Azure Key Vault, this is url of the key in the vault.\n   * @param algorithm - algorithm to be used for wrapping.\n   * @param unwrappedKey - dek to be wrapped.\n   * @returns wrapped DEK.\n   */\n  public async wrapKey(\n    encryptionKeyId: string,\n    algorithm: string,\n    unwrappedKey: Uint8Array,\n  ): Promise<Uint8Array> {\n    try {\n      const origin = this.getOrigin(encryptionKeyId);\n      const keyClient = new KeyClient(origin, this.credentials);\n      const [keyName, keyVersion] = this.getKeyDetails(encryptionKeyId);\n      const cryptographyClient = keyClient.getCryptographyClient(keyName, {\n        keyVersion: keyVersion,\n      });\n      const res = await cryptographyClient.wrapKey(algorithm as KeyWrapAlgorithm, unwrappedKey);\n      if (!res || !res.result) {\n        throw new ErrorResponse(`Failed to wrap key: ${res}`);\n      }\n      return res.result;\n    } catch (e) {\n      throw new ErrorResponse(`Failed to wrap key: ${e.message}`);\n    }\n  }\n  /**\n   * Unwraps the given wrapped key using the specified key encryption key path and algorithm.\n   * @param encryptionKeyId - path to the customer managed key to be used for unwrapping. For Azure Key Vault, this is url of the key in the vault.\n   * @param algorithm - algorithm to be used for unwrapping.\n   * @param wrappedKey - wrapped DEK.\n   * @returns unwrapped DEK.\n   */\n  public async unwrapKey(\n    encryptionKeyId: string,\n    algorithm: string,\n    wrappedKey: Uint8Array,\n  ): Promise<Uint8Array> {\n    try {\n      const origin = this.getOrigin(encryptionKeyId);\n      const keyClient = new KeyClient(origin, this.credentials);\n      const [keyName, keyVersion] = this.getKeyDetails(encryptionKeyId);\n      const cryptographyClient = keyClient.getCryptographyClient(keyName, {\n        keyVersion: keyVersion,\n      });\n      const res = await cryptographyClient.unwrapKey(algorithm as KeyWrapAlgorithm, wrappedKey);\n      if (!res || !res.result) {\n        throw new ErrorResponse(`Failed to wrap key: ${res}`);\n      }\n      return res.result;\n    } catch (e) {\n      throw new ErrorResponse(`Failed to unwrap key: ${e.message}`);\n    }\n  }\n  // TODO: improve this method to extract key name and version from the url\n  private getKeyDetails(encryptionKeyId: string): [string, string] {\n    let url;\n    try {\n      url = new URL(encryptionKeyId);\n      const parts = url.pathname.split(\"/\");\n      if (parts.length < 4 || parts.length > 5) {\n        throw new ErrorResponse(\n          `Invalid key url: ${encryptionKeyId}. Key url must be in the format https://<vault>.vault.azure.net/keys/<key-name>/<key-version>`,\n        );\n      }\n      if (parts.length === 4 || parts.length === 5) {\n        return [parts[2], parts[3]];\n      }\n    } catch (e) {\n      throw new ErrorResponse(\n        `Invalid key url: ${encryptionKeyId}. Key url must be in the format https://<vault>.vault.azure.net/keys/<key-name>/<key-version>. Error: ${e.message}`,\n      );\n    }\n  }\n\n  private getOrigin(encryptionKeyId: string): string {\n    try {\n      const url = new URL(encryptionKeyId);\n      return url.origin;\n    } catch (e) {\n      throw new ErrorResponse(\n        `Invalid key url: ${encryptionKeyId}. Key url must be in the format https://<vault>.vault.azure.net/keys/<key-name>/<key-version>. Error: ${e.message}`,\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common\";\nimport type { EncryptionKeyResolver } from \"./EncryptionKeyResolver\";\nimport type { KeyEncryptionAlgorithm } from \"./enums\";\n/**\n * Class to store encryption keys in unwrapped form and provide an interface for wrapping and unwrapping the keys.\n */\nexport class EncryptionKeyStoreProvider {\n  public RsaOaepEncryptionAlgorithm: string = \"RSA-OAEP\";\n  // interval for clear cache to run\n  cacheRefresher: NodeJS.Timeout;\n\n  // cache to store the unwrapped encryption key. Key is the path of the encryption key\n  public unwrappedEncryptionKeyCache: { [key: string]: [Date, Buffer] };\n  public providerName: string;\n  constructor(\n    private keyEncryptionKeyResolver: EncryptionKeyResolver,\n    private cacheTimeToLive: number,\n  ) {\n    this.keyEncryptionKeyResolver = keyEncryptionKeyResolver;\n    this.providerName = keyEncryptionKeyResolver.encryptionKeyResolverName;\n    this.unwrappedEncryptionKeyCache = {};\n    this.cacheTimeToLive = cacheTimeToLive;\n    this.clearCacheOnTtlExpiry();\n  }\n\n  public async wrapKey(\n    encryptionKeyId: string,\n    algorithm: KeyEncryptionAlgorithm,\n    key: Buffer,\n  ): Promise<Buffer> {\n    const uInt8ArrayKey = new Uint8Array(key);\n    const wrappedEncryptionKey = await this.keyEncryptionKeyResolver.wrapKey(\n      encryptionKeyId,\n      algorithm,\n      uInt8ArrayKey,\n    );\n    return Buffer.from(wrappedEncryptionKey);\n  }\n\n  public async unwrapKey(\n    encryptionKeyId: string,\n    algorithm: KeyEncryptionAlgorithm,\n    wrappedKey: Buffer,\n  ): Promise<Buffer> {\n    if (this.cacheTimeToLive === 0) {\n      const res = await this.keyEncryptionKeyResolver.unwrapKey(\n        encryptionKeyId,\n        algorithm,\n        wrappedKey,\n      );\n      return Buffer.from(res);\n    }\n    if (!this.unwrappedEncryptionKeyCache[encryptionKeyId]) {\n      const wrappedKeyUint8Array = new Uint8Array(wrappedKey);\n      const plainEncryptionKey = await this.keyEncryptionKeyResolver.unwrapKey(\n        encryptionKeyId,\n        algorithm,\n        wrappedKeyUint8Array,\n      );\n      const plainEncryptionKeyBuffer = Buffer.from(plainEncryptionKey);\n      this.unwrappedEncryptionKeyCache[encryptionKeyId] = [new Date(), plainEncryptionKeyBuffer];\n    }\n    return this.unwrappedEncryptionKeyCache[encryptionKeyId][1];\n  }\n\n  private async clearCacheOnTtlExpiry(): Promise<void> {\n    this.cacheRefresher = setInterval(() => {\n      const now = new Date();\n      for (const key in this.unwrappedEncryptionKeyCache) {\n        if (\n          now.getTime() - this.unwrappedEncryptionKeyCache[key][0].getTime() >\n          this.cacheTimeToLive\n        ) {\n          delete this.unwrappedEncryptionKeyCache[key];\n        }\n      }\n    }, Constants.EncryptionCacheRefreshIntervalInMs);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { EncryptionSettingForProperty } from \"./EncryptionSettingForProperty\";\n\n/**\n * stores partitionKeyPaths, all the pathsToEncrypt, and encryption settings (cekId, encryption type, and algorithm) for each property.\n * see {@link EncryptionSettingForProperty}\n * @hidden\n */\nexport class EncryptionSettings {\n  public id: string; // databaseRid + '/' + containerRid\n\n  public containerRid: string;\n\n  public partitionKeyPaths: string[];\n\n  public pathsToEncrypt: string[] = [];\n\n  // key is property path\n  private encryptionSettingForProperties: { [key: string]: EncryptionSettingForProperty } = {};\n\n  // getContainerRid\n  public constructor(id: string, containerRid: string, partitionKeyPaths: string[]) {\n    this.id = id;\n    this.containerRid = containerRid;\n    this.partitionKeyPaths = partitionKeyPaths;\n  }\n\n  public setEncryptionSettingForProperty(\n    key: string,\n    encryptionSettingForProperty: EncryptionSettingForProperty,\n  ): void {\n    this.encryptionSettingForProperties[key] = encryptionSettingForProperty;\n  }\n\n  public getEncryptionSettingForProperty(propertyName: string): EncryptionSettingForProperty {\n    return this.encryptionSettingForProperties[propertyName];\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { KeyEncryptionAlgorithm } from \"./enums/KeyEncryptionAlgorithm\";\nimport type { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider\";\n/**\n * A wrapper class containing the info about the key-protecting key stored in an external key provider\n * and provides interface to wrap and unwrap the key.\n */\nexport class KeyEncryptionKey {\n  private encryptionAlgorithm: KeyEncryptionAlgorithm;\n\n  public name: string;\n\n  public path: string;\n\n  public keyStoreProvider: EncryptionKeyStoreProvider;\n\n  constructor(name: string, path: string, keyStoreProvider: EncryptionKeyStoreProvider) {\n    this.name = name;\n    this.path = path;\n    this.keyStoreProvider = keyStoreProvider;\n    this.encryptionAlgorithm = KeyEncryptionAlgorithm.RSA_OAEP;\n  }\n\n  public async wrapEncryptionKey(plainTextEncryptionKey: Buffer): Promise<Buffer> {\n    return this.keyStoreProvider.wrapKey(\n      this.path,\n      this.encryptionAlgorithm,\n      plainTextEncryptionKey,\n    );\n  }\n\n  public async unwrapEncryptionKey(wrappedEncryptionKey: Buffer): Promise<Buffer> {\n    return this.keyStoreProvider.unwrapKey(\n      this.path,\n      this.encryptionAlgorithm,\n      wrappedEncryptionKey,\n    );\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { EncryptionType } from \"../enums\";\nimport { createCipheriv, randomBytes, createHmac, createDecipheriv } from \"crypto\";\nimport { DataEncryptionKey } from \"../EncryptionKey\";\n\nexport class AeadAes256CbcHmacSha256Algorithm {\n  private algoVersion = 0x1;\n  private blockSizeInBytes = 16;\n  private encryptionType: EncryptionType;\n  private dataEncryptionKey: DataEncryptionKey;\n  private version: Buffer;\n  private versionSize: Buffer;\n  private keySizeInBytes: number;\n  private minimumCipherTextLength: number;\n\n  constructor(dataEncryptionKey: DataEncryptionKey, encryptionType: EncryptionType) {\n    this.dataEncryptionKey = dataEncryptionKey;\n    this.encryptionType = encryptionType;\n    this.version = Buffer.from([this.algoVersion]);\n    this.versionSize = Buffer.from([1]);\n    this.keySizeInBytes = 32;\n    this.minimumCipherTextLength = 1 + 2 * this.blockSizeInBytes + this.keySizeInBytes;\n  }\n\n  public encrypt(plainTextBuffer: Buffer): Buffer {\n    let iv: Buffer;\n    // create initialization vector\n    if (this.encryptionType === EncryptionType.RANDOMIZED) {\n      iv = randomBytes(16);\n    } else {\n      const ivHmac = createHmac(\"sha256\", this.dataEncryptionKey.ivKeyBuffer);\n      ivHmac.update(plainTextBuffer);\n      iv = ivHmac.digest().slice(0, this.blockSizeInBytes);\n    }\n    // create cipher text\n    const cipher = createCipheriv(\"aes-256-cbc\", this.dataEncryptionKey.encryptionKeyBuffer, iv);\n    const cipherTextBuffer = Buffer.concat([cipher.update(plainTextBuffer), cipher.final()]);\n    const authTagBuffer = this.generateAuthenticationTag(iv, cipherTextBuffer);\n    return Buffer.concat([Buffer.from([this.algoVersion]), authTagBuffer, iv, cipherTextBuffer]);\n  }\n\n  public decrypt(cipherTextBuffer: Buffer): Buffer {\n    if (cipherTextBuffer.length < this.minimumCipherTextLength) {\n      throw new Error(\"Invalid cipher text length\");\n    }\n    if (cipherTextBuffer[0] !== this.algoVersion) {\n      throw new Error(\"Invalid cipher text version\");\n    }\n    const authTagStartIndex = 1;\n    const authTagLength = this.keySizeInBytes;\n    const ivStartIndex = authTagStartIndex + authTagLength;\n    const ivLength = this.blockSizeInBytes;\n    const cipherTextStartIndex = ivStartIndex + ivLength;\n    const cipherTextLength = cipherTextBuffer.length - cipherTextStartIndex;\n\n    const authenticationTag = cipherTextBuffer.slice(\n      authTagStartIndex,\n      authTagStartIndex + authTagLength,\n    );\n    const iv = cipherTextBuffer.slice(ivStartIndex, ivStartIndex + ivLength);\n    const cipherText = cipherTextBuffer.slice(\n      cipherTextStartIndex,\n      cipherTextStartIndex + cipherTextLength,\n    );\n\n    this.validateAuthenticationTag(authenticationTag, iv, cipherText);\n\n    const decipher = createDecipheriv(\n      \"aes-256-cbc\",\n      this.dataEncryptionKey.encryptionKeyBuffer,\n      iv,\n    );\n    const decrypted = decipher.update(cipherText);\n    const result = Buffer.concat([decrypted, decipher.final()]);\n    return result;\n  }\n\n  private generateAuthenticationTag(iv: Buffer, cipherTextBuffer: Buffer): Buffer {\n    const hmac = createHmac(\"sha256\", this.dataEncryptionKey.macKeyBuffer);\n    const buffer = Buffer.concat([this.version, iv, cipherTextBuffer, this.versionSize]);\n    return hmac.update(buffer).digest();\n  }\n  private validateAuthenticationTag(authenticationTag: Buffer, iv: Buffer, cipherText: Buffer) {\n    const expectedAuthTag = this.generateAuthenticationTag(iv, cipherText);\n    if (!authenticationTag.equals(expectedAuthTag)) {\n      throw new Error(\"Invalid authentication tag\");\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionIncludedPath } from \"./ClientEncryptionIncludedPath\";\nimport type { ClientEncryptionKeyProperties } from \"./ClientEncryptionKey\";\nimport type { EncryptionAlgorithm, EncryptionType } from \"./enums\";\nimport { AeadAes256CbcHmacSha256Algorithm } from \"./AeadAes256CbcHmacSha256Algorithm\";\nimport type { ProtectedDataEncryptionKey } from \"./EncryptionKey\";\nimport type { EncryptionManager } from \"./EncryptionManager\";\n\n/**\n * Represents the encryption setting for a specific property in an item.\n * @hidden\n */\nexport class EncryptionSettingForProperty {\n  // client encryption key id.\n  encryptionKeyId: string;\n  // encryption type - Deterministic/Randomized.\n  encryptionType: EncryptionType;\n  // encryption algorithm - AEAD_AES_256_CBC_HMAC_SHA256\n  encryptionAlgorithm: EncryptionAlgorithm;\n\n  constructor(clientEncryptionIncludedPath: ClientEncryptionIncludedPath) {\n    this.encryptionKeyId = clientEncryptionIncludedPath.clientEncryptionKeyId;\n    this.encryptionType = clientEncryptionIncludedPath.encryptionType;\n    this.encryptionAlgorithm = clientEncryptionIncludedPath.encryptionAlgorithm;\n  }\n\n  public async buildEncryptionAlgorithm(\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    encryptionManager: EncryptionManager,\n    forceRefresh?: boolean,\n  ): Promise<AeadAes256CbcHmacSha256Algorithm> {\n    const protectedDataEncryptionKey = await this.buildProtectedDataEncryptionKey(\n      clientEncryptionKeyProperties,\n      encryptionManager,\n      forceRefresh,\n    );\n    const encryptionAlgorithm = new AeadAes256CbcHmacSha256Algorithm(\n      protectedDataEncryptionKey,\n      this.encryptionType,\n    );\n\n    return encryptionAlgorithm;\n  }\n\n  private async buildProtectedDataEncryptionKey(\n    clientEncryptionKeyProperties: ClientEncryptionKeyProperties,\n    encryptionManager: EncryptionManager,\n    forceRefresh?: boolean,\n  ): Promise<ProtectedDataEncryptionKey> {\n    const keyEncryptionKey = encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.name,\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.value,\n      encryptionManager.encryptionKeyStoreProvider,\n    );\n    const protectedDataEncryptionKey =\n      await encryptionManager.protectedDataEncryptionKeyCache.getOrCreate(\n        this.encryptionKeyId,\n        keyEncryptionKey,\n        clientEncryptionKeyProperties.wrappedDataEncryptionKey,\n        forceRefresh,\n      );\n\n    return protectedDataEncryptionKey;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createHmac } from \"crypto\";\n\nexport abstract class DataEncryptionKey {\n  private rootKeyBuffer: Buffer;\n  private keySizeInBits = 256;\n  private keySizeInBytes = this.keySizeInBits / 8;\n\n  public encryptionKeyBuffer: Buffer;\n  public macKeyBuffer: Buffer;\n  public ivKeyBuffer: Buffer;\n  public name: string;\n\n  constructor(rootKey: Buffer, name: string) {\n    if (rootKey.length !== this.keySizeInBytes) {\n      throw new Error(\"Invalid root key size\");\n    }\n    this.rootKeyBuffer = rootKey;\n    this.name = name;\n\n    const encryptionKeySalt = `Microsoft SQL Server cell encryption key with encryption algorithm:AEAD_AES_256_CBC_HMAC_SHA256 and key length:${this.keySizeInBits}`;\n    const macKeySalt = `Microsoft SQL Server cell MAC key with encryption algorithm:AEAD_AES_256_CBC_HMAC_SHA256 and key length:${this.keySizeInBits}`;\n    const ivKeySalt = `Microsoft SQL Server cell IV key with encryption algorithm:AEAD_AES_256_CBC_HMAC_SHA256 and key length:${this.keySizeInBits}`;\n\n    this.encryptionKeyBuffer = this.getHmacWithSha256(encryptionKeySalt, this.rootKeyBuffer);\n    this.macKeyBuffer = this.getHmacWithSha256(macKeySalt, this.rootKeyBuffer);\n    this.ivKeyBuffer = this.getHmacWithSha256(ivKeySalt, this.rootKeyBuffer);\n  }\n\n  private getHmacWithSha256(plainText: string, key: Buffer): Buffer {\n    const hmac = createHmac(\"sha256\", key);\n    hmac.update(Buffer.from(plainText, \"utf16le\"));\n    return hmac.digest();\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { DataEncryptionKey } from \"./DataEncryptionKey\";\nimport type { KeyEncryptionKey } from \"../KeyEncryptionKey\";\n\n/**\n * A wrapper class around `DataEncryptionKey` that stores it in a protected form.\n * The `ProtectedDataEncryptionKey` class extends `DataEncryptionKey` and holds both the raw key and its encrypted form.\n * It also includes information about the `KeyEncryptionKey` used to encrypt the data encryption key.\n * @hidden\n */\nexport class ProtectedDataEncryptionKey extends DataEncryptionKey {\n  public keyEncryptionKey: KeyEncryptionKey;\n\n  public encryptedValue: Buffer;\n\n  public name: string;\n\n  public constructor(\n    name: string,\n    keyEncryptionKey: KeyEncryptionKey,\n    rawKey: Buffer,\n    encryptedKey: Buffer,\n  ) {\n    super(rawKey, name);\n    this.name = name;\n    this.keyEncryptionKey = keyEncryptionKey;\n    this.encryptedValue = encryptedKey;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { EncryptionSettings } from \"./EncryptionSettings\";\nimport type { EncryptionSettingForProperty } from \"./EncryptionSettingForProperty\";\nimport type { AeadAes256CbcHmacSha256Algorithm } from \"./AeadAes256CbcHmacSha256Algorithm\";\nimport type { ContainerDefinition, Database, ItemDefinition } from \"../client\";\nimport type { PartitionKeyInternal } from \"../documents\";\nimport type { TypeMarker } from \"./enums/TypeMarker\";\nimport type { ClientContext } from \"../ClientContext\";\nimport type { ClientEncryptionKeyRequest } from \"./ClientEncryptionKey\";\nimport type { ClientEncryptionKeyProperties } from \"./ClientEncryptionKey\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport {\n  Constants,\n  ResourceType,\n  StatusCodes,\n  createDeserializer,\n  createSerializer,\n  extractPath,\n} from \"../common\";\nimport type { RequestOptions } from \"../request\";\nimport { ErrorResponse } from \"../request\";\nimport { withDiagnostics } from \"../utils/diagnostics\";\nimport type { EncryptionManager } from \"./EncryptionManager\";\nimport type { JSONValue } from \"../queryExecutionContext\";\n\nexport class EncryptionProcessor {\n  constructor(\n    private readonly containerId: string,\n    public containerRid: string,\n    private readonly database: Database,\n    private readonly clientContext: ClientContext,\n    private encryptionManager: EncryptionManager,\n  ) {}\n\n  async encrypt<T extends ItemDefinition>(\n    body: T,\n  ): Promise<{ body: T; propertiesEncryptedCount: number }> {\n    if (!body) {\n      throw new ErrorResponse(\"Input body is null or undefined.\");\n    }\n    let propertiesEncryptedCount = 0;\n    const encryptionSettings = await this.getEncryptionSetting();\n    if (!encryptionSettings) return { body, propertiesEncryptedCount };\n    for (const pathToEncrypt of encryptionSettings.pathsToEncrypt) {\n      const propertyName = pathToEncrypt.slice(1);\n      if (!Object.prototype.hasOwnProperty.call(body, propertyName)) {\n        continue;\n      }\n\n      const settingForProperty = encryptionSettings.getEncryptionSettingForProperty(pathToEncrypt);\n      if (!settingForProperty) {\n        throw new ErrorResponse(\"Invalid Encryption Setting for the Property: \" + propertyName);\n      }\n      body[propertyName as keyof T] = await this.encryptToken(\n        body[propertyName],\n        settingForProperty,\n        propertyName === \"id\",\n      );\n      propertiesEncryptedCount++;\n    }\n    return { body, propertiesEncryptedCount };\n  }\n\n  async isPathEncrypted(path: string): Promise<boolean> {\n    path = extractPath(path);\n    const encryptionSettings = await this.getEncryptionSetting();\n    const settingForProperty = encryptionSettings.getEncryptionSettingForProperty(path);\n    if (!settingForProperty) return false;\n    return true;\n  }\n\n  async encryptProperty(path: string, value: JSONValue): Promise<any> {\n    path = extractPath(path);\n    const encryptionSettings = await this.getEncryptionSetting();\n    if (!encryptionSettings) return value;\n    const settingForProperty = encryptionSettings.getEncryptionSettingForProperty(path);\n    if (!settingForProperty) {\n      return value;\n    }\n\n    value = await this.encryptToken(value, settingForProperty, path === \"/id\");\n    return value;\n  }\n\n  async getEncryptedPartitionKeyValue(\n    partitionKeyList: PartitionKeyInternal,\n  ): Promise<{ partitionKeyList: PartitionKeyInternal; encryptedCount: number }> {\n    const encryptionSettings = await this.getEncryptionSetting();\n    let encryptedCount = 0;\n    if (!encryptionSettings) return { partitionKeyList, encryptedCount };\n    const partitionKeyPaths = encryptionSettings.partitionKeyPaths;\n    for (let i = 0; i < partitionKeyPaths.length; i++) {\n      const partitionKeyPath = extractPath(partitionKeyPaths[i]);\n      if (encryptionSettings.pathsToEncrypt.includes(partitionKeyPath)) {\n        const settingForProperty =\n          encryptionSettings.getEncryptionSettingForProperty(partitionKeyPath);\n        partitionKeyList[i] = await this.encryptToken(\n          partitionKeyList[i],\n          settingForProperty,\n          partitionKeyPath === \"/id\",\n        );\n        encryptedCount++;\n      }\n    }\n    return { partitionKeyList, encryptedCount };\n  }\n\n  async getEncryptedUrl(id: string): Promise<string> {\n    const parts = id.split(\"/\");\n    const lastPart = parts[parts.length - 1];\n    const encryptedLastPart = await this.getEncryptedId(lastPart);\n    parts[parts.length - 1] = encryptedLastPart;\n    return parts.join(\"/\");\n  }\n\n  async getEncryptedId(id: string): Promise<string> {\n    const encryptionSettings = await this.getEncryptionSetting();\n    if (!encryptionSettings) return id;\n    const settingForProperty = encryptionSettings.getEncryptionSettingForProperty(\"/id\");\n\n    if (!settingForProperty) return id;\n    id = await this.encryptToken(id, settingForProperty, true);\n    return id;\n  }\n\n  async encryptQueryParameter(\n    path: string,\n    value: JSONValue,\n    isValueId: boolean,\n    type?: TypeMarker,\n  ): Promise<JSONValue> {\n    if (value === null) {\n      return value;\n    }\n    path = extractPath(path);\n    const encryptionSettings = await this.getEncryptionSetting();\n    if (!encryptionSettings) return value;\n    const settingForProperty = encryptionSettings.getEncryptionSettingForProperty(path);\n    if (!settingForProperty) {\n      return value;\n    }\n    return this.encryptToken(value, settingForProperty, isValueId, type);\n  }\n\n  private async encryptToken(\n    valueToEncrypt: any,\n    propertySetting: EncryptionSettingForProperty,\n    isValueId: boolean,\n    type?: TypeMarker,\n  ): Promise<any> {\n    if (typeof valueToEncrypt === \"object\" && valueToEncrypt !== null) {\n      for (const key in valueToEncrypt) {\n        if (Object.prototype.hasOwnProperty.call(valueToEncrypt, key)) {\n          valueToEncrypt[key] = await this.encryptToken(\n            valueToEncrypt[key],\n            propertySetting,\n            isValueId,\n            type,\n          );\n        }\n      }\n    } else if (Array.isArray(type)) {\n      for (let i = 0; i < valueToEncrypt.length; i++) {\n        valueToEncrypt[i] = await this.encryptToken(\n          valueToEncrypt[i],\n          propertySetting,\n          isValueId,\n          type,\n        );\n      }\n    } else {\n      valueToEncrypt = await this.serializeAndEncryptValue(\n        valueToEncrypt,\n        propertySetting,\n        isValueId,\n        type,\n      );\n    }\n    return valueToEncrypt;\n  }\n\n  private async serializeAndEncryptValue(\n    valueToEncrypt: any,\n    propertySetting: EncryptionSettingForProperty,\n    isValueId: boolean,\n    type?: TypeMarker,\n  ): Promise<string> {\n    if (valueToEncrypt === null) {\n      return valueToEncrypt;\n    }\n    const [typeMarker, serializer] = createSerializer(valueToEncrypt, type);\n    const plainText = serializer.serialize(valueToEncrypt);\n    const encryptionAlgorithm = await this.buildEncryptionAlgorithm(propertySetting);\n    const cipherText = encryptionAlgorithm.encrypt(plainText);\n    if (isValueId) {\n      if (typeof valueToEncrypt !== \"string\") {\n        throw new ErrorResponse(\"The id should be of string type.\");\n      }\n    }\n\n    const cipherTextWithTypeMarker = Buffer.alloc(cipherText.length + 1);\n    cipherTextWithTypeMarker[0] = typeMarker;\n    cipherText.forEach((value, index) => {\n      cipherTextWithTypeMarker[index + 1] = value;\n    });\n    let encryptedValue = Buffer.from(cipherTextWithTypeMarker).toString(\"base64\");\n    if (isValueId) {\n      encryptedValue = encryptedValue.replace(/\\//g, \"_\").replace(/\\+/g, \"-\");\n    }\n    return encryptedValue;\n  }\n\n  async decrypt<T extends ItemDefinition>(\n    body: T,\n  ): Promise<{ body: T; propertiesDecryptedCount: number }> {\n    let propertiesDecryptedCount = 0;\n    if (body == null) {\n      return { body, propertiesDecryptedCount };\n    }\n    const encryptionSettings = await this.getEncryptionSetting();\n    if (!encryptionSettings) return { body, propertiesDecryptedCount };\n    for (const pathToEncrypt of encryptionSettings.pathsToEncrypt) {\n      const propertyName = pathToEncrypt.slice(1);\n      if (!Object.prototype.hasOwnProperty.call(body, propertyName)) {\n        continue;\n      }\n      const settingForProperty = encryptionSettings.getEncryptionSettingForProperty(pathToEncrypt);\n      if (settingForProperty == null) {\n        throw new ErrorResponse(\"Invalid Encryption Setting for the Path: \" + pathToEncrypt);\n      }\n\n      body[propertyName as keyof T] = await this.decryptToken(\n        body[propertyName],\n        settingForProperty,\n        propertyName === \"id\",\n      );\n      propertiesDecryptedCount++;\n    }\n    return { body, propertiesDecryptedCount };\n  }\n\n  private async decryptToken(\n    valueToDecrypt: any,\n    propertySetting: EncryptionSettingForProperty,\n    isValueId: boolean,\n  ): Promise<any> {\n    if (typeof valueToDecrypt === \"object\") {\n      for (const key in valueToDecrypt) {\n        if (Object.prototype.hasOwnProperty.call(valueToDecrypt, key)) {\n          valueToDecrypt[key] = await this.decryptToken(\n            valueToDecrypt[key],\n            propertySetting,\n            isValueId,\n          );\n        }\n      }\n    } else if (Array.isArray(valueToDecrypt)) {\n      for (let i = 0; i < valueToDecrypt.length; i++) {\n        valueToDecrypt[i] = await this.decryptToken(valueToDecrypt[i], propertySetting, isValueId);\n      }\n    } else {\n      valueToDecrypt = await this.deserializeAndDecryptValue(\n        valueToDecrypt,\n        propertySetting,\n        isValueId,\n      );\n    }\n    return valueToDecrypt;\n  }\n\n  private async deserializeAndDecryptValue(\n    valueToDecrypt: string,\n    propertySetting: EncryptionSettingForProperty,\n    isValueId: boolean,\n  ): Promise<any> {\n    if (isValueId) {\n      valueToDecrypt = valueToDecrypt.replace(/_/g, \"/\").replace(/-/g, \"+\");\n    }\n    const cipherTextWithTypeMarker = Buffer.from(valueToDecrypt, \"base64\");\n    if (cipherTextWithTypeMarker === null) {\n      return null;\n    }\n\n    let cipherText = Buffer.alloc(cipherTextWithTypeMarker.length - 1);\n    cipherText = Buffer.from(cipherTextWithTypeMarker.slice(1));\n\n    const encryptionAlgorithm = await this.buildEncryptionAlgorithm(propertySetting);\n    const plainText = encryptionAlgorithm.decrypt(cipherText);\n    if (plainText === null) {\n      throw new ErrorResponse(\"returned null plain text\");\n    }\n\n    const serializer = createDeserializer(cipherTextWithTypeMarker[0] as TypeMarker);\n    return serializer.deserialize(plainText);\n  }\n\n  async getEncryptionSetting(forceRefresh?: boolean): Promise<EncryptionSettings> {\n    const key = this.database._rid + \"/\" + this.containerRid;\n    const encryptionSetting = this.encryptionManager.encryptionSettingsCache.get(key);\n    if (forceRefresh || !encryptionSetting) {\n      return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n        const path = `/dbs/${this.database.id}/colls/${this.containerId}`;\n        const id = `dbs/${this.database.id}/colls/${this.containerId}`;\n        const response = await this.clientContext.read<ContainerDefinition>({\n          path,\n          resourceType: ResourceType.container,\n          resourceId: id,\n          diagnosticNode,\n        });\n        if (!response || !response.result) {\n          throw new ErrorResponse(\"Failed to fetch container definition\");\n        }\n        const containerRid = response.result._rid;\n        const clientEncryptionPolicy = response.result.clientEncryptionPolicy;\n        const partitionKeyPaths = response.result.partitionKey.paths;\n        const updatedEncryptionSetting =\n          await this.encryptionManager.encryptionSettingsCache.create(\n            key,\n            containerRid,\n            partitionKeyPaths,\n            clientEncryptionPolicy,\n          );\n        return updatedEncryptionSetting;\n      }, this.clientContext);\n    }\n    return encryptionSetting;\n  }\n\n  private async buildEncryptionAlgorithm(\n    propertySetting: EncryptionSettingForProperty,\n  ): Promise<AeadAes256CbcHmacSha256Algorithm> {\n    const key = `${this.database._rid}/${propertySetting.encryptionKeyId}`;\n    let clientEncryptionKeyProperties =\n      this.encryptionManager.clientEncryptionKeyPropertiesCache.get(key);\n    if (!clientEncryptionKeyProperties) {\n      clientEncryptionKeyProperties = await this.fetchClientEncryptionKey(\n        propertySetting.encryptionKeyId,\n      );\n    }\n    try {\n      // the buildEncryptionAlgorithm will build ProtectedDEK which calls unwrapKey  using the masterKey configured in\n      // KeyEncryptionKey(created before creating Protected DEK)\n      // we get wrapped key and key wrap metadata info from clientEncryptionKeyProperties.\n      return await propertySetting.buildEncryptionAlgorithm(\n        clientEncryptionKeyProperties,\n        this.encryptionManager,\n      );\n    } catch (err) {\n      if (err.statusCode !== StatusCodes.Forbidden) throw err;\n      // if access to key is revoked, and in case there's stale value in cache\n      clientEncryptionKeyProperties = await this.fetchClientEncryptionKey(\n        propertySetting.encryptionKeyId,\n      );\n\n      try {\n        // This will succeed after if client has rewrapped CEK and gateway cache has updated value.\n        return await propertySetting.buildEncryptionAlgorithm(\n          clientEncryptionKeyProperties,\n          this.encryptionManager,\n          true,\n        );\n      } catch (retryErr) {\n        if (retryErr.statusCode !== StatusCodes.Forbidden) throw retryErr;\n\n        // in case there's stale value in gateway cache. get fresh value from backend\n        clientEncryptionKeyProperties = await this.fetchClientEncryptionKey(\n          propertySetting.encryptionKeyId,\n          clientEncryptionKeyProperties.etag,\n        );\n        return propertySetting.buildEncryptionAlgorithm(\n          clientEncryptionKeyProperties,\n          this.encryptionManager,\n        );\n      }\n    }\n  }\n\n  private async fetchClientEncryptionKey(\n    cekId: string,\n    cekEtag?: string,\n  ): Promise<ClientEncryptionKeyProperties> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = `/dbs/${this.database.id}/clientencryptionkeys/${cekId}`;\n      const id = `dbs/${this.database.id}/clientencryptionkeys/${cekId}`;\n      const options: RequestOptions = {};\n      if (cekEtag) {\n        options.accessCondition = {\n          type: Constants.HttpHeaders.IfNoneMatch,\n          condition: cekEtag,\n        };\n      }\n      options.databaseRid = this.database._rid;\n      const response = await this.clientContext.read<ClientEncryptionKeyRequest>({\n        path: path,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: id,\n        options: options,\n        diagnosticNode,\n      });\n      if (!response) {\n        throw new ErrorResponse(`Failed to fetch client encryption key ${cekId}`);\n      }\n      if (response.code === StatusCodes.NotModified) {\n        throw new ErrorResponse(\n          `The Client Encryption Key with key id: ${cekId} on database: ${this.database.id} needs to be rewrapped with a valid Key Encryption Key using rewrapClientEncryptionKey. The Key Encryption Key used to wrap the Client Encryption Key has been revoked`,\n        );\n      }\n      const clientEncryptionKeyProperties: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n        etag: response.result._etag,\n      };\n      const key = this.database._rid + \"/\" + cekId;\n      this.encryptionManager.clientEncryptionKeyPropertiesCache.set(\n        key,\n        clientEncryptionKeyProperties,\n      );\n      return clientEncryptionKeyProperties;\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * This enum represents the type of number in the Cosmos DB SDK.\n */\nexport enum CosmosEncryptedNumberType {\n  /**\n   * Represents an integer number.\n   */\n  Integer = \"Integer\",\n  /**\n   * Represents a floating-point number.\n   */\n  Float = \"Float\",\n}\n\n/**\n * This interface represents an encrypted number in the Cosmos DB SDK.\n *\n * @example\n * ```ts\n * const encryptedNumber1: CosmosEncryptedNumber = {\n *   value: 4,\n *   numberType: CosmosEncryptedNumberType.Integer\n * };\n *\n * const encryptedNumber2: CosmosEncryptedNumber = {\n *   value: 4.1,\n *   numberType: CosmosEncryptedNumberType.Float\n * };\n *\n * const encryptedNumber3: CosmosEncryptedNumber = {\n *   value: 4,\n *   numberType: CosmosEncryptedNumberType.Float // represents 4.0\n * };\n * ```\n */\nexport interface CosmosEncryptedNumber {\n  /**\n   * The value to be encrypted.\n   */\n  value: number;\n  /**\n   * The type of number (Integer or Float).\n   * Use CosmosEncryptedNumberType.Integer for integers and CosmosEncryptedNumberType.Float for floating-point numbers.\n   */\n  numberType: CosmosEncryptedNumberType;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  SqlQuerySpec,\n  SqlParameter,\n  JSONArray,\n  JSONObject,\n  JSONValue,\n} from \"../queryExecutionContext\";\nimport { TypeMarker } from \"./enums/TypeMarker\";\nimport { CosmosEncryptedNumber, CosmosEncryptedNumberType } from \"./CosmosEncryptedNumber\";\n\nexport interface EncryptionSqlParameter extends SqlParameter {\n  type?: TypeMarker;\n  path: string;\n}\n\n/**\n * Represents a builder class for building encrypted parameters in parametrized query.\n */\nexport class EncryptionQueryBuilder {\n  private query: string;\n  private parameters?: EncryptionSqlParameter[];\n\n  constructor(query: string) {\n    this.query = query;\n    this.parameters = [];\n  }\n  /**\n   * Adds parameter to query\n   */\n  public addParameter(\n    name: string,\n    value: boolean | string | null | JSONArray | JSONObject | Date | CosmosEncryptedNumber,\n    path: string,\n  ): void {\n    if (value === null) {\n      this.parameters.push({ name: name, value: null, path: path });\n      return;\n    }\n    switch (true) {\n      case typeof value === \"boolean\":\n        this.parameters.push({\n          name,\n          value,\n          type: TypeMarker.Boolean,\n          path,\n        });\n        break;\n      case typeof value === \"string\":\n        this.parameters.push({\n          name,\n          value,\n          type: TypeMarker.String,\n          path,\n        });\n        break;\n      case value instanceof Date: {\n        const date = value.toISOString();\n        this.parameters.push({\n          name: name,\n          value: date,\n          type: TypeMarker.String,\n          path: path,\n        });\n        break;\n      }\n      case isCosmosEncryptedNumber(value): {\n        const num = value.value;\n        if (value.numberType === CosmosEncryptedNumberType.Integer) {\n          this.parameters.push({\n            name,\n            value: num,\n            type: TypeMarker.Long,\n            path,\n          });\n        } else if (value.numberType === CosmosEncryptedNumberType.Float) {\n          this.parameters.push({\n            name,\n            value: num,\n            type: TypeMarker.Double,\n            path,\n          });\n        }\n        break;\n      }\n      case Array.isArray(value):\n        this.parameters.push({ name, value, path });\n        break;\n      case typeof value === \"object\":\n        this.parameters.push({ name, value, path });\n        break;\n      default:\n        throw new Error(`Unsupported parameter type for parameter \"${name}\": ${typeof value}`);\n    }\n  }\n\n  /** Adds unencrypted parameter to query */\n  public addUnencryptedParameter(name: string, value: JSONValue, path: string): void {\n    this.parameters.push({ name: name, value: value, path: path });\n  }\n\n  /*\n   * @internal\n   */\n  public toEncryptionSqlQuerySpec(): SqlQuerySpec {\n    return {\n      query: this.query,\n      parameters: this.parameters,\n    };\n  }\n}\n\nfunction isCosmosEncryptedNumber(val: any): val is CosmosEncryptedNumber {\n  return (\n    val !== null &&\n    typeof val === \"object\" &&\n    typeof val.value === \"number\" &&\n    typeof val.numberType === \"string\" &&\n    (val.numberType === CosmosEncryptedNumberType.Integer ||\n      val.numberType === CosmosEncryptedNumberType.Float)\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport {\n  Constants,\n  createDocumentCollectionUri,\n  getIdFromLink,\n  getPathFromLink,\n  HTTPMethod,\n  isResourceValid,\n  ResourceType,\n  StatusCodes,\n  SubStatusCodes,\n} from \"../../common\";\nimport type { PartitionKey, PartitionKeyDefinition } from \"../../documents\";\nimport { convertToInternalPartitionKey } from \"../../documents\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport type { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions, Response } from \"../../request\";\nimport { ResourceResponse } from \"../../request\";\nimport type { PartitionedQueryExecutionInfo } from \"../../request/ErrorResponse\";\nimport { ErrorResponse } from \"../../request/ErrorResponse\";\nimport { Conflict, Conflicts } from \"../Conflict\";\nimport type { Database } from \"../Database\";\nimport { Item, Items } from \"../Item\";\nimport { Scripts } from \"../Script/Scripts\";\nimport type { ContainerDefinition } from \"./ContainerDefinition\";\nimport { ContainerResponse } from \"./ContainerResponse\";\nimport type { PartitionKeyRange } from \"./PartitionKeyRange\";\nimport type { OfferDefinition } from \"../Offer\";\nimport { Offer } from \"../Offer\";\nimport { OfferResponse } from \"../Offer/OfferResponse\";\nimport type { Resource } from \"../Resource\";\nimport type { FeedRange } from \"../ChangeFeed\";\nimport { FeedRangeInternal } from \"../ChangeFeed\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"../../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics\";\nimport type { EncryptionSettingForProperty } from \"../../encryption\";\nimport { EncryptionProcessor } from \"../../encryption\";\nimport type { EncryptionManager } from \"../../encryption/EncryptionManager\";\n\n/**\n * Operations for reading, replacing, or deleting a specific, existing container by id.\n *\n * @see {@link Containers} for creating new containers, and reading/querying all containers; use `.containers`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `container(id).read()` before every single `item.read()` call, to ensure the container exists;\n * do this once on application start up.\n */\nexport class Container {\n  private $items: Items;\n  /**\n   * Operations for creating new items, and reading/querying all items\n   *\n   * For reading, replacing, or deleting an existing item, use `.item(id)`.\n   *\n   * @example Create a new item\n   * ```typescript\n   * const {body: createdItem} = await container.items.create({id: \"<item id>\", properties: {}});\n   * ```\n   */\n  public get items(): Items {\n    if (!this.$items) {\n      this.$items = new Items(this, this.clientContext);\n    }\n    return this.$items;\n  }\n\n  private $scripts: Scripts;\n  /**\n   * All operations for Stored Procedures, Triggers, and User Defined Functions\n   */\n  public get scripts(): Scripts {\n    if (!this.$scripts) {\n      this.$scripts = new Scripts(this, this.clientContext);\n    }\n    return this.$scripts;\n  }\n\n  private $conflicts: Conflicts;\n  /**\n   * Operations for reading and querying conflicts for the given container.\n   *\n   * For reading or deleting a specific conflict, use `.conflict(id)`.\n   */\n  public get conflicts(): Conflicts {\n    if (!this.$conflicts) {\n      this.$conflicts = new Conflicts(this, this.clientContext);\n    }\n    return this.$conflicts;\n  }\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDocumentCollectionUri(this.database.id, this.id);\n  }\n  /**\n   * @internal\n   */\n  public encryptionProcessor: EncryptionProcessor;\n\n  /**\n   * @internal\n   */\n  public _rid: string;\n\n  private isEncryptionInitialized: boolean = false;\n  private encryptionInitializationPromise: Promise<void>;\n\n  /**\n   * Returns a container instance. Note: You should get this from `database.container(id)`, rather than creating your own object.\n   * @param database - The parent {@link Database}.\n   * @param id - The id of the given container.\n   * @hidden\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n    private encryptionManager?: EncryptionManager,\n    _rid?: string,\n  ) {\n    this._rid = _rid;\n    if (this.clientContext.enableEncryption) {\n      this.encryptionProcessor = new EncryptionProcessor(\n        this.id,\n        this._rid,\n        this.database,\n        this.clientContext,\n        this.encryptionManager,\n      );\n    }\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Item} by id.\n   *\n   * Use `.items` for creating new items, or querying/reading all items.\n   *\n   * @param id - The id of the {@link Item}.\n   * @param partitionKeyValue - The value of the {@link Item} partition key\n   * @example Replace an item\n   * `const {body: replacedItem} = await container.item(\"<item id>\", \"<partition key value>\").replace({id: \"<item id>\", title: \"Updated post\", authorID: 5});`\n   */\n  public item(id: string, partitionKeyValue?: PartitionKey): Item {\n    return new Item(this, id, this.clientContext, partitionKeyValue);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Conflict} by id.\n   *\n   * Use `.conflicts` for creating new conflicts, or querying/reading all conflicts.\n   * @param id - The id of the {@link Conflict}.\n   */\n  public conflict(id: string, partitionKey?: PartitionKey): Conflict {\n    return new Conflict(this, id, this.clientContext, partitionKey);\n  }\n\n  /** Read the container's definition */\n  public async read(options?: RequestOptions): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async readInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions,\n  ): Promise<ContainerResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<ContainerDefinition>({\n      path,\n      resourceType: ResourceType.container,\n      resourceId: id,\n      options,\n      diagnosticNode,\n    });\n    this.clientContext.partitionKeyDefinitionCache[this.url] = response.result.partitionKey;\n    return new ContainerResponse(\n      response.result,\n      response.headers,\n      response.code,\n      this,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /** Replace the container's definition */\n  public async replace(\n    body: ContainerDefinition,\n    options?: RequestOptions,\n  ): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<ContainerDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.container,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new ContainerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /** Delete the container */\n  public async delete(options?: RequestOptions): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<ContainerDefinition>({\n        path,\n        resourceType: ResourceType.container,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new ContainerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the partition key definition first by looking into the cache otherwise by reading the collection.\n   * @deprecated This method has been renamed to readPartitionKeyDefinition.\n   */\n  public async getPartitionKeyDefinition(): Promise<ResourceResponse<PartitionKeyDefinition>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readPartitionKeyDefinition(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the partition key definition first by looking into the cache otherwise by reading the collection.\n   * @hidden\n   */\n  public async readPartitionKeyDefinition(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ResourceResponse<PartitionKeyDefinition>> {\n    // $ISSUE-felixfan-2016-03-17: Make name based path and link based path use the same key\n    // $ISSUE-felixfan-2016-03-17: Refresh partitionKeyDefinitionCache when necessary\n    if (this.url in this.clientContext.partitionKeyDefinitionCache) {\n      diagnosticNode.addData({ readFromCache: true });\n      return new ResourceResponse<PartitionKeyDefinition>(\n        this.clientContext.partitionKeyDefinitionCache[this.url],\n        {},\n        0,\n        getEmptyCosmosDiagnostics(),\n      );\n    }\n\n    const { headers, statusCode, diagnostics } = await withMetadataDiagnostics(\n      async (node: DiagnosticNodeInternal) => {\n        return this.readInternal(node);\n      },\n      diagnosticNode,\n      MetadataLookUpType.ContainerLookUp,\n    );\n\n    return new ResourceResponse<PartitionKeyDefinition>(\n      this.clientContext.partitionKeyDefinitionCache[this.url],\n      headers,\n      statusCode,\n      diagnostics,\n    );\n  }\n\n  /**\n   * Gets offer on container. If none exists, returns an OfferResponse with undefined.\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resource: container } = await this.read();\n      const path = \"/offers\";\n      const url = container._self;\n\n      const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: (result) => result.Offers,\n        options,\n        diagnosticNode,\n      });\n      const offer = response.result[0]\n        ? new Offer(this.database.client, response.result[0].id, this.clientContext)\n        : undefined;\n      return new OfferResponse(\n        response.result[0],\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        offer,\n      );\n    }, this.clientContext);\n  }\n\n  public async getQueryPlan(\n    query: string | SqlQuerySpec,\n  ): Promise<Response<PartitionedQueryExecutionInfo>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n\n      return this.clientContext.getQueryPlan(\n        path + \"/docs\",\n        ResourceType.item,\n        getIdFromLink(this.url),\n        query,\n        {},\n        diagnosticNode,\n      );\n    }, this.clientContext);\n  }\n\n  public readPartitionKeyRanges(feedOptions?: FeedOptions): QueryIterator<PartitionKeyRange> {\n    feedOptions = feedOptions || {};\n    return this.clientContext.queryPartitionKeyRanges(this.url, undefined, feedOptions);\n  }\n  /**\n   *\n   * @returns all the feed ranges for which changefeed could be fetched.\n   */\n  public async getFeedRanges(): Promise<ReadonlyArray<FeedRange>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resources } = await this.readPartitionKeyRanges().fetchAllInternal(diagnosticNode);\n\n      const feedRanges: FeedRange[] = [];\n      for (const resource of resources) {\n        const feedRange = new FeedRangeInternal(resource.minInclusive, resource.maxExclusive);\n        Object.freeze(feedRange);\n        feedRanges.push(feedRange);\n      }\n      return feedRanges;\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete all documents belong to the container for the provided partition key value\n   * @param partitionKey - The partition key value of the items to be deleted\n   */\n  public async deleteAllItemsForPartitionKey(\n    partitionKey: PartitionKey,\n    options?: RequestOptions,\n  ): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      let path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      path = path + \"/operations/partitionkeydelete\";\n      if (this.clientContext.enableEncryption) {\n        await this.checkAndInitializeEncryption();\n        options = options || {};\n        options.containerRid = this._rid;\n        diagnosticNode.beginEncryptionDiagnostics(Constants.Encryption.DiagnosticsEncryptOperation);\n        const partitionKeyInternal = convertToInternalPartitionKey(partitionKey);\n        const { partitionKeyList, encryptedCount } =\n          await this.encryptionProcessor.getEncryptedPartitionKeyValue(partitionKeyInternal);\n        partitionKey = partitionKeyList;\n        diagnosticNode.endEncryptionDiagnostics(\n          Constants.Encryption.DiagnosticsEncryptOperation,\n          encryptedCount,\n        );\n      }\n      let response: Response<any>;\n      try {\n        response = await this.clientContext.delete<ContainerDefinition>({\n          path,\n          resourceType: ResourceType.container,\n          resourceId: id,\n          options,\n          partitionKey: partitionKey,\n          method: HTTPMethod.post,\n          diagnosticNode,\n        });\n      } catch (error) {\n        if (this.clientContext.enableEncryption) {\n          await this.throwIfRequestNeedsARetryPostPolicyRefresh(error);\n        }\n        throw error;\n      }\n\n      return new ContainerResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n  /**\n   * Warms up encryption related caches for the container.\n   */\n  public async initializeEncryption(): Promise<void> {\n    if (!this.clientContext.enableEncryption) {\n      throw new ErrorResponse(\"Encryption is not enabled for the client.\");\n    } else {\n      await withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n        const readResponse = await this.readInternal(diagnosticNode);\n        if (!readResponse || !readResponse.resource) {\n          throw new ErrorResponse(\n            \"Failed to initialize encryption: The container's resource definition could not be retrieved.\",\n          );\n        }\n        this._rid = readResponse.resource._rid;\n        this.encryptionProcessor.containerRid = this._rid;\n        const clientEncryptionPolicy = readResponse.resource.clientEncryptionPolicy;\n        if (!clientEncryptionPolicy) return;\n        const partitionKeyPaths = readResponse.resource.partitionKey.paths;\n        const databaseResponse = await this.database.readInternal(diagnosticNode);\n        if (!databaseResponse || !databaseResponse.resource) {\n          throw new ErrorResponse(\n            \"Failed to initialize encryption: The database's resource definition could not be retrieved.\",\n          );\n        }\n        this.database._rid = databaseResponse.resource._rid;\n        const encryptionSettingKey = this.database._rid + \"/\" + this._rid;\n\n        await this.encryptionManager.encryptionSettingsCache.create(\n          encryptionSettingKey,\n          this._rid,\n          partitionKeyPaths,\n          clientEncryptionPolicy,\n        );\n        const clientEncryptionKeyIds = [\n          ...new Set(\n            clientEncryptionPolicy.includedPaths.map((item) => item.clientEncryptionKeyId),\n          ),\n        ];\n        // fetch and set clientEncryptionKeys in the cache\n        for (const clientEncryptionKeyId of clientEncryptionKeyIds) {\n          const res = await this.database.readClientEncryptionKey(clientEncryptionKeyId);\n          if (!res || !res.clientEncryptionKeyProperties) {\n            throw new ErrorResponse(\n              `Failed to initialize encryption: The client encryption key ${clientEncryptionKeyId} could not be retrieved.`,\n            );\n          }\n          const encryptionKeyProperties = res.clientEncryptionKeyProperties;\n          const key = this.database._rid + \"/\" + clientEncryptionKeyId;\n\n          this.encryptionManager.clientEncryptionKeyPropertiesCache.set(\n            key,\n            encryptionKeyProperties,\n          );\n        }\n        this.isEncryptionInitialized = true;\n      }, this.clientContext);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async checkAndInitializeEncryption(): Promise<void> {\n    if (!this.isEncryptionInitialized) {\n      if (!this.encryptionInitializationPromise) {\n        this.encryptionInitializationPromise = this.initializeEncryption();\n      }\n      await this.encryptionInitializationPromise;\n    }\n  }\n\n  /**\n   * @internal\n   * This function handles the scenario where a container is deleted(say from different Client) and recreated with same Id but with different client encryption policy.\n   * The idea is to have the container Rid cached and sent out as part of RequestOptions with Container Rid set in \"x-ms-cosmos-intended-collection-rid\" header.\n   * So, when the container being referenced here gets recreated we would end up with a stale encryption settings and container Rid and this would result in BadRequest (and a substatus 1024).\n   * This would allow us to refresh the encryption settings and Container Rid, on the premise that the container recreated could possibly be configured with a new encryption policy.\n   */\n  async throwIfRequestNeedsARetryPostPolicyRefresh(errorResponse: ErrorResponse): Promise<void> {\n    const key = this.database._rid + \"/\" + this._rid;\n    const encryptionSetting = this.encryptionManager.encryptionSettingsCache.get(key);\n    if (!errorResponse?.code || !errorResponse?.headers?.[Constants.HttpHeaders.SubStatus]) {\n      return;\n    }\n    const subStatusCode = errorResponse.headers[Constants.HttpHeaders.SubStatus];\n    const isPartitionKeyMismatch = Number(subStatusCode) === SubStatusCodes.PartitionKeyMismatch;\n    const isIncorrectContainerRidSubstatus =\n      Number(subStatusCode) === SubStatusCodes.IncorrectContainerRidSubstatus;\n    if (\n      errorResponse.code === StatusCodes.BadRequest &&\n      (isPartitionKeyMismatch || isIncorrectContainerRidSubstatus)\n    ) {\n      // This code verifies if the partitionKeyPaths are encrypted.\n      // If the paths are not encrypted, it indicates that the application passed an incorrect partition key in the request.\n      // This ensures the issue is not caused by a mismatched encrypted value due to a policy error,\n      // avoiding unnecessary force-refreshing of encryption settings.\n      if (isPartitionKeyMismatch && encryptionSetting.partitionKeyPaths.length) {\n        let encryptionSettingsForProperty: EncryptionSettingForProperty = null;\n        for (const path of encryptionSetting.partitionKeyPaths) {\n          const partitionKeyPath = path.split(\"/\")[1];\n          encryptionSettingsForProperty =\n            encryptionSetting.getEncryptionSettingForProperty(partitionKeyPath);\n          if (encryptionSettingsForProperty) {\n            break;\n          }\n        }\n        // wrong partition key passed as partition key is not encrypted.\n        if (encryptionSettingsForProperty == null) {\n          return;\n        }\n      }\n\n      const currentContainerRid = encryptionSetting.containerRid;\n      const forceRefresh = true;\n      // fetch rid of newly created container\n      const updatedContainerRid = (\n        await this.encryptionProcessor.getEncryptionSetting(forceRefresh)\n      ).containerRid;\n      // if the container was not recreated, so policy has not changed, just return the original response\n      if (currentContainerRid === updatedContainerRid) {\n        return;\n      }\n      await this.initializeEncryption();\n      throw new ErrorResponse(\n        \"Operation has failed due to a possible mismatch in Client Encryption Policy configured on the container. Retrying may fix the issue. Please refer to https://aka.ms/CosmosClientEncryption for more details.\" +\n          errorResponse.message,\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ContainerRequest } from \"../client/Container/ContainerRequest\";\n\nexport function validateOffer(body: ContainerRequest): void {\n  if (body.throughput) {\n    if (body.maxThroughput) {\n      console.log(\"should be erroring\");\n      throw new Error(\"Cannot specify `throughput` with `maxThroughput`\");\n    }\n    if (body.autoUpgradePolicy) {\n      throw new Error(\n        \"Cannot specify autoUpgradePolicy with throughput. Use `maxThroughput` instead\",\n      );\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport {\n  Constants,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n  StatusCodes,\n  validateClientEncryptionPolicy,\n} from \"../../common\";\nimport { DEFAULT_PARTITION_KEY_PATH } from \"../../common/partitionKeys\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { mergeHeaders } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Database } from \"../Database\";\nimport type { Resource } from \"../Resource\";\nimport { Container } from \"./Container\";\nimport type { ContainerDefinition } from \"./ContainerDefinition\";\nimport type { ContainerRequest } from \"./ContainerRequest\";\nimport { ContainerResponse } from \"./ContainerResponse\";\nimport { validateOffer } from \"../../utils/offers\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport type { EncryptionManager } from \"../../encryption/EncryptionManager\";\n\n/**\n * Operations for creating new containers, and reading/querying all containers\n *\n * @see {@link Container} for reading, replacing, or deleting an existing container; use `.container(id)`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `containers.readAll()` before every single `item.read()` call, to ensure the container exists;\n * do this once on application start up.\n */\nexport class Containers {\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    private readonly clientContext: ClientContext,\n    private encryptionManager?: EncryptionManager,\n  ) {}\n\n  /**\n   * Queries all containers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return specific containers in an array or iterate over them one at a time.\n   * @example Read all containers to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @container\",\n   *   parameters: [\n   *     {name: \"@container\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: containerList} = await client.database(\"<db id>\").containers.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all containers.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return specific containers in an array or iterate over them one at a time.\n   * @example Read all containers to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @container\",\n   *   parameters: [\n   *     {name: \"@container\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: containerList} = await client.database(\"<db id>\").containers.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.container);\n    const id = getIdFromLink(this.database.url);\n\n    return new QueryIterator(\n      this.clientContext,\n      query,\n      options,\n      (diagNode: DiagnosticNodeInternal, innerOptions) => {\n        return this.clientContext.queryFeed<ContainerDefinition>({\n          path,\n          resourceType: ResourceType.container,\n          resourceId: id,\n          resultFn: (result) => result.DocumentCollections,\n          query,\n          options: innerOptions,\n          diagnosticNode: diagNode,\n        });\n      },\n    );\n  }\n\n  /**\n   * Creates a container.\n   *\n   * A container is a named logical container for items.\n   *\n   * A database may contain zero or more named containers and each container consists of\n   * zero or more JSON items.\n   *\n   * Being schema-free, the items in a container do not need to share the same structure or fields.\n   *\n   *\n   * Since containers are application resources, they can be authorized using either the\n   * master key or resource keys.\n   *\n   * @param body - Represents the body of the container.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public async create(\n    body: ContainerRequest,\n    options: RequestOptions = {},\n  ): Promise<ContainerResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.createInternal(diagnosticNode, body, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async createInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    body: ContainerRequest,\n    options: RequestOptions = {},\n  ): Promise<ContainerResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n    const path = getPathFromLink(this.database.url, ResourceType.container);\n    const id = getIdFromLink(this.database.url);\n\n    validateOffer(body);\n\n    if (body.maxThroughput) {\n      const autoscaleParams: {\n        maxThroughput: number;\n        autoUpgradePolicy?: {\n          throughputPolicy: {\n            incrementPercent: number;\n          };\n        };\n      } = {\n        maxThroughput: body.maxThroughput,\n      };\n      if (body.autoUpgradePolicy) {\n        autoscaleParams.autoUpgradePolicy = body.autoUpgradePolicy;\n      }\n      const autoscaleHeader = JSON.stringify(autoscaleParams);\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.AutoscaleSettings]: autoscaleHeader,\n      });\n      delete body.maxThroughput;\n      delete body.autoUpgradePolicy;\n    }\n\n    if (body.throughput) {\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.OfferThroughput]: body.throughput,\n      });\n      delete body.throughput;\n    }\n\n    if (typeof body.partitionKey === \"string\") {\n      if (!body.partitionKey.startsWith(\"/\")) {\n        throw new Error(\"Partition key must start with '/'\");\n      }\n      body.partitionKey = {\n        paths: [body.partitionKey],\n      };\n    }\n\n    // If they don't specify a partition key, use the default path\n    if (!body.partitionKey || !body.partitionKey.paths) {\n      body.partitionKey = {\n        paths: [DEFAULT_PARTITION_KEY_PATH],\n      };\n    }\n\n    if (this.clientContext.enableEncryption && body.clientEncryptionPolicy) {\n      body.clientEncryptionPolicy.policyFormatVersion =\n        body.clientEncryptionPolicy.policyFormatVersion ?? 1;\n      validateClientEncryptionPolicy(body.clientEncryptionPolicy, body.partitionKey);\n    }\n\n    const response = await this.clientContext.create<ContainerRequest, ContainerDefinition>({\n      body,\n      path,\n      resourceType: ResourceType.container,\n      resourceId: id,\n      diagnosticNode,\n      options,\n    });\n    const ref = new Container(\n      this.database,\n      response.result.id,\n      this.clientContext,\n      this.encryptionManager,\n      response.result._rid,\n    );\n    return new ContainerResponse(\n      response.result,\n      response.headers,\n      response.code,\n      ref,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /**\n   * Checks if a Container exists, and, if it doesn't, creates it.\n   * This will make a read operation based on the id in the `body`, then if it is not found, a create operation.\n   * You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.)\n   *\n   * A container is a named logical container for items.\n   *\n   * A database may contain zero or more named containers and each container consists of\n   * zero or more JSON items.\n   *\n   * Being schema-free, the items in a container do not need to share the same structure or fields.\n   *\n   *\n   * Since containers are application resources, they can be authorized using either the\n   * master key or resource keys.\n   *\n   * @param body - Represents the body of the container.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public async createIfNotExists(\n    body: ContainerRequest,\n    options?: RequestOptions,\n  ): Promise<ContainerResponse> {\n    if (!body || body.id === null || body.id === undefined) {\n      throw new Error(\"body parameter must be an object with an id property\");\n    }\n    /*\n      1. Attempt to read the Container (based on an assumption that most containers will already exist, so its faster)\n      2. If it fails with NotFound error, attempt to create the container. Else, return the read results.\n    */\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      try {\n        const readResponse = await this.database\n          .container(body.id)\n          .readInternal(diagnosticNode, options);\n        return readResponse;\n      } catch (err: any) {\n        if (err.code === StatusCodes.NotFound) {\n          const createResponse = await this.createInternal(diagnosticNode, body, options);\n          // Must merge the headers to capture RU costskaty\n          mergeHeaders(createResponse.headers, err.headers);\n          return createResponse;\n        } else {\n          throw err;\n        }\n      }\n    }, this.clientContext);\n  }\n\n  /**\n   * Read all containers.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all containers in an array or iterate over them one at a time.\n   * @example Read all containers to array.\n   * ```typescript\n   * const {body: containerList} = await client.database(\"<db id>\").containers.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<ContainerDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { Permission } from \"./Permission\";\nimport type { PermissionBody } from \"./PermissionBody\";\nimport type { PermissionDefinition } from \"./PermissionDefinition\";\n\nexport class PermissionResponse extends ResourceResponse<\n  PermissionDefinition & PermissionBody & Resource\n> {\n  constructor(\n    resource: PermissionDefinition & PermissionBody & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    permission: Permission,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.permission = permission;\n  }\n  /** A reference to the {@link Permission} corresponding to the returned {@link PermissionDefinition}. */\n  public readonly permission: Permission;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createPermissionUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request/RequestOptions\";\nimport type { User } from \"../User\";\nimport type { PermissionBody } from \"./PermissionBody\";\nimport type { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to read, replace, or delete a given {@link Permission} by id.\n *\n * @see {@link Permissions} to create, upsert, query, or read all Permissions.\n */\nexport class Permission {\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createPermissionUri(this.user.database.id, this.user.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   * @param id - The id of the given {@link Permission}.\n   */\n  constructor(\n    public readonly user: User,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Read the {@link PermissionDefinition} of the given {@link Permission}.\n   */\n  public async read(options?: RequestOptions): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.read<PermissionDefinition & PermissionBody>({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link Permission} with the specified {@link PermissionDefinition}.\n   * @param body - The specified {@link PermissionDefinition}.\n   */\n  public async replace(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.replace<PermissionDefinition & PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link Permission}.\n   */\n  public async delete(options?: RequestOptions): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.delete<PermissionDefinition & PermissionBody>({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { User } from \"../User\";\nimport { Permission } from \"./Permission\";\nimport type { PermissionBody } from \"./PermissionBody\";\nimport type { PermissionDefinition } from \"./PermissionDefinition\";\nimport { PermissionResponse } from \"./PermissionResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Use to create, replace, query, and read all Permissions.\n *\n * @see {@link Permission} to read, replace, or delete a specific permission by id.\n */\nexport class Permissions {\n  /**\n   * @hidden\n   * @param user - The parent {@link User}.\n   */\n  constructor(\n    public readonly user: User,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all permissions.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.user.url, ResourceType.permission);\n    const id = getIdFromLink(this.user.url);\n\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        resultFn: (result) => result.Permissions,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all permissions.\n   * @example Read all permissions to array.\n   * ```typescript\n   * const {body: permissionList} = await user.permissions.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<PermissionDefinition & Resource> {\n    return this.query(undefined, options);\n  }\n\n  /**\n   * Create a permission.\n   *\n   * A permission represents a per-User Permission to access a specific resource\n   * e.g. Item or Container.\n   * @param body - Represents the body of the permission.\n   */\n  public async create(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.create<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        diagnosticNode,\n        options,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a permission.\n   *\n   * A permission represents a per-User Permission to access a\n   * specific resource e.g. Item or Container.\n   */\n  public async upsert(\n    body: PermissionDefinition,\n    options?: RequestOptions,\n  ): Promise<PermissionResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.user.url, ResourceType.permission);\n      const id = getIdFromLink(this.user.url);\n\n      const response = await this.clientContext.upsert<PermissionDefinition, PermissionBody>({\n        body,\n        path,\n        resourceType: ResourceType.permission,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new Permission(this.user, response.result.id, this.clientContext);\n      return new PermissionResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport type { User } from \"./User\";\nimport type { UserDefinition } from \"./UserDefinition\";\n\nexport class UserResponse extends ResourceResponse<UserDefinition & Resource> {\n  constructor(\n    resource: UserDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    user: User,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.user = user;\n  }\n  /** A reference to the {@link User} corresponding to the returned {@link UserDefinition}. */\n  public readonly user: User;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  createUserUri,\n  getIdFromLink,\n  getPathFromLink,\n  isResourceValid,\n  ResourceType,\n} from \"../../common\";\nimport type { RequestOptions } from \"../../request\";\nimport type { Database } from \"../Database\";\nimport { Permission, Permissions } from \"../Permission\";\nimport type { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to read, replace, and delete Users.\n *\n * Additionally, you can access the permissions for a given user via `user.permission` and `user.permissions`.\n *\n * @see {@link Users} to create, upsert, query, or read all.\n */\nexport class User {\n  /**\n   * Operations for creating, upserting, querying, or reading all operations.\n   *\n   * See `client.permission(id)` to read, replace, or delete a specific Permission by id.\n   */\n  public readonly permissions: Permissions;\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createUserUri(this.database.id, this.id);\n  }\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    public readonly id: string,\n    private readonly clientContext: ClientContext,\n  ) {\n    this.permissions = new Permissions(this, this.clientContext);\n  }\n\n  /**\n   * Operations to read, replace, or delete a specific Permission by id.\n   *\n   * See `client.permissions` for creating, upserting, querying, or reading all operations.\n   */\n  public permission(id: string): Permission {\n    return new Permission(this, id, this.clientContext);\n  }\n\n  /**\n   * Read the {@link UserDefinition} for the given {@link User}.\n   */\n  public async read(options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n      const response = await this.clientContext.read<UserDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Replace the given {@link User}'s definition with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition} to replace the definition.\n   */\n  public async replace(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.replace<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Delete the given {@link User}.\n   */\n  public async delete(options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<UserDefinition>({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getIdFromLink, getPathFromLink, isResourceValid, ResourceType } from \"../../common\";\nimport type { SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Database } from \"../Database\";\nimport type { Resource } from \"../Resource\";\nimport { User } from \"./User\";\nimport type { UserDefinition } from \"./UserDefinition\";\nimport { UserResponse } from \"./UserResponse\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n\n/**\n * Used to create, upsert, query, and read all users.\n *\n * @see {@link User} to read, replace, or delete a specific User by id.\n */\nexport class Users {\n  /**\n   * @hidden\n   * @param database - The parent {@link Database}.\n   */\n  constructor(\n    public readonly database: Database,\n    private readonly clientContext: ClientContext,\n  ) {}\n\n  /**\n   * Query all users.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Query all users.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   */\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const path = getPathFromLink(this.database.url, ResourceType.user);\n    const id = getIdFromLink(this.database.url);\n    return new QueryIterator(this.clientContext, query, options, (diagnosticNode, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        resultFn: (result) => result.Users,\n        query,\n        options: innerOptions,\n        diagnosticNode,\n      });\n    });\n  }\n\n  /**\n   * Read all users.-\n   * @example Read all users to array.\n   * ```typescript\n   * const {body: usersList} = await database.users.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<UserDefinition & Resource> {\n    return this.query<UserDefinition & Resource>(undefined, options);\n  }\n\n  /**\n   * Create a database user with the specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  public async create(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n      const response = await this.clientContext.create<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Upsert a database user with a specified {@link UserDefinition}.\n   * @param body - The specified {@link UserDefinition}.\n   */\n  public async upsert(body: UserDefinition, options?: RequestOptions): Promise<UserResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const err = {};\n      if (!isResourceValid(body, err)) {\n        throw err;\n      }\n\n      const path = getPathFromLink(this.database.url, ResourceType.user);\n      const id = getIdFromLink(this.database.url);\n\n      const response = await this.clientContext.upsert<UserDefinition>({\n        body,\n        path,\n        resourceType: ResourceType.user,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      const ref = new User(this.database, response.result.id, this.clientContext);\n      return new UserResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { CosmosDiagnostics } from \"../../CosmosDiagnostics\";\nimport type { CosmosHeaders } from \"../../queryExecutionContext\";\nimport { ResourceResponse } from \"../../request/ResourceResponse\";\nimport type { Resource } from \"../Resource\";\nimport type { Database } from \"./Database\";\nimport type { DatabaseDefinition } from \"./DatabaseDefinition\";\n\n/** Response object for Database operations */\nexport class DatabaseResponse extends ResourceResponse<DatabaseDefinition & Resource> {\n  constructor(\n    resource: DatabaseDefinition & Resource,\n    headers: CosmosHeaders,\n    statusCode: number,\n    database: Database,\n    diagnostics: CosmosDiagnostics,\n  ) {\n    super(resource, headers, statusCode, diagnostics);\n    this.database = database;\n  }\n  /** A reference to the {@link Database} that the returned {@link DatabaseDefinition} corresponds to. */\n  public readonly database: Database;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { createDatabaseUri, getIdFromLink, getPathFromLink, ResourceType } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport { ErrorResponse, type RequestOptions } from \"../../request\";\nimport { Container, Containers } from \"../Container\";\nimport { User, Users } from \"../User\";\nimport type { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport type { OfferDefinition } from \"../Offer\";\nimport { OfferResponse, Offer } from \"../Offer\";\nimport type { Resource } from \"../Resource\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport {\n  getEmptyCosmosDiagnostics,\n  withDiagnostics,\n  withMetadataDiagnostics,\n} from \"../../utils/diagnostics\";\nimport { MetadataLookUpType } from \"../../CosmosDiagnostics\";\nimport type {\n  ClientEncryptionKeyRequest,\n  KeyEncryptionKey,\n  EncryptionKeyWrapMetadata,\n} from \"../../encryption\";\nimport {\n  ClientEncryptionKeyResponse,\n  ClientEncryptionKeyProperties,\n  EncryptionAlgorithm,\n  KeyEncryptionAlgorithm,\n} from \"../../encryption\";\nimport type { EncryptionManager } from \"../../encryption/EncryptionManager\";\n/**\n * Operations for reading or deleting an existing database.\n *\n * @see {@link Databases} for creating new databases, and reading/querying all databases; use `client.databases`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `database.read()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Database {\n  /**\n   * Used for creating new containers, or querying/reading all containers.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * @example Create a new container\n   * ```typescript\n   * const {body: containerDefinition, container} = await client.database(\"<db id>\").containers.create({id: \"<container id>\"});\n   * ```\n   */\n  public readonly containers: Containers;\n  /**\n   * Used for creating new users, or querying/reading all users.\n   *\n   * Use `.user(id)` to read, replace, or delete a specific, existing {@link User} by id.\n   */\n  public readonly users: Users;\n\n  /**\n   * Returns a reference URL to the resource. Used for linking in Permissions.\n   */\n  public get url(): string {\n    return createDatabaseUri(this.id);\n  }\n\n  /**\n   * @internal\n   */\n  public _rid: string;\n\n  /** Returns a new {@link Database} instance.\n   *\n   * Note: the intention is to get this object from {@link CosmosClient} via `client.database(id)`, not to instantiate it yourself.\n   * @hidden\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    public readonly id: string,\n    private clientContext: ClientContext,\n    private encryptionManager?: EncryptionManager,\n    _rid?: string,\n  ) {\n    this.containers = new Containers(this, this.clientContext, this.encryptionManager);\n    this.users = new Users(this, this.clientContext);\n    this._rid = _rid;\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link Database} by id.\n   *\n   * Use `.containers` creating new containers, or querying/reading all containers.\n   *\n   * @example Delete a container\n   * ```typescript\n   * await client.database(\"<db id>\").container(\"<container id>\").delete();\n   * ```\n   */\n  public container(id: string): Container {\n    return new Container(this, id, this.clientContext, this.encryptionManager);\n  }\n\n  /**\n   * Used to read, replace, or delete a specific, existing {@link User} by id.\n   *\n   * Use `.users` for creating new users, or querying/reading all users.\n   */\n  public user(id: string): User {\n    return new User(this, id, this.clientContext);\n  }\n\n  /** Read the definition of the given Database. */\n  public async read(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.readInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async readInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions,\n  ): Promise<DatabaseResponse> {\n    const path = getPathFromLink(this.url);\n    const id = getIdFromLink(this.url);\n    const response = await this.clientContext.read<DatabaseDefinition>({\n      path,\n      resourceType: ResourceType.database,\n      resourceId: id,\n      options,\n      diagnosticNode,\n    });\n    return new DatabaseResponse(\n      response.result,\n      response.headers,\n      response.code,\n      this,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /** Delete the given Database. */\n  public async delete(options?: RequestOptions): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url);\n      const id = getIdFromLink(this.url);\n\n      const response = await this.clientContext.delete<DatabaseDefinition>({\n        path,\n        resourceType: ResourceType.database,\n        resourceId: id,\n        options,\n        diagnosticNode,\n      });\n      return new DatabaseResponse(\n        response.result,\n        response.headers,\n        response.code,\n        this,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets offer on database. If none exists, returns an OfferResponse with undefined.\n   */\n  public async readOffer(options: RequestOptions = {}): Promise<OfferResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const { resource: record } = await withMetadataDiagnostics(\n        async (node: DiagnosticNodeInternal) => {\n          return this.readInternal(node);\n        },\n        diagnosticNode,\n        MetadataLookUpType.DatabaseLookUp,\n      );\n\n      const path = \"/offers\";\n      const url = record._self;\n\n      const response = await this.clientContext.queryFeed<OfferDefinition & Resource[]>({\n        path,\n        resourceId: \"\",\n        resourceType: ResourceType.offer,\n        query: `SELECT * from root where root.resource = \"${url}\"`,\n        resultFn: (result) => result.Offers,\n        options,\n        diagnosticNode,\n      });\n      const offer = response.result[0]\n        ? new Offer(this.client, response.result[0].id, this.clientContext)\n        : undefined;\n      return new OfferResponse(\n        response.result[0],\n        response.headers,\n        response.code,\n        getEmptyCosmosDiagnostics(),\n        offer,\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Create Encryption key for database account\n   */\n  public async createClientEncryptionKey(\n    clientEncryptionKeyId: string,\n    encryptionAlgorithm: EncryptionAlgorithm,\n    keyWrapMetadata: EncryptionKeyWrapMetadata,\n  ): Promise<ClientEncryptionKeyResponse> {\n    if (clientEncryptionKeyId == null || !clientEncryptionKeyId.trim()) {\n      throw new Error(\"encryption key id cannot be null or empty\");\n    }\n    if (encryptionAlgorithm !== EncryptionAlgorithm.AEAD_AES_256_CBC_HMAC_SHA256) {\n      throw new Error(`Invalid encryption algorithm '${encryptionAlgorithm}' passed.`);\n    }\n    if (!keyWrapMetadata) {\n      throw new Error(\"encryptionKeyWrapMetadata cannot be null.\");\n    }\n    if (keyWrapMetadata.algorithm !== KeyEncryptionAlgorithm.RSA_OAEP) {\n      throw new Error(`Invalid key wrap algorithm '${keyWrapMetadata.algorithm}' passed.`);\n    }\n    if (!this.clientContext.enableEncryption) {\n      throw new Error(\n        \"Creating a client encryption key requires the use of an encryption-enabled client.\",\n      );\n    }\n\n    const keyEncryptionKey: KeyEncryptionKey =\n      this.encryptionManager.keyEncryptionKeyCache.getOrCreate(\n        keyWrapMetadata.name,\n        keyWrapMetadata.value,\n        this.encryptionManager.encryptionKeyStoreProvider,\n      );\n\n    const protectedDataEncryptionKey =\n      await this.encryptionManager.protectedDataEncryptionKeyCache.getOrCreate(\n        clientEncryptionKeyId,\n        keyEncryptionKey,\n      );\n\n    const wrappedDataEncryptionKey = protectedDataEncryptionKey.encryptedValue;\n\n    const body: ClientEncryptionKeyRequest = {\n      id: clientEncryptionKeyId,\n      encryptionAlgorithm: encryptionAlgorithm,\n      keyWrapMetadata: keyWrapMetadata,\n      wrappedDataEncryptionKey: wrappedDataEncryptionKey.toString(\"base64\"),\n    };\n\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.clientencryptionkey);\n      const databaseId = getIdFromLink(this.url);\n      const response = await this.clientContext.create<ClientEncryptionKeyRequest>({\n        body,\n        path: path,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: databaseId,\n        diagnosticNode,\n      });\n      const ref: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        etag: response.result._etag,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n      };\n      return new ClientEncryptionKeyResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n\n  /**\n   * Read Encryption key for database account\n   */\n  public async readClientEncryptionKey(\n    clientEncryptionKeyId: string,\n  ): Promise<ClientEncryptionKeyResponse> {\n    if (clientEncryptionKeyId == null || !clientEncryptionKeyId.trim()) {\n      throw new ErrorResponse(\"encryption key id cannot be null or empty\");\n    }\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (!this._rid) {\n        const databaseResponse = await this.readInternal(diagnosticNode);\n        if (!databaseResponse || !databaseResponse.resource) {\n          throw new ErrorResponse(`Error reading database with id ${clientEncryptionKeyId}`);\n        }\n        this._rid = databaseResponse.resource._rid;\n      }\n      const path = getPathFromLink(this.url, ResourceType.clientencryptionkey);\n      const resourceid = getIdFromLink(this.url);\n      const response = await this.clientContext.read<ClientEncryptionKeyRequest>({\n        path: path + `/${clientEncryptionKeyId}`,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: resourceid + `/${ResourceType.clientencryptionkey}/${clientEncryptionKeyId}`,\n        options: { databaseRid: this._rid },\n        diagnosticNode,\n      });\n      if (!response || !response.result) {\n        throw new ErrorResponse(\n          `Error reading client encryption key with id ${clientEncryptionKeyId}`,\n        );\n      }\n      const ref: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        etag: response.result._etag,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n      };\n      return new ClientEncryptionKeyResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n  /**\n   * rewraps a client encryption key with new key encryption key\n   * @param id - client encryption key id\n   * @param newKeyWrapMetadata - new encryption key wrap metadata\n   * @returns rewrapped client encryption key with new customer managed key\n   */\n  public async rewrapClientEncryptionKey(\n    clientEncryptionKeyId: string,\n    newKeyWrapMetadata: EncryptionKeyWrapMetadata,\n  ): Promise<ClientEncryptionKeyResponse> {\n    if (clientEncryptionKeyId == null || !clientEncryptionKeyId.trim()) {\n      throw new ErrorResponse(\"encryption key id cannot be null or empty\");\n    }\n    if (!newKeyWrapMetadata) {\n      throw new ErrorResponse(\"encryptionKeyWrapMetadata cannot be null.\");\n    }\n    if (newKeyWrapMetadata.algorithm !== KeyEncryptionAlgorithm.RSA_OAEP) {\n      throw new ErrorResponse(\n        `Invalid key wrap algorithm '${newKeyWrapMetadata.algorithm}' passed.`,\n      );\n    }\n    if (!this.clientContext.enableEncryption) {\n      throw new ErrorResponse(\n        \"Rewrapping a client encryption key requires the use of an encryption-enabled client.\",\n      );\n    }\n\n    const res = await this.readClientEncryptionKey(clientEncryptionKeyId);\n    if (!res || !res.clientEncryptionKeyProperties) {\n      throw new ErrorResponse(\n        `Error reading client encryption key with id ${clientEncryptionKeyId}`,\n      );\n    }\n    let clientEncryptionKeyProperties = res.clientEncryptionKeyProperties;\n\n    let keyEncryptionKey = this.encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.name,\n      clientEncryptionKeyProperties.encryptionKeyWrapMetadata.value,\n      this.encryptionManager.encryptionKeyStoreProvider,\n    );\n    const unwrappedKey = await keyEncryptionKey.unwrapEncryptionKey(\n      Buffer.from(clientEncryptionKeyProperties.wrappedDataEncryptionKey),\n    );\n\n    keyEncryptionKey = this.encryptionManager.keyEncryptionKeyCache.getOrCreate(\n      newKeyWrapMetadata.name,\n      newKeyWrapMetadata.value,\n      this.encryptionManager.encryptionKeyStoreProvider,\n    );\n    const rewrappedKey = await keyEncryptionKey.wrapEncryptionKey(unwrappedKey);\n    clientEncryptionKeyProperties = {\n      id: clientEncryptionKeyId,\n      encryptionAlgorithm: clientEncryptionKeyProperties.encryptionAlgorithm,\n      etag: clientEncryptionKeyProperties.etag,\n      wrappedDataEncryptionKey: rewrappedKey,\n      encryptionKeyWrapMetadata: newKeyWrapMetadata,\n    };\n    const body: ClientEncryptionKeyRequest = {\n      id: clientEncryptionKeyId,\n      encryptionAlgorithm: clientEncryptionKeyProperties.encryptionAlgorithm,\n      keyWrapMetadata: newKeyWrapMetadata,\n      wrappedDataEncryptionKey: rewrappedKey.toString(\"base64\"),\n    };\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      const path = getPathFromLink(this.url, ResourceType.clientencryptionkey);\n      const resourceid = getIdFromLink(this.url);\n      const options = {\n        accessCondition: { type: \"IfMatch\", condition: clientEncryptionKeyProperties.etag },\n      };\n      const response = await this.clientContext.replace<ClientEncryptionKeyRequest>({\n        body,\n        path: path + `/${clientEncryptionKeyId}`,\n        resourceType: ResourceType.clientencryptionkey,\n        resourceId: resourceid + `/${ResourceType.clientencryptionkey}/${clientEncryptionKeyId}`,\n        options,\n        diagnosticNode,\n      });\n\n      if (!response || !response.result) {\n        throw new ErrorResponse(\n          `Error rewrapping client encryption key with id ${clientEncryptionKeyId}`,\n        );\n      }\n\n      const ref: ClientEncryptionKeyProperties = {\n        id: response.result.id,\n        encryptionAlgorithm: response.result.encryptionAlgorithm,\n        etag: response.result._etag,\n        wrappedDataEncryptionKey: new Uint8Array(\n          Buffer.from(response.result.wrappedDataEncryptionKey, \"base64\"),\n        ),\n        encryptionKeyWrapMetadata: response.result.keyWrapMetadata,\n      };\n      return new ClientEncryptionKeyResponse(\n        response.result,\n        response.headers,\n        response.code,\n        ref,\n        getEmptyCosmosDiagnostics(),\n      );\n    }, this.clientContext);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { ClientContext } from \"../../ClientContext\";\nimport { Constants, isResourceValid, ResourceType, StatusCodes } from \"../../common\";\nimport type { CosmosClient } from \"../../CosmosClient\";\nimport type { FetchFunctionCallback, SqlQuerySpec } from \"../../queryExecutionContext\";\nimport { mergeHeaders } from \"../../queryExecutionContext\";\nimport { QueryIterator } from \"../../queryIterator\";\nimport type { FeedOptions, RequestOptions } from \"../../request\";\nimport type { Resource } from \"../Resource\";\nimport { Database } from \"./Database\";\nimport type { DatabaseDefinition } from \"./DatabaseDefinition\";\nimport type { DatabaseRequest } from \"./DatabaseRequest\";\nimport { DatabaseResponse } from \"./DatabaseResponse\";\nimport { validateOffer } from \"../../utils/offers\";\nimport type { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\nimport { EncryptionManager } from \"../../encryption/EncryptionManager\";\n\n/**\n * Operations for creating new databases, and reading/querying all databases\n *\n * @see {@link Database} for reading or deleting an existing database; use `client.database(id)`.\n *\n * Note: all these operations make calls against a fixed budget.\n * You should design your system such that these calls scale sublinearly with your application.\n * For instance, do not call `databases.readAll()` before every single `item.read()` call, to ensure the database exists;\n * do this once on application start up.\n */\nexport class Databases {\n  /**\n   * @hidden\n   * @param client - The parent {@link CosmosClient} for the Database.\n   */\n  constructor(\n    public readonly client: CosmosClient,\n    private readonly clientContext: ClientContext,\n    private encryptionManager?: EncryptionManager,\n  ) {}\n\n  /**\n   * Queries all databases.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.\n   * @example Read all databases to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @db\",\n   *   parameters: [\n   *     {name: \"@db\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: databaseList} = await client.databases.query(querySpec).fetchAll();\n   * ```\n   */\n  public query(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<any>;\n  /**\n   * Queries all databases.\n   * @param query - Query configuration for the operation. See {@link SqlQuerySpec} for more info on how to configure a query.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.\n   * @example Read all databases to array.\n   * ```typescript\n   * const querySpec: SqlQuerySpec = {\n   *   query: \"SELECT * FROM root r WHERE r.id = @db\",\n   *   parameters: [\n   *     {name: \"@db\", value: \"Todo\"}\n   *   ]\n   * };\n   * const {body: databaseList} = await client.databases.query(querySpec).fetchAll();\n   * ```\n   */\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T>;\n  public query<T>(query: string | SqlQuerySpec, options?: FeedOptions): QueryIterator<T> {\n    const cb: FetchFunctionCallback = (diagNode: DiagnosticNodeInternal, innerOptions) => {\n      return this.clientContext.queryFeed({\n        path: \"/dbs\",\n        resourceType: ResourceType.database,\n        resourceId: \"\",\n        resultFn: (result) => result.Databases,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n    };\n    return new QueryIterator(this.clientContext, query, options, cb);\n  }\n\n  /**\n   * Send a request for creating a database.\n   *\n   * A database manages users, permissions and a set of containers.\n   * Each Azure Cosmos DB Database Account is able to support multiple independent named databases,\n   * with the database being the logical container for data.\n   *\n   * Each Database consists of one or more containers, each of which in turn contain one or more\n   * documents. Since databases are an administrative resource, the Service Master Key will be\n   * required in order to access and successfully complete any action using the User APIs.\n   *\n   * @param body - The {@link DatabaseDefinition} that represents the {@link Database} to be created.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   */\n  public async create(\n    body: DatabaseRequest,\n    options: RequestOptions = {},\n  ): Promise<DatabaseResponse> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.createInternal(diagnosticNode, body, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async createInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    body: DatabaseRequest,\n    options: RequestOptions = {},\n  ): Promise<DatabaseResponse> {\n    const err = {};\n    if (!isResourceValid(body, err)) {\n      throw err;\n    }\n\n    validateOffer(body);\n\n    if (body.maxThroughput) {\n      const autoscaleParams: {\n        maxThroughput: number;\n        autoUpgradePolicy?: {\n          throughputPolicy: {\n            incrementPercent: number;\n          };\n        };\n      } = {\n        maxThroughput: body.maxThroughput,\n      };\n      if (body.autoUpgradePolicy) {\n        autoscaleParams.autoUpgradePolicy = body.autoUpgradePolicy;\n      }\n      const autoscaleHeaders = JSON.stringify(autoscaleParams);\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.AutoscaleSettings]: autoscaleHeaders,\n      });\n      delete body.maxThroughput;\n      delete body.autoUpgradePolicy;\n    }\n\n    if (body.throughput) {\n      options.initialHeaders = Object.assign({}, options.initialHeaders, {\n        [Constants.HttpHeaders.OfferThroughput]: body.throughput,\n      });\n      delete body.throughput;\n    }\n\n    const path = \"/dbs\"; // TODO: constant\n    const response = await this.clientContext.create<DatabaseRequest>({\n      body,\n      path,\n      resourceType: ResourceType.database,\n      resourceId: undefined,\n      diagnosticNode,\n      options,\n    });\n    const ref = new Database(\n      this.client,\n      body.id,\n      this.clientContext,\n      this.encryptionManager,\n      response.result._rid,\n    );\n    return new DatabaseResponse(\n      response.result,\n      response.headers,\n      response.code,\n      ref,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n\n  /**\n   * Check if a database exists, and if it doesn't, create it.\n   * This will make a read operation based on the id in the `body`, then if it is not found, a create operation.\n   *\n   * A database manages users, permissions and a set of containers.\n   * Each Azure Cosmos DB Database Account is able to support multiple independent named databases,\n   * with the database being the logical container for data.\n   *\n   * Each Database consists of one or more containers, each of which in turn contain one or more\n   * documents. Since databases are an an administrative resource, the Service Master Key will be\n   * required in order to access and successfully complete any action using the User APIs.\n   *\n   * @param body - The {@link DatabaseDefinition} that represents the {@link Database} to be created.\n   * @param options - Additional options for the request\n   */\n  public async createIfNotExists(\n    body: DatabaseRequest,\n    options?: RequestOptions,\n  ): Promise<DatabaseResponse> {\n    if (!body || body.id === null || body.id === undefined) {\n      throw new Error(\"body parameter must be an object with an id property\");\n    }\n    /*\n      1. Attempt to read the Database (based on an assumption that most databases will already exist, so its faster)\n      2. If it fails with NotFound error, attempt to create the db. Else, return the read results.\n    */\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      try {\n        const readResponse = await this.client\n          .database(body.id)\n          .readInternal(diagnosticNode, options);\n        return readResponse;\n      } catch (err: any) {\n        if (err.code === StatusCodes.NotFound) {\n          const createResponse = await this.createInternal(diagnosticNode, body, options);\n          // Must merge the headers to capture RU costskaty\n          mergeHeaders(createResponse.headers, err.headers);\n          return createResponse;\n        } else {\n          throw err;\n        }\n      }\n    }, this.clientContext);\n  }\n\n  // TODO: DatabaseResponse for QueryIterator?\n  /**\n   * Reads all databases.\n   * @param options - Use to set options like response page size, continuation tokens, etc.\n   * @returns {@link QueryIterator} Allows you to return all databases in an array or iterate over them one at a time.\n   * @example Read all databases to array.\n   * ```typescript\n   * const {body: databaseList} = await client.databases.readAll().fetchAll();\n   * ```\n   */\n  public readAll(options?: FeedOptions): QueryIterator<DatabaseDefinition & Resource> {\n    return this.query<DatabaseDefinition & Resource>(undefined, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { RequestContext } from \"../request/RequestContext\";\nimport type { Response } from \"../request/Response\";\n\n/**\n * Used to specify which type of events to execute this plug in on.\n *\n * @hidden\n */\nexport enum PluginOn {\n  /**\n   * Will be executed per network request\n   */\n  request = \"request\",\n  /**\n   * Will be executed per API operation\n   */\n  operation = \"operation\",\n}\n\n/**\n * Specifies which event to run for the specified plugin\n *\n * @hidden\n */\nexport interface PluginConfig {\n  /**\n   * The event to run the plugin on\n   */\n  on: keyof typeof PluginOn;\n  /**\n   * The plugin to run\n   */\n  plugin: Plugin<any>;\n}\n\n/**\n * Plugins allow you to customize the behavior of the SDk with additional logging, retry, or additional functionality.\n *\n * A plugin is a function which returns a `Promise<Response<T>>`, and is passed a RequestContext and Next object.\n *\n * Next is a function which takes in requestContext returns a promise. You must await/then that promise which will contain the response from further plugins,\n * allowing you to log those results or handle errors.\n *\n * RequestContext is an object which controls what operation is happening, against which endpoint, and more. Modifying this and passing it along via next is how\n * you modify future SDK behavior.\n *\n * @hidden\n */\nexport type Plugin<T> = (\n  context: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal,\n  next: Next<T>,\n) => Promise<Response<T>>;\n\n/**\n * Next is a function which takes in requestContext returns a promise. You must await/then that promise which will contain the response from further plugins,\n * allowing you to log those results or handle errors.\n * @hidden\n */\nexport type Next<T> = (context: RequestContext) => Promise<Response<T>>;\n\n/**\n * @internal\n */\nexport async function executePlugins(\n  diagnosticNode: DiagnosticNodeInternal,\n  requestContext: RequestContext,\n  next: Plugin<any>,\n  on: PluginOn,\n): Promise<Response<any>> {\n  if (!requestContext.plugins) {\n    return next(requestContext, diagnosticNode, undefined);\n  }\n  let level = 0;\n  const _: Next<any> = (inner: RequestContext): Promise<Response<any>> => {\n    if (++level >= inner.plugins.length) {\n      return next(requestContext, diagnosticNode, undefined);\n    } else if (inner.plugins[level].on !== on) {\n      return _(requestContext);\n    } else {\n      return inner.plugins[level].plugin(inner, diagnosticNode, _);\n    }\n  };\n  if (requestContext.plugins[level].on !== on) {\n    return _(requestContext);\n  } else {\n    return requestContext.plugins[level].plugin(requestContext, diagnosticNode, _);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { OperationType } from \"../common\";\nimport type { ErrorResponse } from \"../request\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport type { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * @hidden\n */\n// Windows Socket Error Codes\nconst WindowsInterruptedFunctionCall = 10004;\n/**\n * @hidden\n */\nconst WindowsFileHandleNotValid = 10009;\n/**\n * @hidden\n */\nconst WindowsPermissionDenied = 10013;\n/**\n * @hidden\n */\nconst WindowsBadAddress = 10014;\n/**\n * @hidden\n */\nconst WindowsInvalidArgumnet = 10022;\n/**\n * @hidden\n */\nconst WindowsResourceTemporarilyUnavailable = 10035;\n/**\n * @hidden\n */\nconst WindowsOperationNowInProgress = 10036;\n/**\n * @hidden\n */\nconst WindowsAddressAlreadyInUse = 10048;\n/**\n * @hidden\n */\nconst WindowsConnectionResetByPeer = 10054;\n/**\n * @hidden\n */\nconst WindowsCannotSendAfterSocketShutdown = 10058;\n/**\n * @hidden\n */\nconst WindowsConnectionTimedOut = 10060;\n/**\n * @hidden\n */\nconst WindowsConnectionRefused = 10061;\n/**\n * @hidden\n */\nconst WindowsNameTooLong = 10063;\n/**\n * @hidden\n */\nconst WindowsHostIsDown = 10064;\n/**\n * @hidden\n */\nconst WindowsNoRouteTohost = 10065;\n/**\n * @hidden\n */\n\n// Linux Error Codes\n/**\n * @hidden\n */\nconst LinuxConnectionReset = \"ECONNRESET\";\n\n// Node Error Codes\n/**\n * @hidden\n */\nconst BrokenPipe = \"EPIPE\";\n\n/**\n * @hidden\n */\nconst CONNECTION_ERROR_CODES = [\n  WindowsInterruptedFunctionCall,\n  WindowsFileHandleNotValid,\n  WindowsPermissionDenied,\n  WindowsBadAddress,\n  WindowsInvalidArgumnet,\n  WindowsResourceTemporarilyUnavailable,\n  WindowsOperationNowInProgress,\n  WindowsAddressAlreadyInUse,\n  WindowsConnectionResetByPeer,\n  WindowsCannotSendAfterSocketShutdown,\n  WindowsConnectionTimedOut,\n  WindowsConnectionRefused,\n  WindowsNameTooLong,\n  WindowsHostIsDown,\n  WindowsNoRouteTohost,\n  LinuxConnectionReset,\n  TimeoutErrorCode,\n  BrokenPipe,\n];\n\n/**\n * @hidden\n */\nfunction needsRetry(operationType: OperationType, code: number | string): boolean {\n  if (\n    (operationType === OperationType.Read || operationType === OperationType.Query) &&\n    CONNECTION_ERROR_CODES.indexOf(code) !== -1\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * This class implements the default connection retry policy for requests.\n * @hidden\n */\nexport class DefaultRetryPolicy implements RetryPolicy {\n  private maxTries: number = 10;\n  private currentRetryAttemptCount: number = 0;\n  public retryAfterInMs: number = 1000;\n\n  constructor(private operationType: OperationType) {}\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<boolean> {\n    if (err) {\n      if (\n        this.currentRetryAttemptCount < this.maxTries &&\n        needsRetry(this.operationType, err.code)\n      ) {\n        diagnosticNode.addData({ successfulRetryPolicy: \"default\" });\n        this.currentRetryAttemptCount++;\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { OperationType } from \"../common\";\nimport { isReadRequest } from \"../common/helper\";\nimport type { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport type { ErrorResponse } from \"../request\";\nimport type { RetryContext } from \"./RetryContext\";\nimport type { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * This class implements the retry policy for endpoint discovery.\n * @hidden\n */\nexport class EndpointDiscoveryRetryPolicy implements RetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number;\n  /** Retry interval in milliseconds. */\n  public retryAfterInMs: number;\n\n  /** Max number of retry attempts to perform. */\n  private maxTries: number;\n  private static readonly maxTries = 120; // TODO: Constant?\n  private static readonly retryAfterInMs = 1000;\n\n  /**\n   * @param globalEndpointManager - The GlobalEndpointManager instance.\n   */\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private operationType: OperationType,\n  ) {\n    this.maxTries = EndpointDiscoveryRetryPolicy.maxTries;\n    this.currentRetryAttemptCount = 0;\n    this.retryAfterInMs = EndpointDiscoveryRetryPolicy.retryAfterInMs;\n  }\n\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext,\n    locationEndpoint?: string,\n  ): Promise<boolean | [boolean, string]> {\n    if (!err) {\n      return false;\n    }\n\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n\n    if (!this.globalEndpointManager.enableEndpointDiscovery) {\n      return false;\n    }\n\n    if (this.currentRetryAttemptCount >= this.maxTries) {\n      return false;\n    }\n\n    this.currentRetryAttemptCount++;\n\n    if (isReadRequest(this.operationType)) {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForRead(\n        diagnosticNode,\n        locationEndpoint,\n      );\n    } else {\n      await this.globalEndpointManager.markCurrentLocationUnavailableForWrite(\n        diagnosticNode,\n        locationEndpoint,\n      );\n    }\n\n    retryContext.retryCount = this.currentRetryAttemptCount;\n    retryContext.clearSessionTokenNotAvailable = false;\n    retryContext.retryRequestOnPreferredLocations = false;\n    diagnosticNode.addData({ successfulRetryPolicy: \"endpointDiscovery\" });\n    return true;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/constants\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { ErrorResponse } from \"../request\";\nimport type { RetryOptions } from \"./retryOptions\";\n\n/**\n * This class implements the resource throttle retry policy for requests.\n * @hidden\n */\nexport class ResourceThrottleRetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount: number = 0;\n  /** Cummulative wait time in milliseconds for a request while the retries are happening. */\n  public cummulativeWaitTimeinMs: number = 0;\n  /** Retry interval in milliseconds to wait before the next request will be sent. */\n  public retryAfterInMs: number = 0;\n\n  /** Max wait time in milliseconds to wait for a request while the retries are happening. */\n  private timeoutInMs: number;\n  /**\n   * @param maxTries - Max number of retries to be performed for a request.\n   * @param fixedRetryIntervalInMs - Fixed retry interval in milliseconds to wait between each\n   * retry ignoring the retryAfter returned as part of the response.\n   * @param timeoutInSeconds - Max wait time in seconds to wait for a request while the\n   * retries are happening.\n   */\n\n  private maxTries: number;\n  private fixedRetryIntervalInMs: number;\n  constructor(options: RetryOptions) {\n    this.maxTries = options.maxRetryAttemptCount ?? Constants.ThrottledRequestMaxRetryAttemptCount;\n    this.fixedRetryIntervalInMs =\n      options.fixedRetryIntervalInMilliseconds ?? Constants.ThrottledRequestFixedRetryIntervalInMs;\n    const timeoutInSeconds =\n      options.maxWaitTimeInSeconds ?? Constants.ThrottledRequestMaxWaitTimeInSeconds;\n    this.timeoutInMs = timeoutInSeconds * 1000;\n    this.currentRetryAttemptCount = 0;\n    this.cummulativeWaitTimeinMs = 0;\n  }\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<boolean> {\n    // TODO: any custom error object\n    if (err) {\n      if (this.currentRetryAttemptCount < this.maxTries) {\n        this.currentRetryAttemptCount++;\n        this.retryAfterInMs = 0;\n\n        if (this.fixedRetryIntervalInMs) {\n          this.retryAfterInMs = this.fixedRetryIntervalInMs;\n        } else if (err.retryAfterInMs) {\n          this.retryAfterInMs = err.retryAfterInMs;\n        }\n\n        if (this.cummulativeWaitTimeinMs < this.timeoutInMs) {\n          this.cummulativeWaitTimeinMs += this.retryAfterInMs;\n          diagnosticNode.addData({ successfulRetryPolicy: \"resourceThrottle\" });\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { OperationType, ResourceType } from \"../common\";\nimport { isReadRequest } from \"../common\";\nimport type { ConnectionPolicy } from \"../documents\";\nimport type { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport type { ErrorResponse } from \"../request\";\nimport type { RetryContext } from \"./RetryContext\";\nimport type { RetryPolicy } from \"./RetryPolicy\";\n\n/**\n * This class implements the retry policy for session consistent reads.\n * @hidden\n */\nexport class SessionRetryPolicy implements RetryPolicy {\n  /** Current retry attempt count. */\n  public currentRetryAttemptCount = 0;\n  /** Retry interval in milliseconds. */\n  public retryAfterInMs = 0;\n\n  /**\n   * @param globalEndpointManager - The GlobalEndpointManager instance.\n   */\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private resourceType: ResourceType,\n    private operationType: OperationType,\n    private connectionPolicy: ConnectionPolicy,\n  ) {}\n\n  /**\n   * Determines whether the request should be retried or not.\n   * @param err - Error returned by the request.\n   * @param callback - The callback function which takes bool argument which specifies whether the request\n   * will be retried or not.\n   */\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext,\n  ): Promise<boolean> {\n    if (!err) {\n      return false;\n    }\n\n    if (!retryContext) {\n      return false;\n    }\n\n    if (!this.connectionPolicy.enableEndpointDiscovery) {\n      return false;\n    }\n\n    if (\n      this.globalEndpointManager.canUseMultipleWriteLocations(this.resourceType, this.operationType)\n    ) {\n      // If we can write to multiple locations, we should against every write endpoint until we succeed\n      const endpoints = isReadRequest(this.operationType)\n        ? await this.globalEndpointManager.getReadEndpoints()\n        : await this.globalEndpointManager.getWriteEndpoints();\n      if (this.currentRetryAttemptCount > endpoints.length) {\n        return false;\n      } else {\n        this.currentRetryAttemptCount++;\n        retryContext.retryCount++;\n        retryContext.retryRequestOnPreferredLocations = this.currentRetryAttemptCount > 1;\n        retryContext.clearSessionTokenNotAvailable =\n          this.currentRetryAttemptCount === endpoints.length;\n        diagnosticNode.addData({ successfulRetryPolicy: \"session\" });\n        return true;\n      }\n    } else {\n      if (this.currentRetryAttemptCount > 1) {\n        return false;\n      } else {\n        this.currentRetryAttemptCount++;\n        retryContext.retryCount++;\n        retryContext.retryRequestOnPreferredLocations = false; // Forces all operations to primary write endpoint\n        retryContext.clearSessionTokenNotAvailable = true;\n        diagnosticNode.addData({ successfulRetryPolicy: \"session\" });\n        return true;\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { RetryPolicy } from \"./RetryPolicy\";\nimport { StatusCodes } from \"../common/statusCodes\";\nimport type { GlobalEndpointManager } from \"../globalEndpointManager\";\nimport { HTTPMethod, isReadRequest } from \"../common\";\nimport type { OperationType, ResourceType } from \"../common/constants\";\nimport { Constants } from \"../common/constants\";\nimport type { RetryContext } from \"./RetryContext\";\nimport type { CosmosHeaders } from \"../queryExecutionContext/CosmosHeaders\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport type { ErrorResponse } from \"../request\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\n\n/**\n * This class TimeoutFailoverRetryPolicy handles retries for read operations\n * (including data plane,metadata, and query plan) in case of request timeouts\n * (TimeoutError) or service unavailability (503 status code) by performing failover\n * and retrying on other regions.\n * @hidden\n */\nexport class TimeoutFailoverRetryPolicy implements RetryPolicy {\n  private maxRetryAttemptCount = 120;\n  private maxServiceUnavailableRetryCount = 1;\n  public retryAfterInMs = 0;\n  public failoverRetryCount = 0;\n  public request: any;\n  public locationEndpoint: any;\n\n  constructor(\n    private globalEndpointManager: GlobalEndpointManager,\n    private headers: CosmosHeaders,\n    private methodType: HTTPMethod,\n    private resourceType: ResourceType,\n    private operationType: OperationType,\n    private enableEndPointDiscovery: boolean,\n  ) {}\n\n  /**\n   * Checks if a timeout request is valid for the timeout failover retry policy.\n   * A valid request should be a data plane, metadata, or query plan request.\n   * @returns\n   */\n  private isValidRequestForTimeoutError(): boolean {\n    const isQuery = Constants.HttpHeaders.IsQuery in this.headers;\n    const isQueryPlan = Constants.HttpHeaders.IsQueryPlan in this.headers;\n    if (this.methodType === HTTPMethod.get || isQuery || isQueryPlan) {\n      return true;\n    }\n    return false;\n  }\n\n  public async shouldRetry(\n    err: ErrorResponse,\n    diagnosticNode: DiagnosticNodeInternal,\n    retryContext?: RetryContext,\n    locationEndpoint?: string,\n  ): Promise<boolean> {\n    if (!err) {\n      return false;\n    }\n    if (!retryContext || !locationEndpoint) {\n      return false;\n    }\n    // Check if the error is a timeout error (TimeoutErrorCode) and if it is not a valid HTTP network timeout request\n    if (err.code === TimeoutErrorCode && !this.isValidRequestForTimeoutError()) {\n      return false;\n    }\n    if (!this.enableEndPointDiscovery) {\n      return false;\n    }\n    if (\n      err.code === StatusCodes.ServiceUnavailable &&\n      this.failoverRetryCount >= this.maxServiceUnavailableRetryCount\n    ) {\n      return false;\n    }\n    if (this.failoverRetryCount >= this.maxRetryAttemptCount) {\n      return false;\n    }\n    const canUseMultipleWriteLocations = this.globalEndpointManager.canUseMultipleWriteLocations(\n      this.resourceType,\n      this.operationType,\n    );\n    const readRequest = isReadRequest(this.operationType);\n\n    if (!canUseMultipleWriteLocations && !readRequest) {\n      // Write requests on single master cannot be retried, no other regions available\n      return false;\n    }\n    this.failoverRetryCount++;\n    // Setting the retryLocationIndex to the next available location for retry.\n    // The retryLocationIndex is determined based on the failoverRetryCount, starting from zero.\n    retryContext.retryLocationServerIndex = await this.findEndpointIndex(this.failoverRetryCount);\n    diagnosticNode.addData({ successfulRetryPolicy: \"timeout-failover\" });\n    return true;\n  }\n\n  /**\n   * Determines index of endpoint to be used for retry based upon failoverRetryCount and avalable locations\n   * @param failoverRetryCount - count of failovers\n   * @returns\n   */\n  private async findEndpointIndex(failoverRetryCount: number): Promise<number> {\n    // count of preferred locations specified by user\n    const preferredLocationsCount = this.globalEndpointManager.preferredLocationsCount;\n    const readRequest = isReadRequest(this.operationType);\n    let endpointIndex = 0;\n    // If preferredLocationsCount is not zero, it indicates that the user has specified preferred locations.\n    if (preferredLocationsCount !== 0) {\n      // The endpointIndex is set based on the preferred location and the failover retry count.\n      endpointIndex = failoverRetryCount % preferredLocationsCount;\n    } else {\n      // In the absence of preferred locations, the endpoint selection is based on the failover count and the number of available locations.\n      if (readRequest) {\n        const getReadEndpoints = await this.globalEndpointManager.getReadEndpoints();\n        if (getReadEndpoints && getReadEndpoints.length > 0) {\n          endpointIndex = failoverRetryCount % getReadEndpoints.length;\n        }\n      } else {\n        const getWriteEndpoints = await this.globalEndpointManager.getWriteEndpoints();\n        if (getWriteEndpoints && getWriteEndpoints.length > 0) {\n          endpointIndex = failoverRetryCount % getWriteEndpoints.length;\n        }\n      }\n    }\n    return endpointIndex;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Constants } from \"../common/constants\";\nimport { sleep } from \"../common/helper\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport type { Response } from \"../request\";\nimport type { RequestContext } from \"../request/RequestContext\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\nimport { DefaultRetryPolicy } from \"./defaultRetryPolicy\";\nimport { EndpointDiscoveryRetryPolicy } from \"./endpointDiscoveryRetryPolicy\";\nimport { ResourceThrottleRetryPolicy } from \"./resourceThrottleRetryPolicy\";\nimport type { RetryContext } from \"./RetryContext\";\nimport type { RetryPolicy } from \"./RetryPolicy\";\nimport { SessionRetryPolicy } from \"./sessionRetryPolicy\";\nimport { TimeoutFailoverRetryPolicy } from \"./timeoutFailoverRetryPolicy\";\n\n/**\n * @hidden\n */\ninterface ExecuteArgs {\n  retryContext?: RetryContext;\n  diagnosticNode: DiagnosticNodeInternal;\n  retryPolicies?: RetryPolicies;\n  requestContext: RequestContext;\n  executeRequest: (\n    diagnosticNode: DiagnosticNodeInternal,\n    requestContext: RequestContext,\n  ) => Promise<Response<any>>;\n}\n\n/**\n * @hidden\n */\ninterface RetryPolicies {\n  endpointDiscoveryRetryPolicy: EndpointDiscoveryRetryPolicy;\n  resourceThrottleRetryPolicy: ResourceThrottleRetryPolicy;\n  sessionReadRetryPolicy: SessionRetryPolicy;\n  defaultRetryPolicy: DefaultRetryPolicy;\n  timeoutFailoverRetryPolicy: TimeoutFailoverRetryPolicy;\n}\n\n/**\n * @hidden\n */\nexport async function execute({\n  diagnosticNode,\n  retryContext = { retryCount: 0 },\n  retryPolicies,\n  requestContext,\n  executeRequest,\n}: ExecuteArgs): Promise<Response<any>> {\n  // TODO: any response\n  return addDignosticChild(\n    async (localDiagnosticNode: DiagnosticNodeInternal) => {\n      localDiagnosticNode.addData({ requestAttempNumber: retryContext.retryCount });\n      if (!retryPolicies) {\n        retryPolicies = {\n          endpointDiscoveryRetryPolicy: new EndpointDiscoveryRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.operationType,\n          ),\n          resourceThrottleRetryPolicy: new ResourceThrottleRetryPolicy(\n            requestContext.connectionPolicy.retryOptions ?? {},\n          ),\n          sessionReadRetryPolicy: new SessionRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.resourceType,\n            requestContext.operationType,\n            requestContext.connectionPolicy,\n          ),\n          defaultRetryPolicy: new DefaultRetryPolicy(requestContext.operationType),\n          timeoutFailoverRetryPolicy: new TimeoutFailoverRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.headers,\n            requestContext.method,\n            requestContext.resourceType,\n            requestContext.operationType,\n            requestContext.connectionPolicy.enableEndpointDiscovery,\n          ),\n        };\n      }\n      if (retryContext && retryContext.clearSessionTokenNotAvailable) {\n        requestContext.client.clearSessionToken(requestContext.path);\n        delete requestContext.headers[\"x-ms-session-token\"];\n      }\n      if (retryContext && retryContext.retryLocationServerIndex) {\n        requestContext.endpoint = await requestContext.globalEndpointManager.resolveServiceEndpoint(\n          localDiagnosticNode,\n          requestContext.resourceType,\n          requestContext.operationType,\n          retryContext.retryLocationServerIndex,\n        );\n      } else {\n        requestContext.endpoint = await requestContext.globalEndpointManager.resolveServiceEndpoint(\n          localDiagnosticNode,\n          requestContext.resourceType,\n          requestContext.operationType,\n        );\n      }\n      const startTimeUTCInMs = getCurrentTimestampInMs();\n      const correlatedActivityId =\n        requestContext.headers[Constants.HttpHeaders.CorrelatedActivityId];\n      try {\n        const response = await executeRequest(localDiagnosticNode, requestContext);\n        response.headers[Constants.ThrottleRetryCount] =\n          retryPolicies.resourceThrottleRetryPolicy.currentRetryAttemptCount;\n        response.headers[Constants.ThrottleRetryWaitTimeInMs] =\n          retryPolicies.resourceThrottleRetryPolicy.cummulativeWaitTimeinMs;\n        if (correlatedActivityId) {\n          response.headers[Constants.HttpHeaders.CorrelatedActivityId] = correlatedActivityId;\n        }\n        return response;\n      } catch (err: any) {\n        // TODO: any error\n        let retryPolicy: RetryPolicy = null;\n        const headers = err.headers || {};\n        if (correlatedActivityId) {\n          headers[Constants.HttpHeaders.CorrelatedActivityId] = correlatedActivityId;\n        }\n        if (\n          err.code === StatusCodes.ENOTFOUND ||\n          err.code === \"REQUEST_SEND_ERROR\" ||\n          (err.code === StatusCodes.Forbidden &&\n            (err.substatus === SubStatusCodes.DatabaseAccountNotFound ||\n              err.substatus === SubStatusCodes.WriteForbidden))\n        ) {\n          retryPolicy = retryPolicies.endpointDiscoveryRetryPolicy;\n        } else if (err.code === StatusCodes.TooManyRequests) {\n          retryPolicy = retryPolicies.resourceThrottleRetryPolicy;\n        } else if (\n          err.code === StatusCodes.NotFound &&\n          err.substatus === SubStatusCodes.ReadSessionNotAvailable\n        ) {\n          retryPolicy = retryPolicies.sessionReadRetryPolicy;\n        } else if (err.code === StatusCodes.ServiceUnavailable || err.code === TimeoutErrorCode) {\n          retryPolicy = retryPolicies.timeoutFailoverRetryPolicy;\n        } else {\n          retryPolicy = retryPolicies.defaultRetryPolicy;\n        }\n        const results = await retryPolicy.shouldRetry(\n          err,\n          localDiagnosticNode,\n          retryContext,\n          requestContext.endpoint,\n        );\n        if (!results) {\n          headers[Constants.ThrottleRetryCount] =\n            retryPolicies.resourceThrottleRetryPolicy.currentRetryAttemptCount;\n          headers[Constants.ThrottleRetryWaitTimeInMs] =\n            retryPolicies.resourceThrottleRetryPolicy.cummulativeWaitTimeinMs;\n          err.headers = { ...err.headers, ...headers };\n          throw err;\n        } else {\n          requestContext.retryCount++;\n          const newUrl = (results as any)[1]; // TODO: any hack\n          if (newUrl !== undefined) {\n            requestContext.endpoint = newUrl;\n          }\n          localDiagnosticNode.recordFailedNetworkCall(\n            startTimeUTCInMs,\n            requestContext,\n            retryContext.retryCount,\n            err.code,\n            err.subsstatusCode,\n            headers,\n          );\n          await sleep(retryPolicy.retryAfterInMs);\n          return execute({\n            diagnosticNode,\n            executeRequest,\n            requestContext,\n            retryContext,\n            retryPolicies,\n          });\n        }\n      }\n    },\n    diagnosticNode,\n    DiagnosticNodeType.HTTP_REQUEST,\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport type { Agent } from \"http\";\n\n/**\n * @hidden\n */\nexport let defaultHttpsAgent: Agent;\n\nconst https = require(\"https\"); // eslint-disable-line @typescript-eslint/no-require-imports\nconst tls = require(\"tls\"); // eslint-disable-line @typescript-eslint/no-require-imports\n\n// minVersion only available in Node 10+\nif (tls.DEFAULT_MIN_VERSION) {\n  defaultHttpsAgent = new https.Agent({\n    keepAlive: true,\n    minVersion: \"TLSv1.2\",\n  });\n} else {\n  // Remove when Node 8 support has been dropped\n  defaultHttpsAgent = new https.Agent({\n    keepAlive: true,\n    secureProtocol: \"TLSv1_2_method\",\n  });\n}\nconst http = require(\"http\"); // eslint-disable-line @typescript-eslint/no-require-imports\n/**\n * @internal\n */\nexport const defaultHttpAgent: Agent = new http.Agent({\n  keepAlive: true,\n});\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpClient } from \"@azure/core-rest-pipeline\";\nimport { createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\nexport function getCachedDefaultHttpClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport { createPipelineRequest, createHttpHeaders } from \"@azure/core-rest-pipeline\";\nimport { prepareURL } from \"../common\";\nimport { Constants } from \"../common/constants\";\nimport { executePlugins, PluginOn } from \"../plugins/Plugin\";\nimport * as RetryUtility from \"../retry/retryUtility\";\nimport { defaultHttpAgent, defaultHttpsAgent } from \"./defaultAgent\";\nimport { ErrorResponse } from \"./ErrorResponse\";\nimport { bodyFromData } from \"./request\";\nimport type { RequestContext } from \"./RequestContext\";\nimport type { Response as CosmosResponse } from \"./Response\";\nimport { TimeoutError } from \"./TimeoutError\";\nimport { getCachedDefaultHttpClient } from \"../utils/cachedClient\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport type { DiagnosticNodeInternal } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n\nconst logger: AzureLogger = createClientLogger(\"RequestHandler\");\n\nasync function executeRequest(\n  diagnosticNode: DiagnosticNodeInternal,\n  requestContext: RequestContext,\n): Promise<CosmosResponse<any>> {\n  return executePlugins(diagnosticNode, requestContext, httpRequest, PluginOn.request);\n}\n\n/**\n * @hidden\n */\nasync function httpRequest(\n  requestContext: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal,\n): Promise<{\n  headers: any;\n  result: any;\n  code: number;\n  substatus: number;\n}> {\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  // Wrap users passed abort events and call our own internal abort()\n  const userSignal = requestContext.options && requestContext.options.abortSignal;\n  if (userSignal) {\n    if (userSignal.aborted) {\n      controller.abort();\n    } else {\n      userSignal.addEventListener(\"abort\", () => {\n        controller.abort();\n      });\n    }\n  }\n\n  const timeout = setTimeout(() => {\n    controller.abort();\n  }, requestContext.connectionPolicy.requestTimeout);\n\n  let response: PipelineResponse;\n\n  if (requestContext.body) {\n    requestContext.body = bodyFromData(requestContext.body);\n  }\n\n  const httpsClient = requestContext.httpClient ?? getCachedDefaultHttpClient();\n  const url = prepareURL(requestContext.endpoint, requestContext.path);\n  const reqHeaders = createHttpHeaders(requestContext.headers as any);\n  const pipelineRequest = createPipelineRequest({\n    url,\n    headers: reqHeaders,\n    method: requestContext.method,\n    abortSignal: signal,\n    body: requestContext.body,\n  });\n  if (requestContext.requestAgent) {\n    pipelineRequest.agent = requestContext.requestAgent;\n  } else {\n    const parsedUrl = new URL(url);\n    pipelineRequest.agent = parsedUrl.protocol === \"http:\" ? defaultHttpAgent : defaultHttpsAgent;\n    pipelineRequest.allowInsecureConnection = parsedUrl.protocol === \"http:\";\n  }\n\n  const startTimeUTCInMs = getCurrentTimestampInMs();\n  try {\n    if (requestContext.pipeline) {\n      response = await requestContext.pipeline.sendRequest(httpsClient, pipelineRequest);\n    } else {\n      response = await httpsClient.sendRequest(pipelineRequest);\n    }\n  } catch (error: any) {\n    if (error.name === \"AbortError\") {\n      // If the user passed signal caused the abort, cancel the timeout and rethrow the error\n      if (userSignal && userSignal.aborted === true) {\n        clearTimeout(timeout);\n        throw error;\n      }\n      // If the user didn't cancel, it must be an abort we called due to timeout\n      throw new TimeoutError(\n        `Timeout Error! Request took more than ${requestContext.connectionPolicy.requestTimeout} ms`,\n      );\n    }\n    throw error;\n  }\n\n  clearTimeout(timeout);\n  const result =\n    response.status === 204 || response.status === 304 || response.bodyAsText === \"\"\n      ? null\n      : JSON.parse(response.bodyAsText);\n  const responseHeaders = response.headers.toJSON();\n\n  const substatus = responseHeaders[Constants.HttpHeaders.SubStatus]\n    ? parseInt(responseHeaders[Constants.HttpHeaders.SubStatus], 10)\n    : undefined;\n\n  diagnosticNode.recordSuccessfulNetworkCall(\n    startTimeUTCInMs,\n    requestContext,\n    response,\n    substatus,\n    url,\n  );\n\n  if (response.status >= 400) {\n    const errorResponse: ErrorResponse = new ErrorResponse(result.message);\n    logger.warning(\n      response.status +\n        \" \" +\n        requestContext.endpoint +\n        \" \" +\n        requestContext.path +\n        \" \" +\n        result.message,\n    );\n\n    errorResponse.code = response.status;\n    errorResponse.body = result;\n    errorResponse.headers = responseHeaders;\n\n    if (Constants.HttpHeaders.ActivityId in responseHeaders) {\n      errorResponse.activityId = responseHeaders[Constants.HttpHeaders.ActivityId];\n    }\n\n    if (Constants.HttpHeaders.SubStatus in responseHeaders) {\n      errorResponse.substatus = substatus;\n    }\n\n    if (Constants.HttpHeaders.RetryAfterInMs in responseHeaders) {\n      errorResponse.retryAfterInMs = parseInt(\n        responseHeaders[Constants.HttpHeaders.RetryAfterInMs],\n        10,\n      );\n      Object.defineProperty(errorResponse, \"retryAfterInMilliseconds\", {\n        get: () => {\n          return errorResponse.retryAfterInMs;\n        },\n      });\n    }\n\n    throw errorResponse;\n  }\n  return {\n    headers: responseHeaders,\n    result,\n    code: response.status,\n    substatus,\n  };\n}\n\n/**\n * @hidden\n */\nasync function request<T>(\n  requestContext: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal,\n): Promise<CosmosResponse<T>> {\n  if (requestContext.body) {\n    requestContext.body = bodyFromData(requestContext.body);\n    if (!requestContext.body) {\n      throw new Error(\"parameter data must be a javascript object, string, or Buffer\");\n    }\n  }\n\n  return addDignosticChild(\n    async (childNode: DiagnosticNodeInternal) => {\n      return RetryUtility.execute({\n        diagnosticNode: childNode,\n        requestContext,\n        executeRequest,\n      });\n    },\n    diagnosticNode,\n    DiagnosticNodeType.REQUEST_ATTEMPTS,\n  );\n}\n\nexport const RequestHandler = {\n  request,\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport default function atob(str: string): string {\n  return Buffer.from(str, \"base64\").toString(\"binary\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Models vector clock bases session token. Session token has the following format:\n * `{Version}#{GlobalLSN}#{RegionId1}={LocalLsn1}#{RegionId2}={LocalLsn2}....#{RegionIdN}={LocalLsnN}`\n * 'Version' captures the configuration number of the partition which returned this session token.\n * 'Version' is incremented everytime topology of the partition is updated (say due to Add/Remove/Failover).\n *\n * The choice of separators '#' and '=' is important. Separators ';' and ',' are used to delimit\n * per-partitionKeyRange session token\n * @hidden\n *\n */\nexport class VectorSessionToken {\n  private static readonly SEGMENT_SEPARATOR = \"#\";\n  private static readonly REGION_PROGRESS_SEPARATOR = \"=\";\n\n  constructor(\n    private readonly version: number,\n    private readonly globalLsn: number,\n    private readonly localLsnByregion: Map<number, string>,\n    private readonly sessionToken?: string,\n  ) {\n    if (!this.sessionToken) {\n      const regionAndLocalLsn = [];\n      for (const [key, value] of this.localLsnByregion.entries()) {\n        regionAndLocalLsn.push(`${key}${VectorSessionToken.REGION_PROGRESS_SEPARATOR}${value}`);\n      }\n      const regionProgress = regionAndLocalLsn.join(VectorSessionToken.SEGMENT_SEPARATOR);\n      if (regionProgress === \"\") {\n        this.sessionToken = `${this.version}${VectorSessionToken.SEGMENT_SEPARATOR}${this.globalLsn}`;\n      } else {\n        this.sessionToken = `${this.version}${VectorSessionToken.SEGMENT_SEPARATOR}${this.globalLsn}${VectorSessionToken.SEGMENT_SEPARATOR}${regionProgress}`;\n      }\n    }\n  }\n\n  public static create(sessionToken: string): VectorSessionToken | null {\n    const [versionStr, globalLsnStr, ...regionSegments] = sessionToken.split(\n      VectorSessionToken.SEGMENT_SEPARATOR,\n    );\n\n    const version = parseInt(versionStr, 10);\n    const globalLsn = parseFloat(globalLsnStr);\n\n    if (typeof version !== \"number\" || typeof globalLsn !== \"number\") {\n      return null;\n    }\n\n    const lsnByRegion = new Map<number, string>();\n    for (const regionSegment of regionSegments) {\n      const [regionIdStr, localLsnStr] = regionSegment.split(\n        VectorSessionToken.REGION_PROGRESS_SEPARATOR,\n      );\n\n      if (!regionIdStr || !localLsnStr) {\n        return null;\n      }\n\n      const regionId = parseInt(regionIdStr, 10);\n      let localLsn: string;\n      try {\n        localLsn = localLsnStr;\n      } catch (err: any) {\n        // TODO: log error\n        return null;\n      }\n      if (typeof regionId !== \"number\") {\n        return null;\n      }\n\n      lsnByRegion.set(regionId, localLsn);\n    }\n\n    return new VectorSessionToken(version, globalLsn, lsnByRegion, sessionToken);\n  }\n\n  public equals(other: VectorSessionToken): boolean {\n    return !other\n      ? false\n      : this.version === other.version &&\n          this.globalLsn === other.globalLsn &&\n          this.areRegionProgressEqual(other.localLsnByregion);\n  }\n\n  public merge(other: VectorSessionToken): VectorSessionToken {\n    if (other == null) {\n      throw new Error(\"other (Vector Session Token) must not be null\");\n    }\n\n    if (\n      this.version === other.version &&\n      this.localLsnByregion.size !== other.localLsnByregion.size\n    ) {\n      throw new Error(\n        `Compared session tokens ${this.sessionToken} and ${other.sessionToken} have unexpected regions`,\n      );\n    }\n\n    const [higherVersionSessionToken, lowerVersionSessionToken]: [\n      VectorSessionToken,\n      VectorSessionToken,\n    ] = this.version < other.version ? [other, this] : [this, other];\n\n    const highestLocalLsnByRegion = new Map<number, string>();\n\n    for (const [regionId, highLocalLsn] of higherVersionSessionToken.localLsnByregion.entries()) {\n      const lowLocalLsn = lowerVersionSessionToken.localLsnByregion.get(regionId);\n      if (lowLocalLsn) {\n        highestLocalLsnByRegion.set(regionId, max(highLocalLsn, lowLocalLsn));\n      } else if (this.version === other.version) {\n        throw new Error(\n          `Compared session tokens have unexpected regions. Session 1: ${this.sessionToken} - Session 2: ${this.sessionToken}`,\n        );\n      } else {\n        highestLocalLsnByRegion.set(regionId, highLocalLsn);\n      }\n    }\n\n    return new VectorSessionToken(\n      Math.max(this.version, other.version),\n      Math.max(this.globalLsn, other.globalLsn),\n      highestLocalLsnByRegion,\n    );\n  }\n\n  public toString(): string | undefined {\n    return this.sessionToken;\n  }\n\n  private areRegionProgressEqual(other: Map<number, string>): boolean {\n    if (this.localLsnByregion.size !== other.size) {\n      return false;\n    }\n\n    for (const [regionId, localLsn] of this.localLsnByregion.entries()) {\n      const otherLocalLsn = other.get(regionId);\n\n      if (localLsn !== otherLocalLsn) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\n * @hidden\n */\nfunction max(int1: string, int2: string): string {\n  // NOTE: This only works for positive numbers\n  if (int1.length === int2.length) {\n    return int1 > int2 ? int1 : int2;\n  } else if (int1.length > int2.length) {\n    return int1;\n  } else {\n    return int2;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport atob from \"../utils/atob\";\nimport type { ResourceType } from \"../common\";\nimport { Constants, getContainerLink, OperationType, trimSlashes } from \"../common\";\nimport type { CosmosHeaders } from \"../queryExecutionContext\";\nimport type { SessionContext } from \"./SessionContext\";\nimport { VectorSessionToken } from \"./VectorSessionToken\";\n\n/** @hidden */\nexport class SessionContainer {\n  private static readonly EMPTY_SESSION_TOKEN = \"\";\n  private static readonly SESSION_TOKEN_SEPARATOR = \",\";\n  private static readonly SESSION_TOKEN_PARTITION_SPLITTER = \":\";\n  constructor(\n    private collectionNameToCollectionResourceId = new Map<string, string>(),\n    private collectionResourceIdToSessionTokens = new Map<\n      string,\n      Map<string, VectorSessionToken>\n    >(),\n  ) {}\n\n  public get(request: SessionContext): string {\n    if (!request) {\n      throw new Error(\"request cannot be null\");\n    }\n    const collectionName = getContainerLink(trimSlashes(request.resourceAddress));\n    const rangeIdToTokenMap = this.getPartitionKeyRangeIdToTokenMap(collectionName);\n    return SessionContainer.getCombinedSessionTokenString(rangeIdToTokenMap);\n  }\n\n  public remove(request: SessionContext): void {\n    let collectionResourceId: string;\n    const resourceAddress = trimSlashes(request.resourceAddress);\n    const collectionName = getContainerLink(resourceAddress);\n    if (collectionName) {\n      collectionResourceId = this.collectionNameToCollectionResourceId.get(collectionName);\n      this.collectionNameToCollectionResourceId.delete(collectionName);\n    }\n    if (collectionResourceId !== undefined) {\n      this.collectionResourceIdToSessionTokens.delete(collectionResourceId);\n    }\n  }\n\n  public set(request: SessionContext, resHeaders: CosmosHeaders): void {\n    // TODO: we check the master logic a few different places. Might not need it.\n    if (\n      !resHeaders ||\n      SessionContainer.isReadingFromMaster(request.resourceType, request.operationType)\n    ) {\n      return;\n    }\n\n    const sessionTokenString = resHeaders[Constants.HttpHeaders.SessionToken];\n    if (!sessionTokenString) {\n      return;\n    }\n\n    const containerName = this.getContainerName(request, resHeaders);\n\n    const ownerId = !request.isNameBased\n      ? request.resourceId\n      : resHeaders[Constants.HttpHeaders.OwnerId] || request.resourceId;\n\n    if (!ownerId) {\n      return;\n    }\n\n    if (containerName && this.validateOwnerID(ownerId)) {\n      if (!this.collectionResourceIdToSessionTokens.has(ownerId)) {\n        this.collectionResourceIdToSessionTokens.set(ownerId, new Map());\n      }\n\n      if (!this.collectionNameToCollectionResourceId.has(containerName)) {\n        this.collectionNameToCollectionResourceId.set(containerName, ownerId);\n      }\n\n      const containerSessionContainer = this.collectionResourceIdToSessionTokens.get(ownerId);\n      SessionContainer.compareAndSetToken(sessionTokenString, containerSessionContainer);\n    }\n  }\n\n  private validateOwnerID(ownerId: string): boolean {\n    // If ownerId contains exactly 8 bytes it represents a unique database+collection identifier. Otherwise it represents another resource\n    // The first 4 bytes are the database. The last 4 bytes are the collection.\n    // Cosmos rids potentially contain \"-\" which is an invalid character in the browser atob implementation\n    // See https://en.wikipedia.org/wiki/Base64#Filenames\n    return atob(ownerId.replace(/-/g, \"/\")).length === 8;\n  }\n\n  private getPartitionKeyRangeIdToTokenMap(\n    collectionName: string,\n  ): Map<string, VectorSessionToken> {\n    let rangeIdToTokenMap: Map<string, VectorSessionToken> = null;\n    if (collectionName && this.collectionNameToCollectionResourceId.has(collectionName)) {\n      rangeIdToTokenMap = this.collectionResourceIdToSessionTokens.get(\n        this.collectionNameToCollectionResourceId.get(collectionName),\n      );\n    }\n\n    return rangeIdToTokenMap;\n  }\n\n  private static getCombinedSessionTokenString(tokens: Map<string, VectorSessionToken>): string {\n    if (!tokens || tokens.size === 0) {\n      return SessionContainer.EMPTY_SESSION_TOKEN;\n    }\n\n    let result = \"\";\n    for (const [range, token] of tokens.entries()) {\n      result +=\n        range +\n        SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER +\n        token.toString() +\n        SessionContainer.SESSION_TOKEN_SEPARATOR;\n    }\n    return result.slice(0, -1);\n  }\n\n  private static compareAndSetToken(\n    newTokenString: string,\n    containerSessionTokens: Map<string, VectorSessionToken>,\n  ): void {\n    if (!newTokenString) {\n      return;\n    }\n\n    const partitionsParts = newTokenString.split(SessionContainer.SESSION_TOKEN_SEPARATOR);\n    for (const partitionPart of partitionsParts) {\n      const newTokenParts = partitionPart.split(SessionContainer.SESSION_TOKEN_PARTITION_SPLITTER);\n      if (newTokenParts.length !== 2) {\n        return;\n      }\n\n      const range = newTokenParts[0];\n      const newToken = VectorSessionToken.create(newTokenParts[1]);\n      const tokenForRange = !containerSessionTokens.get(range)\n        ? newToken\n        : containerSessionTokens.get(range).merge(newToken);\n      containerSessionTokens.set(range, tokenForRange);\n    }\n  }\n\n  // TODO: have a assert if the type doesn't mastch known types\n  private static isReadingFromMaster(\n    resourceType: ResourceType,\n    operationType: OperationType,\n  ): boolean {\n    if (\n      resourceType === Constants.Path.OffersPathSegment ||\n      resourceType === Constants.Path.DatabasesPathSegment ||\n      resourceType === Constants.Path.UsersPathSegment ||\n      resourceType === Constants.Path.PermissionsPathSegment ||\n      resourceType === Constants.Path.TopologyPathSegment ||\n      resourceType === Constants.Path.DatabaseAccountPathSegment ||\n      resourceType === Constants.Path.PartitionKeyRangesPathSegment ||\n      (resourceType === Constants.Path.CollectionsPathSegment &&\n        operationType === OperationType.Query)\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private getContainerName(request: SessionContext, headers: CosmosHeaders): string {\n    let ownerFullName = headers[Constants.HttpHeaders.OwnerFullName];\n    if (!ownerFullName) {\n      ownerFullName = trimSlashes(request.resourceAddress);\n    }\n\n    return getContainerLink(ownerFullName as string);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport function checkURL(testString: string): URL {\n  return new URL(testString);\n}\n\nexport function sanitizeEndpoint(url: string): string {\n  return new URL(url).href.replace(/\\/$/, \"\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { QueryFeature } from \"../common\";\n\nexport function supportedQueryFeaturesBuilder(disableNonStreamingOrderByQuery?: boolean): string {\n  if (disableNonStreamingOrderByQuery) {\n    return Object.keys(QueryFeature)\n      .filter((k) => k !== QueryFeature.NonStreamingOrderBy)\n      .join(\", \");\n  } else {\n    return Object.keys(QueryFeature).join(\", \");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * Interface for a Diagnostic Writer.\n * @hidden\n */\nexport interface DiagnosticWriter {\n  write(message: string): Promise<void>;\n}\n\n/**\n * Implementation of DiagnosticWriter, which uses \\@azure/logger to write\n * diagnostics.\n * @hidden\n */\nexport class LogDiagnosticWriter implements DiagnosticWriter {\n  private logger: AzureLogger = createClientLogger(\"CosmosDBDiagnostics\");\n  public async write(diagnosticsData: string): Promise<void> {\n    this.logger.verbose(diagnosticsData);\n  }\n}\n\n/**\n * Implementation of a no-op DiagnosticWriter.\n * @hidden\n */\nexport class NoOpDiagnosticWriter implements DiagnosticWriter {\n  public async write(_diagnosticsData: string): Promise<void> {\n    // No op\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CosmosDiagnostics } from \"../CosmosDiagnostics\";\n\nexport interface DiagnosticFormatter {\n  format(cosmosDiagnostic: CosmosDiagnostics): string;\n}\n\nexport class DefaultDiagnosticFormatter implements DiagnosticFormatter {\n  format(cosmosDiagnostic: CosmosDiagnostics): string {\n    return JSON.stringify(cosmosDiagnostic);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"./constants\";\n\n/**\n * @hidden\n */\nexport function getUserAgent(suffix?: string, hostFramework?: string): string {\n  let ua = `${userAgentDetails()} ${Constants.SDKName}/${Constants.SDKVersion}`;\n  if (hostFramework) {\n    ua = ua + \" \" + hostFramework;\n  }\n  if (suffix) {\n    ua = ua + \" \" + suffix;\n  }\n\n  return ua;\n}\n\n// TODO: Standardize across other platforms from @azure/core-util\nfunction userAgentDetails(): string {\n  let userAgentDetail = \"<environment undetectable>\";\n\n  if (globalThis.navigator && globalThis.navigator.userAgent) {\n    userAgentDetail = globalThis.navigator.userAgent;\n  }\n\n  if (globalThis.process && globalThis.process.version) {\n    userAgentDetail = `Node.js/${process.version.slice(1)} (${process.platform}; ${process.arch})`;\n  }\n\n  return userAgentDetail;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { HttpClient, Pipeline } from \"@azure/core-rest-pipeline\";\nimport { bearerTokenAuthenticationPolicy, createEmptyPipeline } from \"@azure/core-rest-pipeline\";\nimport type { PartitionKeyRange } from \"./client/Container/PartitionKeyRange\";\nimport type { Resource } from \"./client/Resource\";\nimport { Constants, HTTPMethod, OperationType, ResourceType } from \"./common/constants\";\nimport { getIdFromLink, getPathFromLink, parseLink } from \"./common/helper\";\nimport { StatusCodes, SubStatusCodes } from \"./common/statusCodes\";\nimport type { Agent, CosmosClientOptions } from \"./CosmosClientOptions\";\nimport type { ConnectionPolicy, PartitionKey } from \"./documents\";\nimport { ConsistencyLevel, DatabaseAccount, convertToInternalPartitionKey } from \"./documents\";\nimport type { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport type { PluginConfig } from \"./plugins/Plugin\";\nimport { PluginOn, executePlugins } from \"./plugins/Plugin\";\nimport type { FetchFunctionCallback, SqlQuerySpec } from \"./queryExecutionContext\";\nimport type { CosmosHeaders } from \"./queryExecutionContext/CosmosHeaders\";\nimport { QueryIterator } from \"./queryIterator\";\nimport type { ErrorResponse } from \"./request\";\nimport type { FeedOptions, RequestOptions, Response } from \"./request\";\nimport type { PartitionedQueryExecutionInfo } from \"./request/ErrorResponse\";\nimport { getHeaders } from \"./request/request\";\nimport type { RequestContext } from \"./request/RequestContext\";\nimport { RequestHandler } from \"./request/RequestHandler\";\nimport { SessionContainer } from \"./session/sessionContainer\";\nimport type { SessionContext } from \"./session/SessionContext\";\nimport type { BulkOptions } from \"./utils/batch\";\nimport { sanitizeEndpoint } from \"./utils/checkURL\";\nimport { supportedQueryFeaturesBuilder } from \"./utils/supportedQueryFeaturesBuilder\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport { createClientLogger } from \"@azure/logger\";\nimport type { ClientConfigDiagnostic, CosmosDiagnostics } from \"./CosmosDiagnostics\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport type { DiagnosticWriter } from \"./diagnostics/DiagnosticWriter\";\nimport { LogDiagnosticWriter, NoOpDiagnosticWriter } from \"./diagnostics/DiagnosticWriter\";\nimport type { DiagnosticFormatter } from \"./diagnostics/DiagnosticFormatter\";\nimport { DefaultDiagnosticFormatter } from \"./diagnostics/DiagnosticFormatter\";\nimport { CosmosDbDiagnosticLevel } from \"./diagnostics/CosmosDbDiagnosticLevel\";\nimport { randomUUID } from \"@azure/core-util\";\nimport { getUserAgent } from \"./common/platform\";\nconst logger: AzureLogger = createClientLogger(\"ClientContext\");\n\nconst QueryJsonContentType = \"application/query+json\";\nconst HttpHeaders = Constants.HttpHeaders;\n/**\n * @hidden\n * @hidden\n */\nexport class ClientContext {\n  private readonly sessionContainer: SessionContainer;\n  private connectionPolicy: ConnectionPolicy;\n  private pipeline: Pipeline;\n  private diagnosticWriter: DiagnosticWriter;\n  private diagnosticFormatter: DiagnosticFormatter;\n  public partitionKeyDefinitionCache: { [containerUrl: string]: any }; // TODO: PartitionKeyDefinitionCache\n  /** boolean flag to support operations with client-side encryption */\n  public enableEncryption: boolean = false;\n\n  public constructor(\n    private cosmosClientOptions: CosmosClientOptions,\n    private globalEndpointManager: GlobalEndpointManager,\n    private clientConfig: ClientConfigDiagnostic,\n    public diagnosticLevel: CosmosDbDiagnosticLevel,\n  ) {\n    if (cosmosClientOptions.clientEncryptionOptions) {\n      this.enableEncryption = true;\n    }\n    this.connectionPolicy = cosmosClientOptions.connectionPolicy;\n    this.sessionContainer = new SessionContainer();\n    this.partitionKeyDefinitionCache = {};\n    this.pipeline = null;\n    if (cosmosClientOptions.aadCredentials) {\n      this.pipeline = createEmptyPipeline();\n      const hrefEndpoint = sanitizeEndpoint(cosmosClientOptions.endpoint);\n      const scope = `${hrefEndpoint}/.default`;\n      this.pipeline.addPolicy(\n        bearerTokenAuthenticationPolicy({\n          credential: cosmosClientOptions.aadCredentials,\n          scopes: scope,\n          challengeCallbacks: {\n            async authorizeRequest({ request, getAccessToken }) {\n              const tokenResponse = await getAccessToken([scope], {});\n              const AUTH_PREFIX = `type=aad&ver=1.0&sig=`;\n              const authorizationToken = `${AUTH_PREFIX}${tokenResponse.token}`;\n              request.headers.set(\"Authorization\", authorizationToken);\n            },\n          },\n        }),\n      );\n    }\n    this.initializeDiagnosticSettings(diagnosticLevel);\n  }\n  /** @hidden */\n  public async read<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.get,\n        path,\n        operationType: OperationType.Read,\n        resourceId,\n        options,\n        resourceType,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Read,\n        resourceType,\n      });\n\n      request.headers = await this.buildHeaders(request);\n      if (resourceType === ResourceType.clientencryptionkey) {\n        request.headers[HttpHeaders.AllowCachedReadsHeader] = true;\n        if (options.databaseRid) {\n          request.headers[HttpHeaders.DatabaseRidHeader] = options.databaseRid;\n        }\n      }\n      this.applySessionToken(request);\n\n      // read will use ReadEndpoint since it uses GET operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Read, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async queryFeed<T>({\n    path,\n    resourceType,\n    resourceId,\n    resultFn,\n    query,\n    options,\n    diagnosticNode,\n    partitionKeyRangeId,\n    partitionKey,\n    startEpk,\n    endEpk,\n    correlatedActivityId,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    resultFn: (result: { [key: string]: any }) => any[];\n    query: SqlQuerySpec | string;\n    options: FeedOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n    partitionKeyRangeId?: string;\n    partitionKey?: PartitionKey;\n    startEpk?: string | undefined;\n    endEpk?: string | undefined;\n    correlatedActivityId?: string;\n  }): Promise<Response<T & Resource>> {\n    // Query operations will use ReadEndpoint even though it uses\n    // GET(for queryFeed) and POST(for regular query operations)\n\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.get,\n      path,\n      operationType: OperationType.Query,\n      partitionKeyRangeId,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n      partitionKey,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Query,\n      resourceType,\n    });\n    const requestId = randomUUID();\n    if (query !== undefined) {\n      request.method = HTTPMethod.post;\n    }\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType,\n    );\n    request.headers = await this.buildHeaders(request);\n\n    if (startEpk !== undefined && endEpk !== undefined) {\n      request.headers[HttpHeaders.StartEpk] = startEpk;\n      request.headers[HttpHeaders.EndEpk] = endEpk;\n      request.headers[HttpHeaders.ReadFeedKeyType] = \"EffectivePartitionKeyRange\";\n    }\n\n    if (query !== undefined) {\n      if (correlatedActivityId !== undefined) {\n        request.headers[HttpHeaders.CorrelatedActivityId] = correlatedActivityId;\n      }\n      request.headers[HttpHeaders.IsQuery] = \"true\";\n      request.headers[HttpHeaders.ContentType] = QueryJsonContentType;\n      if (typeof query === \"string\") {\n        request.body = { query }; // Converts query text to query object.\n      }\n    }\n    this.applySessionToken(request);\n    logger.info(\n      \"query \" +\n        requestId +\n        \" started\" +\n        (request.partitionKeyRangeId ? \" pkrid: \" + request.partitionKeyRangeId : \"\"),\n    );\n    logger.verbose(request);\n    const start = Date.now();\n    const response = await RequestHandler.request(request, diagnosticNode);\n    logger.info(\"query \" + requestId + \" finished - \" + (Date.now() - start) + \"ms\");\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return this.processQueryFeedResponse(response, !!query, resultFn);\n  }\n\n  public async getQueryPlan(\n    path: string,\n    resourceType: ResourceType,\n    resourceId: string,\n    query: SqlQuerySpec | string,\n    options: FeedOptions = {},\n    diagnosticNode: DiagnosticNodeInternal,\n    correlatedActivityId?: string,\n  ): Promise<Response<PartitionedQueryExecutionInfo>> {\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.post,\n      path,\n      operationType: OperationType.Read,\n      resourceId,\n      resourceType,\n      options,\n      body: query,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Read,\n      resourceType,\n    });\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType,\n    );\n    request.headers = await this.buildHeaders(request);\n    if (correlatedActivityId !== undefined) {\n      request.headers[HttpHeaders.CorrelatedActivityId] = correlatedActivityId;\n    }\n    request.headers[HttpHeaders.IsQueryPlan] = \"True\";\n    request.headers[HttpHeaders.QueryVersion] = \"1.4\";\n    request.headers[HttpHeaders.ContentType] = QueryJsonContentType;\n    request.headers[HttpHeaders.SupportedQueryFeatures] = supportedQueryFeaturesBuilder(\n      options.disableNonStreamingOrderByQuery,\n    );\n\n    if (typeof query === \"string\") {\n      request.body = { query }; // Converts query text to query object.\n    }\n\n    this.applySessionToken(request);\n    const response = await RequestHandler.request(request, diagnosticNode);\n    this.captureSessionToken(undefined, path, OperationType.Query, response.headers);\n    return response as any;\n  }\n\n  public queryPartitionKeyRanges(\n    collectionLink: string,\n    query?: string | SqlQuerySpec,\n    options?: FeedOptions,\n  ): QueryIterator<PartitionKeyRange> {\n    const path = getPathFromLink(collectionLink, ResourceType.pkranges);\n    const id = getIdFromLink(collectionLink);\n    const cb: FetchFunctionCallback = async (diagNode, innerOptions) => {\n      const response = await this.queryFeed({\n        path,\n        resourceType: ResourceType.pkranges,\n        resourceId: id,\n        resultFn: (result) => result.PartitionKeyRanges,\n        query,\n        options: innerOptions,\n        diagnosticNode: diagNode,\n      });\n      return response;\n    };\n    return new QueryIterator<PartitionKeyRange>(this, query, options, cb);\n  }\n\n  public async delete<T>({\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    method = HTTPMethod.delete,\n    diagnosticNode,\n  }: {\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    method?: HTTPMethod;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: method,\n        operationType: OperationType.Delete,\n        path,\n        resourceType,\n        options,\n        resourceId,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Delete,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n      // deleteResource will use WriteEndpoint since it uses DELETE operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      if (parseLink(path).type !== \"colls\") {\n        this.captureSessionToken(undefined, path, OperationType.Delete, response.headers);\n      } else {\n        this.clearSessionToken(path);\n      }\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async patch<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.patch,\n        operationType: OperationType.Patch,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Patch,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // patch will use WriteEndpoint\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Patch, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async create<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    diagnosticNode,\n    options = {},\n    partitionKey,\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    diagnosticNode: DiagnosticNodeInternal;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Create,\n        path,\n        resourceType,\n        resourceId,\n        body,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Create,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      // create will use WriteEndpoint since it uses POST operation\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Create, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private processQueryFeedResponse(\n    res: Response<any>,\n    isQuery: boolean,\n    resultFn: (result: { [key: string]: any }) => any[],\n  ): Response<any> {\n    if (isQuery) {\n      return {\n        result: resultFn(res.result),\n        headers: res.headers,\n        code: res.code,\n      };\n    } else {\n      const newResult = resultFn(res.result).map((body: any) => body);\n      return {\n        result: newResult,\n        headers: res.headers,\n        code: res.code,\n      };\n    }\n  }\n\n  private applySessionToken(requestContext: RequestContext): void {\n    const request = this.getSessionParams(requestContext.path);\n\n    if (requestContext.headers && requestContext.headers[HttpHeaders.SessionToken]) {\n      return;\n    }\n\n    const sessionConsistency: ConsistencyLevel = requestContext.headers[\n      HttpHeaders.ConsistencyLevel\n    ] as ConsistencyLevel;\n    if (!sessionConsistency) {\n      return;\n    }\n\n    if (sessionConsistency !== ConsistencyLevel.Session) {\n      return;\n    }\n\n    if (request.resourceAddress) {\n      const sessionToken = this.sessionContainer.get(request);\n      if (sessionToken) {\n        requestContext.headers[HttpHeaders.SessionToken] = sessionToken;\n      }\n    }\n  }\n\n  public async replace<T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: any;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.put,\n        operationType: OperationType.Replace,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Replace,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      this.applySessionToken(request);\n\n      // replace will use WriteEndpoint since it uses PUT operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Replace, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async upsert<T, U = T>({\n    body,\n    path,\n    resourceType,\n    resourceId,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    resourceType: ResourceType;\n    resourceId: string;\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T & U & Resource>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Upsert,\n        path,\n        resourceType,\n        body,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Upsert,\n        resourceType,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsUpsert] = true;\n      this.applySessionToken(request);\n\n      // upsert will use WriteEndpoint since it uses POST operation\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Upsert, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async execute<T>({\n    sprocLink,\n    params,\n    options = {},\n    partitionKey,\n    diagnosticNode,\n  }: {\n    sprocLink: string;\n    params?: any[];\n    options?: RequestOptions;\n    partitionKey?: PartitionKey;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<T>> {\n    // Accept a single parameter or an array of parameters.\n    // Didn't add type annotation for this because we should legacy this behavior\n    if (params !== null && params !== undefined && !Array.isArray(params)) {\n      params = [params];\n    }\n    const path = getPathFromLink(sprocLink);\n    const id = getIdFromLink(sprocLink);\n\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      method: HTTPMethod.post,\n      operationType: OperationType.Execute,\n      path,\n      resourceType: ResourceType.sproc,\n      options,\n      resourceId: id,\n      body: params,\n      partitionKey,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Execute,\n      resourceType: ResourceType.sproc,\n    });\n    request.headers = await this.buildHeaders(request);\n    // executeStoredProcedure will use WriteEndpoint since it uses POST operation\n    request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n      diagnosticNode,\n      request.resourceType,\n      request.operationType,\n    );\n    const response = await executePlugins(\n      diagnosticNode,\n      request,\n      RequestHandler.request,\n      PluginOn.operation,\n    );\n    return response;\n  }\n\n  /**\n   * Gets the Database account information.\n   * @param options - `urlConnection` in the options is the endpoint url whose database account needs to be retrieved.\n   * If not present, current client's url will be used.\n   */\n  public async getDatabaseAccount(\n    diagnosticNode: DiagnosticNodeInternal,\n    options: RequestOptions = {},\n  ): Promise<Response<DatabaseAccount>> {\n    const endpoint = options.urlConnection || this.cosmosClientOptions.endpoint;\n    const request: RequestContext = {\n      ...this.getContextDerivedPropsForRequestCreation(),\n      endpoint,\n      method: HTTPMethod.get,\n      operationType: OperationType.Read,\n      path: \"\",\n      resourceType: ResourceType.none,\n      options,\n    };\n    diagnosticNode.addData({\n      operationType: OperationType.Read,\n      resourceType: ResourceType.none,\n    });\n    request.headers = await this.buildHeaders(request);\n    // await options.beforeOperation({ endpoint, request, headers: requestHeaders });\n    const { result, headers, code, substatus, diagnostics } = await executePlugins(\n      diagnosticNode,\n      request,\n      RequestHandler.request,\n      PluginOn.operation,\n    );\n\n    const databaseAccount = new DatabaseAccount(result, headers);\n    return {\n      result: databaseAccount,\n      headers,\n      diagnostics,\n      code: code,\n      substatus: substatus,\n    };\n  }\n\n  public getWriteEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.globalEndpointManager.getWriteEndpoint(diagnosticNode);\n  }\n\n  public getReadEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.globalEndpointManager.getReadEndpoint(diagnosticNode);\n  }\n\n  public getWriteEndpoints(): Promise<readonly string[]> {\n    return this.globalEndpointManager.getWriteEndpoints();\n  }\n\n  public getReadEndpoints(): Promise<readonly string[]> {\n    return this.globalEndpointManager.getReadEndpoints();\n  }\n\n  public async batch<T>({\n    body,\n    path,\n    partitionKey,\n    resourceId,\n    options = {},\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    partitionKey: PartitionKey;\n    resourceId: string;\n    options?: RequestOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<any>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Batch,\n        path,\n        body,\n        resourceType: ResourceType.item,\n        resourceId,\n        options,\n        partitionKey,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Batch,\n        resourceType: ResourceType.item,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsBatchRequest] = true;\n      request.headers[HttpHeaders.IsBatchAtomic] = true;\n\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Batch, response.headers);\n      response.diagnostics = diagnosticNode.toDiagnostic(this.getClientConfig());\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  public async bulk<T>({\n    body,\n    path,\n    partitionKeyRangeId,\n    resourceId,\n    bulkOptions = {},\n    options = {},\n    diagnosticNode,\n  }: {\n    body: T;\n    path: string;\n    partitionKeyRangeId: string;\n    resourceId: string;\n    bulkOptions?: BulkOptions;\n    options?: RequestOptions;\n    diagnosticNode: DiagnosticNodeInternal;\n  }): Promise<Response<any>> {\n    try {\n      const request: RequestContext = {\n        ...this.getContextDerivedPropsForRequestCreation(),\n        method: HTTPMethod.post,\n        operationType: OperationType.Batch,\n        path,\n        body,\n        resourceType: ResourceType.item,\n        resourceId,\n        options,\n      };\n      diagnosticNode.addData({\n        operationType: OperationType.Batch,\n        resourceType: ResourceType.item,\n      });\n      request.headers = await this.buildHeaders(request);\n      request.headers[HttpHeaders.IsBatchRequest] = true;\n      request.headers[HttpHeaders.PartitionKeyRangeID] = partitionKeyRangeId;\n      request.headers[HttpHeaders.IsBatchAtomic] = false;\n      request.headers[HttpHeaders.BatchContinueOnError] = bulkOptions.continueOnError ?? true;\n      this.applySessionToken(request);\n\n      request.endpoint = await this.globalEndpointManager.resolveServiceEndpoint(\n        diagnosticNode,\n        request.resourceType,\n        request.operationType,\n      );\n      const response = await executePlugins(\n        diagnosticNode,\n        request,\n        RequestHandler.request,\n        PluginOn.operation,\n      );\n      this.captureSessionToken(undefined, path, OperationType.Batch, response.headers);\n      return response;\n    } catch (err: any) {\n      this.captureSessionToken(err, path, OperationType.Upsert, (err as ErrorResponse).headers);\n      throw err;\n    }\n  }\n\n  private captureSessionToken(\n    err: ErrorResponse,\n    path: string,\n    operationType: OperationType,\n    resHeaders: CosmosHeaders,\n  ): void {\n    const request = this.getSessionParams(path);\n    request.operationType = operationType;\n    if (\n      !err ||\n      (!this.isMasterResource(request.resourceType) &&\n        (err.code === StatusCodes.PreconditionFailed ||\n          err.code === StatusCodes.Conflict ||\n          (err.code === StatusCodes.NotFound &&\n            err.substatus !== SubStatusCodes.ReadSessionNotAvailable)))\n    ) {\n      this.sessionContainer.set(request, resHeaders);\n    }\n  }\n\n  public clearSessionToken(path: string): void {\n    const request = this.getSessionParams(path);\n    this.sessionContainer.remove(request);\n  }\n\n  public recordDiagnostics(diagnostic: CosmosDiagnostics): void {\n    const formatted = this.diagnosticFormatter.format(diagnostic);\n    this.diagnosticWriter.write(formatted);\n  }\n\n  public initializeDiagnosticSettings(diagnosticLevel: CosmosDbDiagnosticLevel): void {\n    this.diagnosticFormatter = new DefaultDiagnosticFormatter();\n    switch (diagnosticLevel) {\n      case CosmosDbDiagnosticLevel.info:\n        this.diagnosticWriter = new NoOpDiagnosticWriter();\n        break;\n      default:\n        this.diagnosticWriter = new LogDiagnosticWriter();\n    }\n  }\n\n  // TODO: move\n  private getSessionParams(resourceLink: string): SessionContext {\n    const resourceId: string = null;\n    let resourceAddress: string = null;\n    const parserOutput = parseLink(resourceLink);\n\n    resourceAddress = parserOutput.objectBody.self;\n\n    const resourceType = parserOutput.type;\n    return {\n      resourceId,\n      resourceAddress,\n      resourceType,\n      isNameBased: true,\n    };\n  }\n\n  private isMasterResource(resourceType: string): boolean {\n    if (\n      resourceType === Constants.Path.OffersPathSegment ||\n      resourceType === Constants.Path.DatabasesPathSegment ||\n      resourceType === Constants.Path.UsersPathSegment ||\n      resourceType === Constants.Path.PermissionsPathSegment ||\n      resourceType === Constants.Path.TopologyPathSegment ||\n      resourceType === Constants.Path.DatabaseAccountPathSegment ||\n      resourceType === Constants.Path.PartitionKeyRangesPathSegment ||\n      resourceType === Constants.Path.CollectionsPathSegment\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private buildHeaders(requestContext: RequestContext): Promise<CosmosHeaders> {\n    return getHeaders({\n      clientOptions: this.cosmosClientOptions,\n      defaultHeaders: {\n        ...this.cosmosClientOptions.defaultHeaders,\n        ...requestContext.options.initialHeaders,\n      },\n      verb: requestContext.method,\n      path: requestContext.path,\n      resourceId: requestContext.resourceId,\n      resourceType: requestContext.resourceType,\n      options: requestContext.options,\n      partitionKeyRangeId: requestContext.partitionKeyRangeId,\n      useMultipleWriteLocations: this.connectionPolicy.useMultipleWriteLocations,\n      partitionKey:\n        requestContext.partitionKey !== undefined\n          ? convertToInternalPartitionKey(requestContext.partitionKey)\n          : undefined, // TODO: Move this check from here to PartitionKey\n    });\n  }\n\n  /**\n   * Returns collection of properties which are derived from the context for Request Creation.\n   * These properties have client wide scope, as opposed to request specific scope.\n   * @returns\n   */\n  private getContextDerivedPropsForRequestCreation(): {\n    globalEndpointManager: GlobalEndpointManager;\n    connectionPolicy: ConnectionPolicy;\n    requestAgent: Agent;\n    client?: ClientContext;\n    pipeline?: Pipeline;\n    plugins: PluginConfig[];\n    httpClient?: HttpClient;\n  } {\n    return {\n      globalEndpointManager: this.globalEndpointManager,\n      requestAgent: this.cosmosClientOptions.agent,\n      connectionPolicy: this.connectionPolicy,\n      client: this,\n      plugins: this.cosmosClientOptions.plugins,\n      pipeline: this.pipeline,\n      httpClient: this.cosmosClientOptions.httpClient,\n    };\n  }\n\n  public getClientConfig(): ClientConfigDiagnostic {\n    return this.clientConfig;\n  }\n\n  /**\n   * @internal\n   */\n  public refreshUserAgent(hostFramework: string): void {\n    const updatedUserAgent = getUserAgent(this.cosmosClientOptions.userAgentSuffix, hostFramework);\n    this.cosmosClientOptions.defaultHeaders[Constants.HttpHeaders.UserAgent] = updatedUserAgent;\n    this.cosmosClientOptions.defaultHeaders[Constants.HttpHeaders.CustomUserAgent] =\n      updatedUserAgent;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nexport function isNonEmptyString(variable: unknown): boolean {\n  return typeof variable === \"string\" && variable.trim().length > 0;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport process from \"node:process\";\nimport { Constants } from \"../common/constants\";\n\nexport const diagnosticLevelFromEnv: string | undefined =\n  process.env[Constants.CosmosDbDiagnosticLevelEnvVarName];\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { Constants } from \"../common\";\nimport { isNonEmptyString } from \"../utils/strings\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\nimport { diagnosticLevelFromEnv } from \"../utils/envUtils\";\n\nexport * from \"./DiagnosticWriter\";\nexport * from \"./DiagnosticFormatter\";\n\nexport const DefaultDiagnosticLevelValue = CosmosDbDiagnosticLevel.info;\n\nconst acceptableDiagnosticLevelValues = Object.values(CosmosDbDiagnosticLevel).map((x) =>\n  x.toString(),\n);\n\nlet cosmosDiagnosticLevel: CosmosDbDiagnosticLevel | undefined;\n\nif (isNonEmptyString(diagnosticLevelFromEnv)) {\n  // avoid calling setDiagnosticLevel because we don't want a mis-set environment variable to crash\n  if (isCosmosDiagnosticLevel(diagnosticLevelFromEnv)) {\n    setDiagnosticLevel(diagnosticLevelFromEnv as CosmosDbDiagnosticLevel);\n  } else {\n    console.error(\n      `${\n        Constants.CosmosDbDiagnosticLevelEnvVarName\n      } set to unknown diagnostic level '${diagnosticLevelFromEnv}'; Setting Cosmos Db diagnostic level to info. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \", \",\n      )}.`,\n    );\n  }\n}\n\nexport function setDiagnosticLevel(level?: CosmosDbDiagnosticLevel): void {\n  if (level && !isCosmosDiagnosticLevel(level)) {\n    throw new Error(\n      `Unknown diagnostic level '${level}'. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \",\",\n      )}`,\n    );\n  }\n  cosmosDiagnosticLevel = level;\n}\n\nexport function getDiagnosticLevelFromEnvironment(): CosmosDbDiagnosticLevel | undefined {\n  return cosmosDiagnosticLevel;\n}\n\nfunction isCosmosDiagnosticLevel(\n  diagnosticLevel: string,\n): diagnosticLevel is CosmosDbDiagnosticLevel {\n  return acceptableDiagnosticLevelValues.includes(diagnosticLevel);\n}\n\nexport function determineDiagnosticLevel(\n  diagnosticLevelFromClientConfig: CosmosDbDiagnosticLevel,\n  diagnosticLevelFromEnvironment: CosmosDbDiagnosticLevel,\n): CosmosDbDiagnosticLevel {\n  const diagnosticLevelFromEnvOrClient =\n    diagnosticLevelFromEnvironment ?? diagnosticLevelFromClientConfig; // Diagnostic Setting from environment gets first priority.\n  return diagnosticLevelFromEnvOrClient ?? DefaultDiagnosticLevelValue; // Diagnostic Setting supplied in Client config gets second priority.\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { randomBytes } from \"crypto\";\nimport { ProtectedDataEncryptionKey } from \"../EncryptionKey/ProtectedDataEncryptionKey\";\nimport type { KeyEncryptionKey } from \"../KeyEncryptionKey\";\nimport { Constants } from \"../../common\";\n\n/**\n * The cache used to store the protected data encryption key.\n * see {@link ProtectedDataEncryptionKey}\n * @hidden\n */\nexport class ProtectedDataEncryptionKeyCache {\n  // key is JSON.stringify([encryptionKeyId, keyEncryptionKey.name, keyEncryptionKey.path, encryptedValue.toString(\"hex\")])\n  private cache: Map<string, [Date, ProtectedDataEncryptionKey]>;\n  // interval for clear cache to run\n  cacheRefresher: NodeJS.Timeout;\n\n  constructor(private cacheTimeToLive: number) {\n    this.cache = new Map<string, [Date, ProtectedDataEncryptionKey]>();\n    this.clearCacheOnTtlExpiry();\n  }\n\n  public get(key: string): ProtectedDataEncryptionKey | undefined {\n    if (!this.cache.has(key)) {\n      return undefined;\n    }\n    return this.cache.get(key)[1];\n  }\n\n  private set(key: string, protectedDataEncryptionKey: ProtectedDataEncryptionKey): void {\n    if (this.cacheTimeToLive === 0) {\n      return;\n    }\n    this.cache.set(key, [new Date(), protectedDataEncryptionKey]);\n  }\n\n  private async clearCacheOnTtlExpiry(): Promise<void> {\n    this.cacheRefresher = setInterval(() => {\n      const now = new Date();\n      for (const key of this.cache.keys()) {\n        if (now.getTime() - this.cache.get(key)[0].getTime() > this.cacheTimeToLive) {\n          this.cache.delete(key);\n        }\n      }\n    }, Constants.EncryptionCacheRefreshIntervalInMs);\n  }\n\n  private async createProtectedDataEncryptionKey(\n    name: string,\n    keyEncryptionKey: KeyEncryptionKey,\n    encryptedValue?: Buffer,\n  ): Promise<ProtectedDataEncryptionKey> {\n    let rawKey: Buffer;\n    let encryptedKey: Buffer;\n    if (encryptedValue) {\n      rawKey = await keyEncryptionKey.unwrapEncryptionKey(encryptedValue);\n      encryptedKey = encryptedValue;\n    } else {\n      rawKey = this.generateColumnEncryptionKey();\n      encryptedKey = await keyEncryptionKey.wrapEncryptionKey(rawKey);\n    }\n    const newKey = new ProtectedDataEncryptionKey(name, keyEncryptionKey, rawKey, encryptedKey);\n    if (this.cacheTimeToLive !== 0) {\n      const key = JSON.stringify([\n        name,\n        keyEncryptionKey.name,\n        keyEncryptionKey.path,\n        encryptedKey.toString(\"hex\"),\n      ]);\n      this.set(key, newKey);\n    }\n    return newKey;\n  }\n\n  public async getOrCreate(\n    name: string,\n    keyEncryptionKey: KeyEncryptionKey,\n    encryptedValue?: Uint8Array,\n    forceRefresh?: boolean,\n  ): Promise<ProtectedDataEncryptionKey> {\n    const encryptedValueBuffer = encryptedValue ? Buffer.from(encryptedValue) : undefined;\n    if (this.cacheTimeToLive === 0 || forceRefresh) {\n      return this.createProtectedDataEncryptionKey(name, keyEncryptionKey, encryptedValueBuffer);\n    }\n\n    if (encryptedValueBuffer) {\n      const key = JSON.stringify([\n        name,\n        keyEncryptionKey.name,\n        keyEncryptionKey.path,\n        encryptedValueBuffer.toString(\"hex\"),\n      ]);\n      const protectedDataEncryptionKey = this.get(key);\n      if (protectedDataEncryptionKey) {\n        return protectedDataEncryptionKey;\n      }\n    }\n    return this.createProtectedDataEncryptionKey(name, keyEncryptionKey, encryptedValueBuffer);\n  }\n\n  private generateColumnEncryptionKey(): Buffer {\n    return randomBytes(32);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { EncryptionKeyStoreProvider } from \"../EncryptionKeyStoreProvider\";\nimport { KeyEncryptionKey } from \"../KeyEncryptionKey\";\n\n/**\n * The cache used to store the key encryption keys.\n * see {@link KeyEncryptionKey}\n * @hidden\n */\nexport class KeyEncryptionKeyCache {\n  // key is JSON.stringify([name, path])\n  public cache: Map<string, KeyEncryptionKey>;\n\n  constructor() {\n    this.cache = new Map<string, KeyEncryptionKey>();\n  }\n\n  public getOrCreate(\n    name: string,\n    path: string,\n    keyStoreProvider: EncryptionKeyStoreProvider,\n  ): KeyEncryptionKey {\n    const key = JSON.stringify([name, path]);\n    let keyEncryptionKey = this.get(key);\n    if (!keyEncryptionKey) {\n      keyEncryptionKey = new KeyEncryptionKey(name, path, keyStoreProvider);\n      this.set(key, keyEncryptionKey);\n    }\n    return keyEncryptionKey;\n  }\n\n  private get(key: string): KeyEncryptionKey | undefined {\n    return this.cache.get(key);\n  }\n  private set(key: string, keyEncryptionKey: KeyEncryptionKey): void {\n    this.cache.set(key, keyEncryptionKey);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionPolicy } from \"../ClientEncryptionPolicy\";\nimport { EncryptionSettings } from \"../EncryptionSettings\";\nimport { EncryptionSettingForProperty } from \"../EncryptionSettingForProperty\";\n/**\n * The cache used to store encryption settings for a container.\n * see {@link EncryptionSettings}\n * @hidden\n */\nexport class EncryptionSettingsCache {\n  // key is databaseRid + '/' + containerRid\n  private cache: Map<string, EncryptionSettings>;\n\n  public constructor() {\n    this.cache = new Map<string, EncryptionSettings>();\n  }\n\n  public async create(\n    id: string,\n    containerRid: string,\n    partitionKeyPaths: string[],\n    clientEncryptionPolicy: ClientEncryptionPolicy,\n  ): Promise<EncryptionSettings> {\n    const encryptionSettings = new EncryptionSettings(id, containerRid, partitionKeyPaths);\n    if (!clientEncryptionPolicy) return;\n\n    for (const includedPath of clientEncryptionPolicy.includedPaths) {\n      const encryptionSettingForProperty = new EncryptionSettingForProperty(includedPath);\n      encryptionSettings.pathsToEncrypt.push(includedPath.path);\n      encryptionSettings.setEncryptionSettingForProperty(\n        includedPath.path,\n        encryptionSettingForProperty,\n      );\n    }\n    this.set(id, encryptionSettings);\n    return encryptionSettings;\n  }\n\n  public get(key: string): EncryptionSettings | undefined {\n    return this.cache.get(key);\n  }\n\n  public set(key: string, encryptionSettings: EncryptionSettings): void {\n    this.cache.set(key, encryptionSettings);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ClientEncryptionKeyProperties } from \"../ClientEncryptionKey\";\n\n/**\n * The cache used to store the properties of the client encryption key\n * see {@link ClientEncryptionKeyProperties}\n * @hidden\n */\n\nexport class ClientEncryptionKeyPropertiesCache {\n  // key is database rid + '/'+ clientEncryptionKeyId\n  private clientEncryptionKeyPropertiesCache: Map<string, ClientEncryptionKeyProperties>;\n\n  public constructor() {\n    this.clientEncryptionKeyPropertiesCache = new Map<string, ClientEncryptionKeyProperties>();\n  }\n\n  public get(key: string): ClientEncryptionKeyProperties | undefined {\n    return this.clientEncryptionKeyPropertiesCache.get(key);\n  }\n  public set(key: string, clientEncryptionKeyProperties: ClientEncryptionKeyProperties): void {\n    this.clientEncryptionKeyPropertiesCache.set(key, clientEncryptionKeyProperties);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { ProtectedDataEncryptionKeyCache } from \"./Cache/ProtectedDataEncryptionKeyCache\";\nimport { KeyEncryptionKeyCache } from \"./Cache/KeyEncryptionKeyCache\";\nimport { EncryptionSettingsCache } from \"./Cache/EncryptionSettingsCache\";\nimport { ClientEncryptionKeyPropertiesCache } from \"./Cache/ClientEncryptionKeyPropertiesCache\";\nimport { EncryptionKeyStoreProvider } from \"./EncryptionKeyStoreProvider\";\nimport { Constants } from \"../common/constants\";\nimport type { EncryptionKeyResolver } from \"./EncryptionKeyResolver\";\n/**\n * Cache manager for encryption related caches.\n * @hidden\n */\nexport class EncryptionManager {\n  public cacheTimeToLive: number;\n  public encryptionKeyStoreProvider: EncryptionKeyStoreProvider;\n  public protectedDataEncryptionKeyCache: ProtectedDataEncryptionKeyCache;\n  public keyEncryptionKeyCache: KeyEncryptionKeyCache;\n  public encryptionSettingsCache: EncryptionSettingsCache;\n  public clientEncryptionKeyPropertiesCache: ClientEncryptionKeyPropertiesCache;\n\n  constructor(encryptionKeyResolver: EncryptionKeyResolver, cacheTimeToLive?: number) {\n    this.cacheTimeToLive =\n      cacheTimeToLive !== undefined\n        ? cacheTimeToLive\n        : Constants.DefaultEncryptionCacheTimeToLiveInSeconds;\n    const cacheTtlInMs = this.getCacheTTlInMs();\n    this.encryptionKeyStoreProvider = new EncryptionKeyStoreProvider(\n      encryptionKeyResolver,\n      cacheTtlInMs,\n    );\n    this.protectedDataEncryptionKeyCache = new ProtectedDataEncryptionKeyCache(cacheTtlInMs);\n    this.keyEncryptionKeyCache = new KeyEncryptionKeyCache();\n    this.encryptionSettingsCache = new EncryptionSettingsCache();\n    this.clientEncryptionKeyPropertiesCache = new ClientEncryptionKeyPropertiesCache();\n  }\n\n  /**\n   * Converts the EncryptionTimeToLive instance to a number (milliseconds).\n   */\n  private getCacheTTlInMs(): number {\n    const millisecondsPerSecond = 1000;\n    return Number(this.cacheTimeToLive * millisecondsPerSecond);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { OperationType, ResourceType, isReadRequest } from \"./common\";\nimport type { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport type { Location, DatabaseAccount } from \"./documents\";\nimport type { RequestOptions } from \"./index\";\nimport { Constants } from \"./common/constants\";\nimport type { ResourceResponse } from \"./request\";\nimport { MetadataLookUpType } from \"./CosmosDiagnostics\";\nimport type { DiagnosticNodeInternal } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { withMetadataDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * @hidden\n * This internal class implements the logic for endpoint management for geo-replicated database accounts.\n */\nexport class GlobalEndpointManager {\n  /**\n   * The endpoint used to create the client instance.\n   */\n  private defaultEndpoint: string;\n  /**\n   * Flag to enable/disable automatic redirecting of requests based on read/write operations.\n   */\n  public enableEndpointDiscovery: boolean;\n  private isRefreshing: boolean;\n  private options: CosmosClientOptions;\n  /**\n   * List of azure regions to be used as preferred locations for read requests.\n   */\n  private preferredLocations: string[];\n  private writeableLocations: Location[] = [];\n  private readableLocations: Location[] = [];\n  private unavailableReadableLocations: Location[] = [];\n  private unavailableWriteableLocations: Location[] = [];\n\n  public preferredLocationsCount: number;\n  /**\n   * @param options - The document client instance.\n   * @internal\n   */\n  constructor(\n    options: CosmosClientOptions,\n    private readDatabaseAccount: (\n      diagnosticNode: DiagnosticNodeInternal,\n      opts: RequestOptions,\n    ) => Promise<ResourceResponse<DatabaseAccount>>,\n  ) {\n    this.options = options;\n    this.defaultEndpoint = options.endpoint;\n    this.enableEndpointDiscovery = options.connectionPolicy.enableEndpointDiscovery;\n    this.isRefreshing = false;\n    this.preferredLocations = this.options.connectionPolicy.preferredLocations;\n    this.preferredLocationsCount = this.preferredLocations ? this.preferredLocations.length : 0;\n  }\n\n  /**\n   * Gets the current read endpoint from the endpoint cache.\n   */\n  public async getReadEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.resolveServiceEndpoint(diagnosticNode, ResourceType.item, OperationType.Read);\n  }\n\n  /**\n   * Gets the current write endpoint from the endpoint cache.\n   */\n  public async getWriteEndpoint(diagnosticNode: DiagnosticNodeInternal): Promise<string> {\n    return this.resolveServiceEndpoint(diagnosticNode, ResourceType.item, OperationType.Replace);\n  }\n\n  public async getReadEndpoints(): Promise<ReadonlyArray<string>> {\n    return this.readableLocations.map((loc) => loc.databaseAccountEndpoint);\n  }\n\n  public async getWriteEndpoints(): Promise<ReadonlyArray<string>> {\n    return this.writeableLocations.map((loc) => loc.databaseAccountEndpoint);\n  }\n\n  public async markCurrentLocationUnavailableForRead(\n    diagnosticNode: DiagnosticNodeInternal,\n    endpoint: string,\n  ): Promise<void> {\n    await this.refreshEndpointList(diagnosticNode);\n    const location = this.readableLocations.find((loc) => loc.databaseAccountEndpoint === endpoint);\n    if (location) {\n      location.unavailable = true;\n      location.lastUnavailabilityTimestampInMs = Date.now();\n      this.unavailableReadableLocations.push(location);\n    }\n  }\n\n  public async markCurrentLocationUnavailableForWrite(\n    diagnosticNode: DiagnosticNodeInternal,\n    endpoint: string,\n  ): Promise<void> {\n    await this.refreshEndpointList(diagnosticNode);\n    const location = this.writeableLocations.find(\n      (loc) => loc.databaseAccountEndpoint === endpoint,\n    );\n    if (location) {\n      location.unavailable = true;\n      location.lastUnavailabilityTimestampInMs = Date.now();\n      this.unavailableWriteableLocations.push(location);\n    }\n  }\n\n  public canUseMultipleWriteLocations(\n    resourceType?: ResourceType,\n    operationType?: OperationType,\n  ): boolean {\n    let canUse = this.options.connectionPolicy.useMultipleWriteLocations;\n\n    if (resourceType) {\n      canUse =\n        canUse &&\n        (resourceType === ResourceType.item ||\n          (resourceType === ResourceType.sproc && operationType === OperationType.Execute));\n    }\n\n    return canUse;\n  }\n\n  public async resolveServiceEndpoint(\n    diagnosticNode: DiagnosticNodeInternal,\n    resourceType: ResourceType,\n    operationType: OperationType,\n    startServiceEndpointIndex: number = 0, // Represents the starting index for selecting servers.\n  ): Promise<string> {\n    // If endpoint discovery is disabled, always use the user provided endpoint\n\n    if (!this.options.connectionPolicy.enableEndpointDiscovery) {\n      diagnosticNode.addData({ readFromCache: true }, \"default_endpoint\");\n      diagnosticNode.recordEndpointResolution(this.defaultEndpoint);\n      return this.defaultEndpoint;\n    }\n\n    // If getting the database account, always use the user provided endpoint\n    if (resourceType === ResourceType.none) {\n      diagnosticNode.addData({ readFromCache: true }, \"none_resource\");\n      diagnosticNode.recordEndpointResolution(this.defaultEndpoint);\n      return this.defaultEndpoint;\n    }\n\n    if (this.readableLocations.length === 0 || this.writeableLocations.length === 0) {\n      const resourceResponse = await withMetadataDiagnostics(\n        async (metadataNode: DiagnosticNodeInternal) => {\n          return this.readDatabaseAccount(metadataNode, {\n            urlConnection: this.defaultEndpoint,\n          });\n        },\n        diagnosticNode,\n        MetadataLookUpType.DatabaseAccountLookUp,\n      );\n\n      this.writeableLocations = resourceResponse.resource.writableLocations;\n      this.readableLocations = resourceResponse.resource.readableLocations;\n    }\n\n    const locations = isReadRequest(operationType)\n      ? this.readableLocations\n      : this.writeableLocations;\n\n    let location;\n    // If we have preferred locations, try each one in order and use the first available one\n    if (\n      this.preferredLocations &&\n      this.preferredLocations.length > 0 &&\n      startServiceEndpointIndex < this.preferredLocations.length\n    ) {\n      for (let i = startServiceEndpointIndex; i < this.preferredLocations.length; i++) {\n        const preferredLocation = this.preferredLocations[i];\n        location = locations.find(\n          (loc) =>\n            loc.unavailable !== true &&\n            normalizeEndpoint(loc.name) === normalizeEndpoint(preferredLocation),\n        );\n        if (location) {\n          break;\n        }\n      }\n    }\n\n    // If no preferred locations or one did not match, just grab the first one that is available\n    if (!location) {\n      const startIndexValid =\n        startServiceEndpointIndex >= 0 && startServiceEndpointIndex < locations.length;\n      const locationsToSearch = startIndexValid\n        ? locations.slice(startServiceEndpointIndex)\n        : locations;\n      location = locationsToSearch.find((loc) => {\n        return loc.unavailable !== true;\n      });\n    }\n\n    location = location ? location : { name: \"\", databaseAccountEndpoint: this.defaultEndpoint };\n    diagnosticNode.recordEndpointResolution(location.databaseAccountEndpoint);\n    return location.databaseAccountEndpoint;\n  }\n\n  /**\n   * Refreshes the endpoint list by clearning stale unavailability and then\n   *  retrieving the writable and readable locations from the geo-replicated database account\n   *  and then updating the locations cache.\n   *  We skip the refreshing if enableEndpointDiscovery is set to False\n   */\n  public async refreshEndpointList(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    if (!this.isRefreshing && this.enableEndpointDiscovery) {\n      this.isRefreshing = true;\n      const databaseAccount = await this.getDatabaseAccountFromAnyEndpoint(diagnosticNode);\n      if (databaseAccount) {\n        this.refreshStaleUnavailableLocations();\n        this.refreshEndpoints(databaseAccount);\n      }\n      this.isRefreshing = false;\n    }\n  }\n\n  private refreshEndpoints(databaseAccount: DatabaseAccount): void {\n    for (const location of databaseAccount.writableLocations) {\n      const existingLocation = this.writeableLocations.find((loc) => loc.name === location.name);\n      if (!existingLocation) {\n        this.writeableLocations.push(location);\n      }\n    }\n    for (const location of databaseAccount.readableLocations) {\n      const existingLocation = this.readableLocations.find((loc) => loc.name === location.name);\n      if (!existingLocation) {\n        this.readableLocations.push(location);\n      }\n    }\n  }\n\n  private refreshStaleUnavailableLocations(): void {\n    const now = Date.now();\n    this.updateLocation(now, this.unavailableReadableLocations, this.readableLocations);\n    this.unavailableReadableLocations = this.cleanUnavailableLocationList(\n      now,\n      this.unavailableReadableLocations,\n    );\n\n    this.updateLocation(now, this.unavailableWriteableLocations, this.writeableLocations);\n    this.unavailableWriteableLocations = this.cleanUnavailableLocationList(\n      now,\n      this.unavailableWriteableLocations,\n    );\n  }\n\n  /**\n   * update the locationUnavailability to undefined if the location is available again\n   * @param now - current time\n   * @param unavailableLocations - list of unavailable locations\n   * @param allLocations - list of all locations\n   */\n  private updateLocation(\n    now: number,\n    unavailableLocations: Location[],\n    allLocations: Location[],\n  ): void {\n    for (const location of unavailableLocations) {\n      const unavaialableLocation = allLocations.find((loc) => loc.name === location.name);\n      if (\n        unavaialableLocation &&\n        now - unavaialableLocation.lastUnavailabilityTimestampInMs >\n          Constants.LocationUnavailableExpirationTimeInMs\n      ) {\n        unavaialableLocation.unavailable = false;\n      }\n    }\n  }\n\n  private cleanUnavailableLocationList(now: number, unavailableLocations: Location[]): Location[] {\n    return unavailableLocations.filter((loc) => {\n      if (\n        loc &&\n        now - loc.lastUnavailabilityTimestampInMs >= Constants.LocationUnavailableExpirationTimeInMs\n      ) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  /**\n   * Gets the database account first by using the default endpoint, and if that doesn't returns\n   * use the endpoints for the preferred locations in the order they are specified to get\n   * the database account.\n   */\n  private async getDatabaseAccountFromAnyEndpoint(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<DatabaseAccount> {\n    try {\n      const options = { urlConnection: this.defaultEndpoint };\n      const { resource: databaseAccount } = await this.readDatabaseAccount(diagnosticNode, options);\n      return databaseAccount;\n      // If for any reason(non - globaldb related), we are not able to get the database\n      // account from the above call to readDatabaseAccount,\n      // we would try to get this information from any of the preferred locations that the user\n      // might have specified (by creating a locational endpoint)\n      // and keeping eating the exception until we get the database account and return None at the end,\n      // if we are not able to get that info from any endpoints\n    } catch (err: any) {\n      // TODO: Tracing\n    }\n\n    if (this.preferredLocations) {\n      for (const location of this.preferredLocations) {\n        try {\n          const locationalEndpoint = GlobalEndpointManager.getLocationalEndpoint(\n            this.defaultEndpoint,\n            location,\n          );\n          const options = { urlConnection: locationalEndpoint };\n          const { resource: databaseAccount } = await this.readDatabaseAccount(\n            diagnosticNode,\n            options,\n          );\n          if (databaseAccount) {\n            return databaseAccount;\n          }\n        } catch (err: any) {\n          // TODO: Tracing\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets the locational endpoint using the location name passed to it using the default endpoint.\n   *\n   * @param defaultEndpoint - The default endpoint to use for the endpoint.\n   * @param locationName    - The location name for the azure region like \"East US\".\n   */\n  private static getLocationalEndpoint(defaultEndpoint: string, locationName: string): string {\n    // For defaultEndpoint like 'https://contoso.documents.azure.com:443/' parse it to generate URL format\n    // This defaultEndpoint should be global endpoint(and cannot be a locational endpoint)\n    // and we agreed to document that\n    const endpointUrl = new URL(defaultEndpoint);\n\n    // hostname attribute in endpointUrl will return 'contoso.documents.azure.com'\n    if (endpointUrl.hostname) {\n      const hostnameParts = endpointUrl.hostname.toString().toLowerCase().split(\".\");\n      if (hostnameParts) {\n        // globalDatabaseAccountName will return 'contoso'\n        const globalDatabaseAccountName = hostnameParts[0];\n\n        // Prepare the locationalDatabaseAccountName as contoso-EastUS for location_name 'East US'\n        const locationalDatabaseAccountName =\n          globalDatabaseAccountName + \"-\" + locationName.replace(\" \", \"\");\n\n        // Replace 'contoso' with 'contoso-EastUS' and\n        // return locationalEndpoint as https://contoso-EastUS.documents.azure.com:443/\n        const locationalEndpoint = defaultEndpoint\n          .toLowerCase()\n          .replace(globalDatabaseAccountName, locationalDatabaseAccountName);\n        return locationalEndpoint;\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction normalizeEndpoint(endpoint: string): string {\n  return endpoint.split(\" \").join(\"\").toLowerCase();\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { Database, Databases } from \"./client/Database\";\nimport { Offer, Offers } from \"./client/Offer\";\nimport { ClientContext } from \"./ClientContext\";\nimport { parseConnectionString } from \"./common\";\nimport { Constants } from \"./common/constants\";\nimport { getUserAgent } from \"./common/platform\";\nimport type { CosmosClientOptions } from \"./CosmosClientOptions\";\nimport type { ClientConfigDiagnostic } from \"./CosmosDiagnostics\";\nimport { determineDiagnosticLevel, getDiagnosticLevelFromEnvironment } from \"./diagnostics\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"./diagnostics/DiagnosticNodeInternal\";\nimport { DatabaseAccount, defaultConnectionPolicy } from \"./documents\";\nimport { EncryptionManager } from \"./encryption/EncryptionManager\";\nimport { GlobalEndpointManager } from \"./globalEndpointManager\";\nimport type { RequestOptions } from \"./request\";\nimport { ResourceResponse } from \"./request\";\nimport { checkURL } from \"./utils/checkURL\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"./utils/diagnostics\";\n\n/**\n * Provides a client-side logical representation of the Azure Cosmos DB database account.\n * This client is used to configure and execute requests in the Azure Cosmos DB database service.\n * @example Instantiate a client and create a new database\n * ```typescript\n * const client = new CosmosClient({endpoint: \"<URL HERE>\", key: \"<KEY HERE>\"});\n * await client.databases.create({id: \"<database name here>\"});\n * ```\n * @example Instantiate a client with custom Connection Policy\n * ```typescript\n * const client = new CosmosClient({\n *    endpoint: \"<URL HERE>\",\n *    key: \"<KEY HERE>\",\n *    connectionPolicy: {\n *     requestTimeout: 10000,\n *    },\n * });\n * ```\n */\nexport class CosmosClient {\n  /**\n   * Used for creating new databases, or querying/reading all databases.\n   *\n   * Use `.database(id)` to read, replace, or delete a specific, existing database by id.\n   *\n   * @example Create a new database\n   * ```typescript\n   * const {resource: databaseDefinition, database} = await client.databases.create({id: \"<name here>\"});\n   * ```\n   */\n  public readonly databases: Databases;\n  /**\n   * Used for querying & reading all offers.\n   *\n   * Use `.offer(id)` to read, or replace existing offers.\n   */\n  public readonly offers: Offers;\n  private clientContext: ClientContext;\n  private endpointRefresher: NodeJS.Timeout;\n  /**\n   * @internal\n   */\n  private encryptionManager: EncryptionManager;\n  /**\n   * Creates a new {@link CosmosClient} object from a connection string. Your database connection string can be found in the Azure Portal\n   */\n  constructor(connectionString: string);\n  /**\n   * Creates a new {@link CosmosClient} object. See {@link CosmosClientOptions} for more details on what options you can use.\n   * @param options - bag of options; require at least endpoint and auth to be configured\n   */\n  constructor(options: CosmosClientOptions);\n  constructor(optionsOrConnectionString: string | CosmosClientOptions) {\n    if (typeof optionsOrConnectionString === \"string\") {\n      optionsOrConnectionString = parseConnectionString(optionsOrConnectionString);\n    } else if (optionsOrConnectionString.connectionString) {\n      const { endpoint, key } = parseConnectionString(optionsOrConnectionString.connectionString);\n      optionsOrConnectionString.endpoint = endpoint;\n      optionsOrConnectionString.key = key;\n    }\n\n    const endpoint = checkURL(optionsOrConnectionString.endpoint);\n    if (!endpoint) {\n      throw new Error(\"Invalid endpoint specified\");\n    }\n\n    if (optionsOrConnectionString.clientEncryptionOptions) {\n      if (!optionsOrConnectionString.clientEncryptionOptions.keyEncryptionKeyResolver) {\n        throw new Error(\n          \"KeyEncryptionKeyResolver needs to be provided to enable client-side encryption.\",\n        );\n      }\n      if (\n        optionsOrConnectionString.clientEncryptionOptions.encryptionKeyTimeToLiveInSeconds &&\n        optionsOrConnectionString.clientEncryptionOptions.encryptionKeyTimeToLiveInSeconds < 60\n      ) {\n        throw new Error(\"EncryptionKeyTimeToLiveInSeconds needs to be >= 60 seconds.\");\n      }\n      this.encryptionManager = new EncryptionManager(\n        optionsOrConnectionString.clientEncryptionOptions.keyEncryptionKeyResolver,\n        optionsOrConnectionString.clientEncryptionOptions.encryptionKeyTimeToLiveInSeconds,\n      );\n    }\n\n    const clientConfig: ClientConfigDiagnostic =\n      this.initializeClientConfigDiagnostic(optionsOrConnectionString);\n\n    optionsOrConnectionString.connectionPolicy = Object.assign(\n      {},\n      defaultConnectionPolicy,\n      optionsOrConnectionString.connectionPolicy,\n    );\n\n    optionsOrConnectionString.defaultHeaders = optionsOrConnectionString.defaultHeaders || {};\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CacheControl] = \"no-cache\";\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.Version] =\n      Constants.CurrentVersion;\n    if (optionsOrConnectionString.consistencyLevel !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ConsistencyLevel] =\n        optionsOrConnectionString.consistencyLevel;\n    }\n\n    if (optionsOrConnectionString.throughputBucket !== undefined) {\n      optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.ThroughputBucket] =\n        optionsOrConnectionString.throughputBucket;\n    }\n\n    const userAgent = getUserAgent(optionsOrConnectionString.userAgentSuffix);\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.UserAgent] = userAgent;\n    optionsOrConnectionString.defaultHeaders[Constants.HttpHeaders.CustomUserAgent] = userAgent;\n\n    const globalEndpointManager = new GlobalEndpointManager(\n      optionsOrConnectionString,\n      async (diagnosticNode: DiagnosticNodeInternal, opts: RequestOptions) =>\n        this.getDatabaseAccountInternal(diagnosticNode, opts),\n    );\n\n    this.clientContext = new ClientContext(\n      optionsOrConnectionString,\n      globalEndpointManager,\n      clientConfig,\n      determineDiagnosticLevel(\n        optionsOrConnectionString.diagnosticLevel,\n        getDiagnosticLevelFromEnvironment(),\n      ),\n    );\n    if (\n      optionsOrConnectionString.connectionPolicy?.enableEndpointDiscovery &&\n      optionsOrConnectionString.connectionPolicy?.enableBackgroundEndpointRefreshing\n    ) {\n      this.backgroundRefreshEndpointList(\n        globalEndpointManager,\n        optionsOrConnectionString.connectionPolicy.endpointRefreshRateInMs ||\n          defaultConnectionPolicy.endpointRefreshRateInMs,\n      );\n    }\n\n    this.databases = new Databases(this, this.clientContext, this.encryptionManager);\n    this.offers = new Offers(this, this.clientContext);\n  }\n\n  private initializeClientConfigDiagnostic(\n    optionsOrConnectionString: CosmosClientOptions,\n  ): ClientConfigDiagnostic {\n    return {\n      endpoint: optionsOrConnectionString.endpoint,\n      resourceTokensConfigured: optionsOrConnectionString.resourceTokens !== undefined,\n      tokenProviderConfigured: optionsOrConnectionString.tokenProvider !== undefined,\n      aadCredentialsConfigured: optionsOrConnectionString.aadCredentials !== undefined,\n      connectionPolicyConfigured: optionsOrConnectionString.connectionPolicy !== undefined,\n      consistencyLevel: optionsOrConnectionString.consistencyLevel,\n      defaultHeaders: optionsOrConnectionString.defaultHeaders,\n      agentConfigured: optionsOrConnectionString.agent !== undefined,\n      userAgentSuffix: optionsOrConnectionString.userAgentSuffix,\n      diagnosticLevel: optionsOrConnectionString.diagnosticLevel,\n      pluginsConfigured: optionsOrConnectionString.plugins !== undefined,\n      sDKVersion: Constants.SDKVersion,\n    };\n  }\n\n  /**\n   * Get information about the current {@link DatabaseAccount} (including which regions are supported, etc.)\n   */\n  public async getDatabaseAccount(\n    options?: RequestOptions,\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.getDatabaseAccountInternal(diagnosticNode, options);\n    }, this.clientContext);\n  }\n\n  /**\n   * @hidden\n   */\n  public async getDatabaseAccountInternal(\n    diagnosticNode: DiagnosticNodeInternal,\n    options?: RequestOptions,\n  ): Promise<ResourceResponse<DatabaseAccount>> {\n    const response = await this.clientContext.getDatabaseAccount(diagnosticNode, options);\n    return new ResourceResponse<DatabaseAccount>(\n      response.result,\n      response.headers,\n      response.code,\n      getEmptyCosmosDiagnostics(),\n      response.substatus,\n    );\n  }\n\n  /**\n   * Gets the currently used write endpoint url. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public async getWriteEndpoint(): Promise<string> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.clientContext.getWriteEndpoint(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public async getReadEndpoint(): Promise<string> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      return this.clientContext.getReadEndpoint(diagnosticNode);\n    }, this.clientContext);\n  }\n\n  /**\n   * Gets the known write endpoints. Useful for troubleshooting purposes.\n   *\n   * The urls may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getWriteEndpoints(): Promise<readonly string[]> {\n    return this.clientContext.getWriteEndpoints();\n  }\n\n  /**\n   * Gets the currently used read endpoint. Useful for troubleshooting purposes.\n   *\n   * The url may contain a region suffix (e.g. \"-eastus\") if we're using location specific endpoints.\n   */\n  public getReadEndpoints(): Promise<readonly string[]> {\n    return this.clientContext.getReadEndpoints();\n  }\n\n  /**\n   * Used for reading, updating, or deleting a existing database by id or accessing containers belonging to that database.\n   *\n   * This does not make a network call. Use `.read` to get info about the database after getting the {@link Database} object.\n   *\n   * @param id - The id of the database.\n   * @example Create a new container off of an existing database\n   * ```typescript\n   * const container = client.database(\"<database id>\").containers.create(\"<container id>\");\n   * ```\n   *\n   * @example Delete an existing database\n   * ```typescript\n   * await client.database(\"<id here>\").delete();\n   * ```\n   */\n  public database(id: string): Database {\n    return new Database(this, id, this.clientContext, this.encryptionManager);\n  }\n\n  /**\n   * Used for reading, or updating a existing offer by id.\n   * @param id - The id of the offer.\n   */\n  public offer(id: string): Offer {\n    return new Offer(this, id, this.clientContext);\n  }\n\n  /**\n   * Clears background endpoint refresher. Use client.dispose() when destroying the CosmosClient within another process.\n   */\n  public dispose(): void {\n    clearTimeout(this.endpointRefresher);\n    if (this.clientContext.enableEncryption) {\n      clearTimeout(this.encryptionManager.encryptionKeyStoreProvider.cacheRefresher);\n      clearTimeout(this.encryptionManager.protectedDataEncryptionKeyCache.cacheRefresher);\n    }\n  }\n\n  private async backgroundRefreshEndpointList(\n    globalEndpointManager: GlobalEndpointManager,\n    refreshRate: number,\n  ) {\n    this.endpointRefresher = setInterval(() => {\n      try {\n        return withDiagnostics(\n          async (diagnosticNode: DiagnosticNodeInternal) => {\n            return globalEndpointManager.refreshEndpointList(diagnosticNode);\n          },\n          this.clientContext,\n          DiagnosticNodeType.BACKGROUND_REFRESH_THREAD,\n        );\n      } catch (e: any) {\n        console.warn(\"Failed to refresh endpoints\", e);\n      }\n    }, refreshRate);\n    if (this.endpointRefresher.unref && typeof this.endpointRefresher.unref === \"function\") {\n      this.endpointRefresher.unref();\n    }\n  }\n\n  /**\n   * Update the host framework. If provided host framework will be used to generate the defualt SDK user agent.\n   * @param hostFramework - A custom string.\n   * @internal\n   */\n  public async updateHostFramework(hostFramework: string): Promise<void> {\n    this.clientContext.refreshUserAgent(hostFramework);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { CosmosContainerChildResourceKind } from \"../../common/constants\";\nimport type { CosmosKeyType } from \"../../common/constants\";\n\nexport class SasTokenProperties {\n  user: string;\n  userTag: string;\n  databaseName: string;\n  containerName: string;\n  resourceName: string;\n  resourcePath: string;\n  resourceKind: CosmosContainerChildResourceKind;\n  partitionKeyValueRanges: string[];\n  startTime: Date;\n  expiryTime: Date;\n  keyType: CosmosKeyType | number;\n  controlPlaneReaderScope: number;\n  controlPlaneWriterScope: number;\n  dataPlaneReaderScope: number;\n  dataPlaneWriterScope: number;\n  cosmosContainerChildResourceKind: CosmosContainerChildResourceKind;\n  cosmosKeyType: CosmosKeyType;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/// <reference lib=\"dom\"/>\n\nexport function encodeUTF8(str: string): Uint8Array {\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = str.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function encodeBase64(value: ArrayBuffer): string {\n  if (\"function\" !== typeof btoa) {\n    throw new Error(\"Your browser environment is missing the global `btoa` function\");\n  }\n\n  let binary = \"\";\n  const bytes = new Uint8Array(value);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { SasTokenProperties } from \"../client/SasToken/SasTokenProperties\";\nimport { Constants, CosmosKeyType, SasTokenPermissionKind } from \"../common\";\nimport { encodeUTF8 } from \"./encode\";\nimport { hmac } from \"./hmac\";\n\n/**\n * Experimental internal only\n * Generates the payload representing the permission configuration for the sas token.\n */\n\nexport async function createAuthorizationSasToken(\n  masterKey: string,\n  sasTokenProperties: SasTokenProperties,\n): Promise<string> {\n  let resourcePrefixPath = \"\";\n  if (\n    typeof sasTokenProperties.databaseName === \"string\" &&\n    sasTokenProperties.databaseName !== \"\"\n  ) {\n    resourcePrefixPath += `/${Constants.Path.DatabasesPathSegment}/${sasTokenProperties.databaseName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.containerName === \"string\" &&\n    sasTokenProperties.containerName !== \"\"\n  ) {\n    if (sasTokenProperties.databaseName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.databaseName} \\\n                          is an invalid database name`);\n    }\n    resourcePrefixPath += `/${Constants.Path.CollectionsPathSegment}/${sasTokenProperties.containerName}`;\n  }\n\n  if (\n    typeof sasTokenProperties.resourceName === \"string\" &&\n    sasTokenProperties.resourceName !== \"\"\n  ) {\n    if (sasTokenProperties.containerName === \"\") {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.containerName} \\\n                          is an invalid container name`);\n    }\n    switch (sasTokenProperties.resourceKind) {\n      case \"ITEM\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.DocumentsPathSegment}`;\n        break;\n      case \"STORED_PROCEDURE\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.StoredProceduresPathSegment}`;\n        break;\n      case \"USER_DEFINED_FUNCTION\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.UserDefinedFunctionsPathSegment}`;\n        break;\n      case \"TRIGGER\":\n        resourcePrefixPath += `${Constants.Path.Root}${Constants.Path.TriggersPathSegment}`;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid resource kind`);\n        break;\n    }\n    resourcePrefixPath += `${Constants.Path.Root}${sasTokenProperties.resourceName}${Constants.Path.Root}`;\n  }\n  sasTokenProperties.resourcePath = resourcePrefixPath.toString();\n\n  let partitionRanges = \"\";\n\n  if (\n    sasTokenProperties.partitionKeyValueRanges !== undefined &&\n    sasTokenProperties.partitionKeyValueRanges.length > 0\n  ) {\n    if (\n      typeof sasTokenProperties.resourceKind !== \"string\" &&\n      sasTokenProperties.resourceKind !== \"ITEM\"\n    ) {\n      throw new Error(`illegalArgumentException : ${sasTokenProperties.resourceKind} \\\n                          is an invalid partition key value range`);\n    }\n    sasTokenProperties.partitionKeyValueRanges.forEach((range) => {\n      partitionRanges += `${encodeUTF8(range)},`;\n    });\n  }\n\n  if (sasTokenProperties.controlPlaneReaderScope === 0) {\n    sasTokenProperties.controlPlaneReaderScope += SasTokenPermissionKind.ContainerReadAny;\n    sasTokenProperties.controlPlaneWriterScope += SasTokenPermissionKind.ContainerReadAny;\n  }\n\n  if (\n    sasTokenProperties.dataPlaneReaderScope === 0 &&\n    sasTokenProperties.dataPlaneWriterScope === 0\n  ) {\n    sasTokenProperties.dataPlaneReaderScope = SasTokenPermissionKind.ContainerFullAccess;\n    sasTokenProperties.dataPlaneWriterScope = SasTokenPermissionKind.ContainerFullAccess;\n  }\n\n  if (\n    typeof sasTokenProperties.keyType !== \"number\" ||\n    typeof sasTokenProperties.keyType === \"undefined\"\n  ) {\n    switch (sasTokenProperties.keyType) {\n      case CosmosKeyType.PrimaryMaster:\n        sasTokenProperties.keyType = 1;\n        break;\n      case CosmosKeyType.SecondaryMaster:\n        sasTokenProperties.keyType = 2;\n        break;\n      case CosmosKeyType.PrimaryReadOnly:\n        sasTokenProperties.keyType = 3;\n        break;\n      case CosmosKeyType.SecondaryReadOnly:\n        sasTokenProperties.keyType = 4;\n        break;\n      default:\n        throw new Error(`illegalArgumentException : ${sasTokenProperties.keyType} \\\n                          is an invalid key type`);\n        break;\n    }\n  }\n\n  const payload =\n    sasTokenProperties.user +\n    \"\\n\" +\n    sasTokenProperties.userTag +\n    \"\\n\" +\n    sasTokenProperties.resourcePath +\n    \"\\n\" +\n    partitionRanges +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.startTime).toString(16) +\n    \"\\n\" +\n    utcsecondsSinceEpoch(sasTokenProperties.expiryTime).toString(16) +\n    \"\\n\" +\n    sasTokenProperties.keyType +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.controlPlaneWriterScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneReaderScope.toString(16) +\n    \"\\n\" +\n    sasTokenProperties.dataPlaneWriterScope.toString(16) +\n    \"\\n\";\n\n  const signedPayload = await hmac(masterKey, Buffer.from(payload).toString(\"base64\"));\n  return \"type=sas&ver=1.0&sig=\" + signedPayload + \";\" + Buffer.from(payload).toString(\"base64\");\n}\n/**\n * @hidden\n */\n// TODO: utcMilllisecondsSinceEpoch\nexport function utcsecondsSinceEpoch(date: Date): number {\n  return Math.round(date.getTime() / 1000);\n}\n"],"names":["ResourceType","HTTPMethod","OperationType","SasTokenPermissionKind","EncryptionType","createHmac","ConnectionMode","ConsistencyLevel","DataType","IndexingMode","SpatialType","VectorIndexType","IndexKind","PartitionKeyDefinitionVersion","PartitionKeyKind","PermissionMode","PriorityLevel","TriggerOperation","TriggerType","UserDefinedFunctionType","GeospatialType","VectorEmbeddingDataType","VectorEmbeddingDistanceFunction","logger","createClientLogger","MetadataLookUpType","CosmosDbDiagnosticLevel","randomUUID","DiagnosticNodeType","reverse","prefixKeyByType","ChangeFeedMode","__await","TYPEORDCOMPARATOR","createHash","__asyncDelegator","__asyncValues","ConflictResolutionMode","EncryptionAlgorithm","EncryptionKeyResolverName","KeyEncryptionAlgorithm","KeyClient","randomBytes","createCipheriv","createDecipheriv","CosmosEncryptedNumberType","PluginOn","createDefaultHttpClient","createHttpHeaders","createPipelineRequest","RetryUtility.execute","createEmptyPipeline","bearerTokenAuthenticationPolicy","process"],"mappings":"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"}